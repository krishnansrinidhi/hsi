
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
0800a620 l    d  .rodata	00000000 .rodata
0801ae68 l    d  .ARM	00000000 .ARM
0801ae70 l    d  .init_array	00000000 .init_array
0801ae78 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000a9c l    d  .bss	00000000 .bss
20001ce4 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801b918 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
08005ba4 l       .text	00000000 LoopCopyDataInit
08005b9c l       .text	00000000 CopyDataInit
08005bb8 l       .text	00000000 LoopFillZerobss
08005bb2 l       .text	00000000 FillZerobss
08005bca l       .text	00000000 LoopForever
08005be4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800a608 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 __do_global_dtors_aux
20000a9c l       .bss	00000000 completed.8122
0801ae78 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001ac l     F .text	00000000 frame_dummy
20000aa0 l       .bss	00000000 object.8127
0801ae74 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usart.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000004 l     O .data	00000004 buf.5804
20000008 l     O .data	00000004 printPrompt.5805
0800a97e l     O .rodata	00000006 __FUNCTION__.5819
20000ab8 l     O .bss	00000004 count.5802
20000abc l     O .bss	00000004 saved.5803
00000000 l    df *ABS*	00000000 dump.c
20000010 l     O .data	00000004 count.5233
20000ac0 l     O .bss	00000004 address.5232
00000000 l    df *ABS*	00000000 syscall.c
20000ac4 l     O .bss	00000004 heap_end.5843
00000000 l    df *ABS*	00000000 terminal.c
08001944 l     F .text	00000080 USBD_CDC_DataIn
20000ac8 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000bec l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
08003bea l     F .text	0000002a I2C_TransferConfig
08003c14 l     F .text	00000090 I2C_IsAcknowledgeFailed
08003ca4 l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
08003d0c l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
08003d60 l     F .text	00000064 I2C_RequestMemoryWrite
08003dc4 l     F .text	00000062 I2C_RequestMemoryRead
08003e26 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800413a l     F .text	0000008c SPI_WaitFlagStateUntilTimeout
080041c6 l     F .text	0000009c SPI_WaitFifoStateUntilTimeout
08004262 l     F .text	00000042 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000bf0 l     O .bss	00000001 cfgidx.10117
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
08004c20 l     F .text	00000012 USBD_CDC_DataIn
08004c32 l     F .text	00000028 USBD_CDC_EP0_RxReady
08004c5c l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08004c68 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
08004c74 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
08004c8c l     F .text	0000002e USBD_CDC_DataOut
08004cba l     F .text	0000005a USBD_CDC_Setup
08004d14 l     F .text	0000003a USBD_CDC_DeInit
08004d4e l     F .text	00000086 USBD_CDC_Init
20000094 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000bf4 l     O .bss	00000230 mem.10338
00000000 l    df *ABS*	00000000 usbd_desc.c
08005090 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
08005168 l     F .text	00000004 CDC_Itf_DeInit
0800516c l     F .text	00000020 CDC_Itf_Receive
0800518c l     F .text	00000018 CDC_Itf_Init
080051a4 l     F .text	00000058 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
080051fc l     F .text	00000080 SPIx_Init
0800527c l     F .text	00000040 SPIx_WriteRead
080052bc l     F .text	0000006c I2Cx_Init
20000e24 l     O .bss	00000060 SpiHandle
20000e84 l     O .bss	00000038 I2cHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000ebc l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000ec0 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
080075bc l     F .text	00000076 __sbprintf
0801ace8 l     O .rodata	00000010 zeroes.6926
0801ad3c l     O .rodata	00000010 blanks.6925
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080076f8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
08007718 l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08008878 l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
2000062c l     O .data	00000038 lconv
20000664 l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0801ae30 l     O .rodata	0000000c p05.5302
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a204 l     F .text	00000078 __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000200 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
0801ae7c l       .fini_array	00000000 __fini_array_end
20000a9c l       .bss	00000000 __bss_start__
20001ce4 l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
0801ae78 l       .fini_array	00000000 __fini_array_start
0801ae78 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
0801ae70 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
0801ae70 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
0801ae70 l       .init_array	00000000 __preinit_array_start
08005be4  w    F .text	00000002 RTC_Alarm_IRQHandler
08015be8 g     O .rodata	00000010 RTC_BKP19R_fields
0801ab34 g     O .rodata	00000010 APBAHBPrescTable
0800bd5c g     O .rodata	00000058 TIM2_SR_fields
08013270 g     O .rodata	00000108 CAN_F10R1_fields
08016a68 g     O .rodata	00000010 TIM16_DMAR_fields
08005d08 g     F .text	00000014 putchar
08005be4  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080157d8 g     O .rodata	00000010 I2C1_RXDR_fields
0800576c g     F .text	0000001e LSM303DLHC_AccFilterCmd
08005be4  w    F .text	00000002 TIM8_CC_IRQHandler
08015db8 g     O .rodata	00000038 TIM6_CR1_fields
0800b998 g     O .rodata	00000050 I2C1_ICR_fields
0800193c g     F .text	00000004 _isatty_r
20000ef8 g     O .bss	00000050 input_b
08000b80 g     F .text	00000012 .hidden __aeabi_dcmple
08015aa8 g     O .rodata	00000010 TIM2_PSC_fields
0800c5b4 g     O .rodata	00000030 TIM17_CCMR1_Output_fields
08005ecc g     F .text	000000ba strcpy
08016048 g     O .rodata	00000058 COMP_COMP5_CSR_fields
08000c6c g     F .text	0000002e .hidden __gnu_uldivmod_helper
08011af4 g     O .rodata	00000010 I2C1_TXDR_fields
08005d1c g     F .text	00000064 _puts_r
08005130 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800dbac g     O .rodata	00000108 CAN_F19R1_fields
08000abc g     F .text	0000007a .hidden __cmpdf2
08001ce8 g     F .text	0000003c DecodeWriteRegister
08003a9c g     F .text	000000c8 HAL_PCD_EP_ClrStall
08012ec4 g     O .rodata	00000010 TIM16_CCR1_fields
08005be4  w    F .text	00000002 DebugMon_Handler
08001940 g     F .text	00000004 _lseek_r
08012324 g     O .rodata	00000028 FPU_MVFR1_fields
08004f28 g     F .text	0000001a HAL_PCD_ResetCallback
08003b98 g     F .text	0000002e PCD_WritePMA
08016d18 g     O .rodata	00000108 CAN_F22R1_fields
0800bf9c g     O .rodata	000000e8 CAN_FA1R_fields
20000f98 g     O .bss	00000224 hUSBDDevice
0800ddbc g     O .rodata	00000050 TIM2_SMCR_fields
0800c55c g     O .rodata	00000028 NVIC_IPR1_fields
08000abc g     F .text	0000007a .hidden __eqdf2
08011ff4 g     O .rodata	00000108 CAN_F14R1_fields
08013260 g     O .rodata	00000010 TIM8_PSC_fields
080112f4 g     O .rodata	00000038 TIM15_EGR_fields
08000ca0 g     F .text	0000029c .hidden __divdi3
080019c4 g     F .text	00000054 CmdStats
08005a60 g     F .text	0000002e L3GD20_FilterConfig
08003b64 g     F .text	00000034 HAL_PCDEx_PMAConfig
08013ca4 g     O .rodata	000000fc TIM2_registers
0801548c g     O .rodata	00000060 TIM15_DIER_fields
0800ce30 g     O .rodata	00000010 DMA1_CMAR3_fields
0800d644 g     O .rodata	00000108 GPIOA_BSRR_fields
0801a6e8 g     O .rodata	00000068 DMA1_CCR7_fields
0800311e g     F .text	000001b0 HAL_PCD_EP_Close
080124a4 g     O .rodata	00000010 TSC_IOG6CR_fields
0800ce40 g     O .rodata	00000030 ADC1_SQR1_fields
0800062c g     F .text	0000005a .hidden __floatdidf
0800cd00 g     O .rodata	000000e8 CAN_FS1R_fields
08012dfc g     O .rodata	00000038 TIM1_CCMR2_Input_fields
0800b558 g     O .rodata	00000018 RTC_SHIFTR_fields
08005ce0 g     F .text	00000028 printf
080059e4 g     F .text	00000040 L3GD20_EnableIT
08015c40 g     O .rodata	00000030 CAN_TI1R_fields
0800465e g     F .text	00000016 USBD_SetClassConfig
08012a1c g     O .rodata	00000028 NVIC_IPR14_fields
0800a598 g     F .text	00000054 _wcrtomb_r
08005be4  w    F .text	00000002 TIM1_CC_IRQHandler
08002ab0 g     F .text	00000060 HAL_NVIC_SetPriority
0800e394 g     O .rodata	00000150 ADC1_registers
08004f10 g     F .text	00000010 HAL_PCD_DataInStageCallback
08015bf8 g     O .rodata	00000020 TIM2_CR2_fields
0801294c g     O .rodata	00000010 Flash_WRPR_fields
0800a1dc g     F .text	00000020 __sseek
08008968 g     F .text	0000000a __sinit
0800d8fc g     O .rodata	00000068 DMA1_CCR2_fields
0800a294 g     F .text	000000a8 __swbuf_r
08005be4  w    F .text	00000002 HardFault_Handler
0800c15c g     O .rodata	00000108 TSC_IOHCR_fields
080119a4 g     O .rodata	00000028 CRC_CR_fields
0800c13c g     O .rodata	00000010 NVIC_ISER0_fields
080096f0 g     F .text	00000002 __malloc_unlock
080147b8 g     O .rodata	00000010 TIM15_ARR_fields
080166a8 g     O .rodata	00000010 RTC_BKP24R_fields
20000000 g     O .data	00000004 ledDelay
08011efc g     O .rodata	00000010 TIM1_CCR3_fields
0801a768 g     O .rodata	00000010 TIM1_DMAR_fields
0800d5bc g     O .rodata	00000010 TIM15_CCR1_fields
08005be4  w    F .text	00000002 USB_HP_IRQHandler
08015a80 g     O .rodata	00000018 USART1_RTOR_fields
0800ffc8 g     O .rodata	00000078 RCC_AHBENR_fields
08013774 g     O .rodata	00000020 TIM2_CNT_fields
080146a0 g     O .rodata	00000090 I2C1_registers
08001428 g     F .text	00000004 SysTick_Handler
08010878 g     O .rodata	00000010 RTC_WPR_fields
08016738 g     O .rodata	00000010 RTC_SSR_fields
08002ce8 g     F .text	0000000a HAL_GPIO_WritePin
080121fc g     O .rodata	00000010 TSC_IOG2CR_fields
08004e2c g     F .text	00000026 USBD_CDC_ReceivePacket
08005be4  w    F .text	00000002 PVD_IRQHandler
0800c14c g     O .rodata	00000010 DMA1_CPAR7_fields
08005732 g     F .text	0000001c LSM303DLHC_AccRebootCmd
08013794 g     O .rodata	00000018 TIM6_CNT_fields
080145e8 g     O .rodata	00000080 TIM1_DIER_fields
08004f20 g     F .text	00000008 HAL_PCD_SOFCallback
08011384 g     O .rodata	00000010 NVIC_ICPR0_fields
08009624 g     F .text	000000c6 memmove
08005be4  w    F .text	00000002 TAMP_STAMP_IRQHandler
08005450 g     F .text	00000068 GYRO_IO_Init
08016510 g     O .rodata	00000028 NVIC_IPR2_fields
0801ae7c g       *ABS*	00000000 _sidata
080029d0 g     F .text	00000038 HAL_RCC_GetHCLKFreq
08005be4  w    F .text	00000002 PendSV_Handler
0801b924 g     O .parsetable	0000000c CmdButtonE
08014b3c g     O .rodata	00000010 NVIC_ICPR1_fields
08005be4  w    F .text	00000002 NMI_Handler
08002b10 g     F .text	00000018 HAL_NVIC_EnableIRQ
080096f4 g     F .text	0000004c _Balloc
0801ae70 g       .ARM	00000000 __exidx_end
08005ff4 g     F .text	00000064 __strtok_r
08005be4  w    F .text	00000002 EXTI3_IRQHandler
08002964 g     F .text	0000006c HAL_RCC_GetSysClockFreq
080053ac g     F .text	0000001c BSP_LED_Off
0801a410 g     O .rodata	00000010 DMA1_CNDTR5_fields
08010350 g     O .rodata	000000a0 TIM8_CCER_fields
08010bd8 g     O .rodata	00000108 CAN_F8R2_fields
08000aac g     F .text	0000008a .hidden __gtdf2
0801b99c g       .parsetable	00000000 _parsetable_end
080152f4 g     O .rodata	00000050 RCC_AHBRSTR_fields
08005be8 g     F .text	0000000c __errno
0800c084 g     O .rodata	00000010 RTC_BKP6R_fields
0800c6a8 g     O .rodata	00000030 CAN_TI2R_fields
08004860 g     F .text	00000218 USBD_StdDevReq
08003e78 g     F .text	00000090 HAL_I2C_Init
08014930 g     O .rodata	00000010 NVIC_ISER2_fields
0801b984 g     O .parsetable	0000000c CmdWE
08003f08  w    F .text	00000002 HAL_I2C_MspDeInit
0800f708 g     O .rodata	00000028 CAN_RDH0R_fields
08011ea4 g     O .rodata	00000028 FPU_FPDSCR_fields
08005078 g     F .text	0000000c USBD_VCP_DeviceDescriptor
08002cfc g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08002a08  w    F .text	00000002 HAL_MspInit
0800da94 g     O .rodata	00000108 CAN_F0R2_fields
0800b4a0 g     O .rodata	00000010 TSC_IOG8CR_fields
08005010 g     F .text	00000026 USBD_LL_IsStallEP
08015f40 g     O .rodata	00000108 CAN_F0R1_fields
08010ce0 g     O .rodata	00000028 TIM15_SMCR_fields
08004fc4 g     F .text	0000000e USBD_LL_Start
080055a8 g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800566c g     F .text	00000030 BSP_ACCELERO_Init
08004654 g     F .text	0000000a USBD_Start
08001932 g     F .text	0000000a _fstat_r
08014c8c g     O .rodata	00000050 TIM8_CR1_fields
08002cf2 g     F .text	00000008 HAL_GPIO_TogglePin
08012c24 g     O .rodata	00000010 Flash_AR_fields
0800ed4c g     O .rodata	00000108 CAN_F2R1_fields
08011b7c g     O .rodata	00000060 COMP_COMP4_CSR_fields
0800d218 g     O .rodata	00000048 GPIOB_AFRH_fields
0800a620 g       .text	00000000 _etext
08011b34 g     O .rodata	00000018 EXTI_PR2_fields
08012a5c g     O .rodata	00000030 USB_FS_FNR_fields
20000a9c g       .bss	00000000 _sbss
080118c4 g     O .rodata	00000060 COMP_registers
08014b4c g     O .rodata	00000108 CAN_F4R2_fields
08005074 g     F .text	00000002 USBD_static_free
080112e4 g     O .rodata	00000010 DMA1_CMAR1_fields
0800ead0 g     O .rodata	00000068 TIM2_DIER_fields
08000b48 g     F .text	00000010 .hidden __aeabi_cdcmple
0800f928 g     O .rodata	00000010 TSC_IOG1CR_fields
08016a20 g     O .rodata	00000028 TIM17_CCER_fields
08016818 g     O .rodata	00000010 TIM8_RCR_fields
0801304c g     O .rodata	00000018 TIM16_CNT_fields
0800e8c8 g     O .rodata	00000108 GPIOB_BSRR_fields
0800fde8 g     O .rodata	00000108 CAN_F16R2_fields
0800d88c g     O .rodata	00000020 ADC1_OFR1_fields
080154ec g     O .rodata	00000108 CAN_F24R2_fields
0800f09c g     O .rodata	00000010 RTC_BKP23R_fields
080126c4 g     O .rodata	00000010 TIM15_CCR2_fields
0800ca18 g     O .rodata	000000a0 ADC1_CFGR_fields
0800c4c4 g     O .rodata	00000010 RTC_BKP13R_fields
08004646 g     F .text	0000000e USBD_RegisterClass
08010050 g     O .rodata	00000108 CAN_F20R1_fields
0800fef0 g     O .rodata	00000068 USART1_ICR_fields
0801aa2c g     O .rodata	00000108 CAN_F25R2_fields
08016a48 g     O .rodata	00000010 TSC_IOG4CR_fields
08010158 g     O .rodata	00000108 CAN_F27R2_fields
0801a99c g     O .rodata	00000080 TIM8_SR_fields
0800b940 g     O .rodata	00000058 USB_FS_ISTR_fields
08014788 g     O .rodata	00000010 DMA1_CMAR2_fields
0800d438 g     O .rodata	00000010 RTC_BKP26R_fields
08011354 g     O .rodata	00000030 ADC1_SQR2_fields
08010888 g     O .rodata	00000018 TIM17_CNT_fields
0800d2e8 g     O .rodata	00000010 WWDG_SR_fields
0800ec58 g     O .rodata	0000009c EXTI_registers
08002b54 g     F .text	00000188 HAL_GPIO_Init
08004802 g     F .text	00000006 USBD_LL_SetSpeed
2000017c g     O .data	00000004 BUTTON_PORT
0800569c g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800f07c g     O .rodata	00000010 NVIC_ICTR_fields
0800c36c g     O .rodata	00000010 TIM6_ARR_fields
0800f740 g     O .rodata	000000b8 CAN_TSR_fields
080017f0 g     F .text	000000b4 DumpBuffer
08010b50 g     O .rodata	00000088 GPIOA_IDR_fields
0800b3c0 g     O .rodata	00000058 USB_FS_USB_EP3R_fields
08004f44 g     F .text	00000002 HAL_PCD_ResumeCallback
080001e4 g     F .text	00000134 memcpy
08000b38 g     F .text	00000020 .hidden __aeabi_cdrcmple
08015ab8 g     O .rodata	00000108 CAN_F7R2_fields
080156a4 g     O .rodata	00000018 TIM1_CNT_fields
080054b8 g     F .text	00000044 GYRO_IO_Write
08005d90 g     F .text	000000f8 setvbuf
080011a8 g     F .text	0000005c CmdLED
0800eeec g     O .rodata	00000080 TIM1_SR_fields
0800d964 g     O .rodata	00000028 NVIC_IPR13_fields
0800c584 g     O .rodata	00000010 TIM15_PSC_fields
0800142c g     F .text	000000ec configureUSART
08004aa8 g     F .text	000000b2 USBD_StdEPReq
0800886c g     F .text	0000000c _cleanup_r
08013430 g     O .rodata	00000048 GPIOA_AFRH_fields
080005bc g     F .text	00000022 .hidden __floatsidf
08014988 g     O .rodata	00000018 DAC_DHR12RD_fields
08014d2c g     O .rodata	00000060 COMP_COMP2_CSR_fields
080149a0 g     O .rodata	00000080 TIM8_DIER_fields
0801a750 g     O .rodata	00000018 ADC1_DIFSEL_fields
08000ab4 g     F .text	00000082 .hidden __ltdf2
080053c8 g     F .text	00000074 BSP_PB_Init
08005be4  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
080012ac g     F .text	00000030 EXTI0_IRQHandler
08016130 g     O .rodata	00000018 TIM8_OR_fields
08005be4  w    F .text	00000002 I2C2_EV_IRQHandler
0800c668 g     O .rodata	00000028 CAN_TDH0R_fields
0800ee64 g     O .rodata	00000058 USB_FS_USB_EP4R_fields
08000c0c g     F .text	00000000 .hidden __aeabi_uldivmod
08011b04 g     O .rodata	00000030 WWDG_registers
0800b720 g     O .rodata	00000010 TIM17_RCR_fields
08005d80 g     F .text	00000010 puts
08004bf4 g     F .text	00000016 USBD_CtlSendStatus
08005be4  w    F .text	00000002 FPU_IRQHandler
08002a70  w    F .text	0000001a HAL_Delay
08004a78 g     F .text	00000030 USBD_StdItfReq
0800ee54 g     O .rodata	00000010 TIM8_CCR4_fields
20000014 g     O .data	00000004 SystemCoreClock
0800a124 g     F .text	0000005c __fpclassifyd
080156bc g     O .rodata	000000e4 TIM15_registers
080033d2 g     F .text	00000182 HAL_PCD_EP_Transmit
08011d9c g     O .rodata	00000108 CAN_F3R1_fields
08004820 g     F .text	00000028 USBD_ParseSetupRequest
08012d94 g     O .rodata	00000018 TIM2_CCR1_fields
0800fc10 g     O .rodata	00000018 DAC_SWTRIGR_fields
08005be4  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800e768 g     O .rodata	00000108 CAN_F13R1_fields
0800905c g     F .text	00000010 malloc
080110bc g     O .rodata	00000010 IWDG_RLR_fields
08003bc6 g     F .text	00000022 PCD_ReadPMA
0800122c g     F .text	00000054 CmdGyro
080166f8 g     O .rodata	00000018 CAN_FMR_fields
0801ad68 g     O .rodata	000000c8 __mprec_tens
0801a7e0 g     O .rodata	0000003c OPAMP_registers
08014518 g     O .rodata	00000010 DMA1_CNDTR4_fields
08015ea0 g     O .rodata	00000010 NVIC_IABR1_fields
08015d78 g     O .rodata	00000030 ADC1_2_registers
20000128 g     O .data	0000001c VCP_Desc
08015828 g     O .rodata	000000d8 EXTI_PR1_fields
08005be4  w    F .text	00000002 UsageFault_Handler
08008f60 g     F .text	00000008 __locale_charset
08014048 g     O .rodata	00000028 TIM8_CCR5_fields
08005be4  w    F .text	00000002 ADC1_2_IRQHandler
20000ecc g     O .bss	00000004 __malloc_top_pad
20000f48 g     O .bss	00000050 input
08014d8c g     O .rodata	00000108 CAN_F4R1_fields
08012a44 g     O .rodata	00000018 ADC1_TR3_fields
0800ef6c g     O .rodata	00000010 DMA1_CPAR2_fields
0800d2f8 g     O .rodata	00000050 TIM16_DIER_fields
08002cdc g     F .text	0000000c HAL_GPIO_ReadPin
08011ad4 g     O .rodata	00000010 NVIC_ICER2_fields
08006180 g     F .text	00000018 strtoul
20001438 g     O .bss	00000004 BuffLength
20000684 g     O .data	00000004 __mb_cur_max
0800059c g     F .text	0000001e .hidden __aeabi_ui2d
08008f74 g     F .text	00000008 _localeconv_r
0800d2d8 g     O .rodata	00000010 TIM8_CCR1_fields
2000143c g     O .bss	0000006c UartHandle
080162f8 g     O .rodata	00000108 CAN_F9R2_fields
08013c94 g     O .rodata	00000010 DAC_DHR12L2_fields
08009874 g     F .text	00000012 __i2b
08008bf4 g     F .text	00000318 __sfvwrite_r
08004808 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08005be4  w    F .text	00000002 SPI1_IRQHandler
08011f0c g     O .rodata	00000030 CAN_TI0R_fields
08005be4  w    F .text	00000002 CAN_SCE_IRQHandler
08000318 g     F .text	00000000 .hidden __aeabi_drsub
08016468 g     O .rodata	00000050 ADC1_SMPR2_fields
08012f5c g     O .rodata	00000028 NVIC_IPR4_fields
080018f8 g     F .text	00000034 _sbrk_r
0800c49c g     O .rodata	00000028 NVIC_IPR18_fields
08004e54 g     F .text	0000009c HAL_PCD_MspInit
08013ec0 g     O .rodata	00000018 TIM6_DIER_fields
0801b978 g     O .parsetable	0000000c CmdUSARTE
0800d068 g     O .rodata	00000068 TIM1_CCMR1_Output_fields
0801a2e0 g     O .rodata	000000b8 USART1_ISR_fields
08005be4  w    F .text	00000002 TIM6_DAC_IRQHandler
0800de8c g     O .rodata	00000070 I2C1_CR2_fields
080121ec g     O .rodata	00000010 TIM8_CCR2_fields
080039fa g     F .text	000000a2 HAL_PCD_EP_SetStall
08001ae0 g     F .text	0000000a _read_r
0800b508 g     O .rodata	00000050 TIM1_SMCR_fields
08012404 g     O .rodata	00000038 CAN_ESR_fields
0800461c g     F .text	0000002a USBD_Init
08014eb4 g     O .rodata	00000088 GPIOB_BRR_fields
200011c0 g     O .bss	00000178 hpcd
08000b6c g     F .text	00000012 .hidden __aeabi_dcmplt
0800a440 g     F .text	00000084 _fclose_r
08012ed4 g     O .rodata	00000020 ADC1_OFR2_fields
0800c5e4 g     O .rodata	00000018 TIM2_ARR_fields
08005544 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000ec8 g     O .bss	00000004 __malloc_max_sbrked_mem
08016ac0 g     O .rodata	00000108 CAN_F9R1_fields
08012c34 g     O .rodata	00000040 RTC_DR_fields
0801560c g     O .rodata	00000010 TIM1_CCR1_fields
08002b28 g     F .text	0000002c HAL_SYSTICK_Config
080005e0 g     F .text	0000003a .hidden __extendsfdf2
08014400 g     O .rodata	00000010 Flash_OPTKEYR_fields
0800f508 g     O .rodata	00000020 ADC1_OFR4_fields
200011bc g     O .bss	00000004 USBDDataIn
080008dc g     F .text	000001d0 .hidden __aeabi_ddiv
08005be4  w    F .text	00000002 TIM8_UP_IRQHandler
20000144 g     O .data	0000001a USBD_StringSerial
0800fa50 g     O .rodata	00000108 CAN_F25R1_fields
08016858 g     O .rodata	00000020 SPI1_I2SPR_fields
08013f50 g     O .rodata	00000010 ADC1_JDR1_fields
08014b2c g     O .rodata	00000010 IWDG_KR_fields
08015df0 g     O .rodata	00000058 USB_FS_USB_EP0R_fields
08000324 g     F .text	00000276 .hidden __adddf3
080055f0 g     F .text	0000003c COMPASSACCELERO_IO_Write
0801220c g     O .rodata	00000108 CAN_F23R2_fields
08011f6c g     O .rodata	00000048 CRC_registers
0800e6c0 g     O .rodata	000000a8 USART1_CR1_fields
0800f0dc g     O .rodata	00000264 RTC_registers
0800f820 g     O .rodata	00000108 CAN_F5R2_fields
0800e4e4 g     O .rodata	00000030 TIM17_CR2_fields
0801ae68 g       .ARM	00000000 __exidx_start
0800dd9c g     O .rodata	00000020 TIM16_CCMR1_Input_fields
0800c988 g     O .rodata	00000010 Flash_KEYR_fields
08000688 g     F .text	00000254 .hidden __aeabi_dmul
080058f2 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
080128d4 g     O .rodata	00000068 TIM8_CCMR2_Output_fields
0800d1e8 g     O .rodata	00000030 PWR_CSR_fields
08015474 g     O .rodata	00000018 RTC_ALRMASSR_fields
200000a0 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
08015bc0 g     O .rodata	00000028 SYSCFG_EXTICR4_fields
0800e9e8 g     O .rodata	00000010 NVIC_IABR0_fields
0801ace0 g     O .rodata	00000004 _global_impure_ptr
0800eb98 g     O .rodata	00000048 FPU_MVFR0_fields
08014678 g     O .rodata	00000010 TIM16_RCR_fields
08009d38 g     F .text	000003ec _realloc_r
08005bf4 g     F .text	00000050 __libc_init_array
08004be2 g     F .text	00000012 USBD_CtlContinueRx
08015a98 g     O .rodata	00000010 RTC_BKP12R_fields
0800be6c g     O .rodata	00000018 USART1_GTPR_fields
08002de6 g     F .text	00000338 HAL_PCD_EP_Open
08005be4  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000f3c g     F .text	0000026a .hidden __udivdi3
08005be4  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800d0e0 g     O .rodata	00000018 TIM1_OR_fields
0800b418 g     O .rodata	00000088 GPIOB_PUPDR_fields
08003554 g     F .text	000004a6 HAL_PCD_IRQHandler
08001558 g     F .text	00000020 CmdR
0800a574 g     F .text	00000024 _fputwc_r
0801ae40 g     O .rodata	00000028 __mprec_bigtens
08016748 g     O .rodata	00000010 TIM1_CCR4_fields
0800059c g     F .text	0000001e .hidden __floatunsidf
080112ac g     O .rodata	00000028 CAN_TDL1R_fields
08009b08 g     F .text	00000046 __mcmp
08014d04 g     O .rodata	00000028 NVIC_IPR7_fields
08005a8e g     F .text	0000002e L3GD20_FilterCmd
080157e8 g     O .rodata	00000010 TIM17_DMAR_fields
08003f0a g     F .text	0000002e HAL_I2C_DeInit
08013ea8 g     O .rodata	00000018 TIM15_CNT_fields
080042a6 g     F .text	000000a6 HAL_SPI_Init
0800e054 g     O .rodata	00000010 RTC_BKP10R_fields
0800eb38 g     O .rodata	00000050 CAN_MSR_fields
08012aec g     O .rodata	000000a8 RCC_registers
0800a608 g     F .text	00000000 _init
0800f7f8 g     O .rodata	00000028 CAN_TDL0R_fields
08011ecc g     O .rodata	00000010 DAC_DHR8R2_fields
08013478 g     O .rodata	00000098 RCC_APB1RSTR_fields
080056f0 g     F .text	00000010 BSP_GYRO_GetXYZ
0800db9c g     O .rodata	00000010 RTC_BKP0R_fields
08013824 g     O .rodata	00000438 CAN_registers
0801b918 g       .parsetable	00000000 _parsetable_start
0800f678 g     O .rodata	00000068 DMA1_CCR5_fields
0800ed3c g     O .rodata	00000010 RTC_BKP8R_fields
0800e2bc g     O .rodata	000000d8 TSC_registers
08011bdc g     O .rodata	00000038 TIM2_CCMR2_Input_fields
08004ff4 g     F .text	0000000e USBD_LL_StallEP
0800ccb8 g     O .rodata	00000010 NVIC_ICER1_fields
080157f8 g     O .rodata	00000030 TIM16_EGR_fields
0801b960 g     O .parsetable	0000000c CmdRE
080042a4  w    F .text	00000002 HAL_SPI_MspInit
08013da0 g     O .rodata	00000108 CAN_F8R1_fields
08005be4  w    F .text	00000002 USART3_IRQHandler
0801117c g     O .rodata	00000108 CAN_F21R1_fields
0800e870 g     O .rodata	00000058 RCC_CSR_fields
080050b8 g     F .text	00000040 USBD_VCP_SerialStrDescriptor
080116ec g     O .rodata	00000088 GPIOA_OTYPER_fields
08016a78 g     O .rodata	00000018 DAC_DHR12LD_fields
0800d74c g     O .rodata	00000038 TIM16_SR_fields
08013510 g     O .rodata	00000144 TIM1_registers
0800897c g     F .text	0000002c __libc_fini_array
080160f0 g     O .rodata	00000040 ADC1_JSQR_fields
20001ce4 g       .bss	00000000 _ebss
0800562c g     F .text	00000040 COMPASSACCELERO_IO_Read
200001d0 g     O .data	0000002c L3gd20Drv
08011c3c g     O .rodata	00000058 FPU_CPACR_fields
08005be4  w    F .text	00000002 DMA1_Channel7_IRQHandler
08012114 g     O .rodata	00000028 CAN_TDL2R_fields
08004030 g     F .text	00000104 HAL_I2C_Mem_Read
0800cde8 g     O .rodata	00000048 GPIOA_AFRL_fields
08005b94  w    F .text	00000038 Reset_Handler
20000018 g     O .data	00000043 USBD_CDC_CfgFSDesc
0801a5a0 g     O .rodata	00000010 RTC_BKP29R_fields
080056ac g     F .text	00000044 BSP_GYRO_Init
0800cb70 g     O .rodata	00000028 NVIC_IPR0_fields
080113c4 g     O .rodata	00000088 GPIOA_ODR_fields
080097d8 g     F .text	00000040 __hi0bits
0800ef7c g     O .rodata	00000028 NVIC_IPR15_fields
0800d0d0 g     O .rodata	00000010 TIM1_CCR2_fields
0800e548 g     O .rodata	000000d8 EXTI_RTSR1_fields
0800f668 g     O .rodata	00000010 DAC_DOR2_fields
080112d4 g     O .rodata	00000010 CRC_DR_fields
08000bbc g     F .text	0000004e .hidden __fixdfsi
0800cbd0 g     O .rodata	00000088 GPIOB_OSPEEDR_fields
0801b954 g     O .parsetable	0000000c CmdLEDE
08005be4  w    F .text	00000002 UART5_IRQHandler
08001db0 g     F .text	0000003c DecodePeripheral
080157b0 g     O .rodata	00000028 SYSCFG_EXTICR1_fields
0800b838 g     O .rodata	00000108 CAN_F11R2_fields
08005be4  w    F .text	00000002 ADC3_IRQHandler
080110cc g     O .rodata	00000040 RTC_TSTR_fields
080123b4 g     O .rodata	00000050 TIM2_CR1_fields
08002a30 g     F .text	00000024 HAL_Init
08010d98 g     O .rodata	00000108 CAN_F1R2_fields
08009ce0 g     F .text	00000058 _putc_r
08004bc2 g     F .text	00000020 USBD_CtlPrepareRx
08010928 g     O .rodata	00000010 RTC_BKP17R_fields
08001518 g     F .text	00000024 CmdUSART
08013654 g     O .rodata	00000028 CAN_RDL1R_fields
0800e074 g     O .rodata	00000108 CAN_F23R1_fields
0800434e g     F .text	0000002e HAL_SPI_DeInit
08005be4  w    F .text	00000002 TIM4_IRQHandler
0800f550 g     O .rodata	00000108 CAN_F18R1_fields
08016758 g     O .rodata	000000a8 USB_FS_registers
08000324 g     F .text	00000276 .hidden __aeabi_dadd
08016a10 g     O .rodata	00000010 TIM8_CCR3_fields
08000ab4 g     F .text	00000082 .hidden __ledf2
08014410 g     O .rodata	00000108 CAN_F13R2_fields
0800a7f2 g     O .rodata	00000008 LEDs
08012b94 g     O .rodata	00000038 TIM2_CCMR1_Input_fields
0801aa1c g     O .rodata	00000010 DAC_DHR12R1_fields
08016cd8 g     O .rodata	00000030 I2C1_OAR1_fields
0800506c g     F .text	00000008 USBD_static_malloc
0800ccd8 g     O .rodata	00000028 CAN_RF0R_fields
08005be4  w    F .text	00000002 CAN_RX1_IRQHandler
08005be4  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800ccc8 g     O .rodata	00000010 RTC_BKP7R_fields
080099bc g     F .text	000000a0 __pow5mult
08011774 g     O .rodata	00000018 ADC1_TR1_fields
08016698 g     O .rodata	00000010 DMA1_CNDTR7_fields
0800061c g     F .text	0000006a .hidden __aeabi_ul2d
08004dfe g     F .text	0000002e USBD_CDC_TransmitPacket
20000180 g     O .data	00000004 I2cxTimeout
0800f658 g     O .rodata	00000010 TSC_IOG5CR_fields
0800ffb8 g     O .rodata	00000010 DAC_DHR12R2_fields
08011eec g     O .rodata	00000010 RTC_BKP18R_fields
0800e064 g     O .rodata	00000010 DMA1_CMAR6_fields
0800ff80 g     O .rodata	00000038 TIM15_CCMR1_Input_fields
08001280 g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
08002cfa  w    F .text	00000002 HAL_GPIO_EXTI_Callback
08004c0a g     F .text	00000016 USBD_CtlReceiveStatus
0800f468 g     O .rodata	00000018 TIM2_CCR4_fields
20001ce4 g       ._user_heap_stack	00000000 end
20000160 g     O .data	00000008 LineCoding
0800ebe0 g     O .rodata	00000078 SPI1_CR1_fields
08005be4  w    F .text	00000002 I2C1_EV_IRQHandler
080137ac g     O .rodata	00000078 SPI1_registers
08004fd2 g     F .text	00000014 USBD_LL_OpenEP
08012ef4 g     O .rodata	00000018 TIM8_DCR_fields
08001e30 g     F .text	00000048 DecodePrintRegisters
080115f4 g     O .rodata	00000070 USB_FS_USB_CNTR_fields
0800fb80 g     O .rodata	00000090 USART1_registers
08005a24 g     F .text	0000003c L3GD20_DisableIT
0800d0f8 g     O .rodata	00000010 USART1_TDR_fields
08013388 g     O .rodata	00000080 RCC_APB1ENR_fields
0800434c  w    F .text	00000002 HAL_SPI_MspDeInit
08016d08 g     O .rodata	00000010 DMA1_CNDTR2_fields
08014a20 g     O .rodata	00000078 CAN_IER_fields
08015eb0 g     O .rodata	00000068 DMA1_CCR1_fields
080162e8 g     O .rodata	00000010 NVIC_ICER0_fields
08011154 g     O .rodata	00000010 NVIC_ISER1_fields
0800473c g     F .text	00000088 USBD_LL_DataInStage
0801a590 g     O .rodata	00000010 RTC_BKP31R_fields
080115a4 g     O .rodata	00000050 TIM1_EGR_fields
0801563c g     O .rodata	00000068 TIM2_CCMR1_Output_fields
080147c8 g     O .rodata	00000018 DAC_SR_fields
08012794 g     O .rodata	00000018 TIM2_CCR2_fields
08004f48 g     F .text	0000007c USBD_LL_Init
08014c7c g     O .rodata	00000010 RTC_BKP3R_fields
08005390 g     F .text	0000001c BSP_LED_On
0800590e g     F .text	00000032 L3GD20_Init
08000ba8 g     F .text	00000012 .hidden __aeabi_dcmpgt
08005be4  w    F .text	00000002 DMA1_Channel6_IRQHandler
08004848 g     F .text	00000016 USBD_CtlError
2000005c g     O .data	00000038 USBD_CDC
08004674 g     F .text	0000000e USBD_ClrClassConfig
0801a398 g     O .rodata	00000010 RTC_BKP5R_fields
08005be4  w    F .text	00000002 UART4_IRQHandler
08005be4  w    F .text	00000002 DMA2_Channel4_IRQHandler
08004dd4 g     F .text	0000000e USBD_CDC_RegisterInterface
08008974 g     F .text	00000002 __sfp_lock_acquire
08009590 g     F .text	00000092 memchr
08008a44 g     F .text	000001b0 _free_r
08005be4  w    F .text	00000002 TIM3_IRQHandler
08005be4  w    F .text	00000002 RCC_IRQHandler
0800bd34 g     O .rodata	00000028 RTC_CALR_fields
08008f68 g     F .text	0000000c __locale_mb_cur_max
08000b94 g     F .text	00000012 .hidden __aeabi_dcmpge
0800eb88 g     O .rodata	00000010 DAC_DHR12L1_fields
0800be34 g     O .rodata	00000038 TIM17_SR_fields
080114d4 g     O .rodata	00000088 GPIOB_OTYPER_fields
08005be4  w    F .text	00000002 DMA1_Channel1_IRQHandler
08015988 g     O .rodata	00000010 RTC_BKP9R_fields
08016878 g     O .rodata	00000108 CAN_F14R2_fields
08000320 g     F .text	0000027a .hidden __aeabi_dsub
08004efe g     F .text	00000012 HAL_PCD_DataOutStageCallback
08005be4 g       .text	00000002 Default_Handler
20000a94 g     O .data	00000004 __malloc_sbrk_base
08005114 g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
08012e34 g     O .rodata	00000090 GPIOA_LCKR_fields
0800fd40 g     O .rodata	00000098 RTC_TAFCR_fields
20000168 g     O .data	00000010 USBD_CDC_fops
08016980 g     O .rodata	00000090 GPIOA_registers
0800f448 g     O .rodata	00000010 NVIC_ISPR2_fields
08005be4  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08013ee8 g     O .rodata	00000068 TIM2_CCMR2_Output_fields
0800cfc8 g     O .rodata	00000090 GPIOB_LCKR_fields
0800c998 g     O .rodata	00000080 TIM8_CR2_fields
080033c2 g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800c4d4 g     O .rodata	00000038 CAN_BTR_fields
0800061c g     F .text	0000006a .hidden __floatundidf
0801a3a8 g     O .rodata	00000068 DMA1_CCR4_fields
0800d594 g     O .rodata	00000028 NVIC_IPR10_fields
0800fdd8 g     O .rodata	00000010 TIM17_ARR_fields
0800fc28 g     O .rodata	00000108 CAN_F12R2_fields
08009a5c g     F .text	000000aa __lshift
080141c8 g     O .rodata	00000030 USART1_RQR_fields
08012a9c g     O .rodata	00000050 TIM17_DIER_fields
0800b6a8 g     O .rodata	00000010 RTC_BKP22R_fields
080141f8 g     O .rodata	00000028 CAN_TDH2R_fields
0801193c g     O .rodata	00000010 TIM1_RCR_fields
08005002 g     F .text	0000000e USBD_LL_ClearStallEP
0801a974 g     O .rodata	00000028 NVIC_IPR5_fields
0800d448 g     O .rodata	00000060 Flash_OBR_fields
08005be4  w    F .text	00000002 EXTI15_10_IRQHandler
0800de0c g     O .rodata	00000020 CAN_TDT1R_fields
08005abc g     F .text	000000d8 L3GD20_ReadXYZAngRate
080124fc g     O .rodata	00000040 RTC_TR_fields
08013024 g     O .rodata	00000028 NVIC_IPR17_fields
0800a33c g     F .text	000000a4 __register_exitproc
0800d3d8 g     O .rodata	00000060 Flash_CR_fields
0800f00c g     O .rodata	00000060 SPI1_SR_fields
0800ecf4 g     O .rodata	00000048 USB_FS_DADDR_fields
0800f6f0 g     O .rodata	00000018 EXTI_SWIER2_fields
08002dba g     F .text	0000002c HAL_PCD_SetAddress
0801132c g     O .rodata	00000028 NVIC_IPR19_fields
08010260 g     O .rodata	00000010 TIM6_SR_fields
0800be94 g     O .rodata	00000108 CAN_F1R1_fields
08014390 g     O .rodata	00000060 DES_registers
08014ea4 g     O .rodata	00000010 TIM17_PSC_fields
0800bdb4 g     O .rodata	00000028 SYSCFG_EXTICR2_fields
08009888 g     F .text	00000134 __multiply
08010770 g     O .rodata	00000010 SPI1_CRCPR_fields
0800574e g     F .text	0000001e LSM303DLHC_AccFilterConfig
08002698 g     F .text	000002cc HAL_RCC_ClockConfig
08002a8c g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
2000000c g     O .data	00000004 Commands
08016400 g     O .rodata	00000018 ADC1_TR2_fields
20000ed0 g     O .bss	00000028 __malloc_current_mallinfo
08005870 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
08011f5c g     O .rodata	00000010 RTC_TSSSR_fields
0800167c g     F .text	0000012c TaskInput
0800fa40 g     O .rodata	00000010 TIM6_CR2_fields
08014590 g     O .rodata	00000058 RCC_CR_fields
0801178c g     O .rodata	000000e8 CAN_FM1R_fields
08012314 g     O .rodata	00000010 TIM1_CCR6_fields
08009c24 g     F .text	000000ba __d2b
08012f84 g     O .rodata	000000a0 USART1_CR2_fields
080140b8 g     O .rodata	00000068 TIM1_BDTR_fields
08005e88 g     F .text	00000044 strcasecmp
0800bbe4 g     O .rodata	00000010 IWDG_WINR_fields
08011874 g     O .rodata	00000050 ADC1_SMPR1_fields
080054fc g     F .text	00000048 GYRO_IO_Read
0800f0ac g     O .rodata	00000020 I2C1_OAR2_fields
08016148 g     O .rodata	00000108 CAN_F26R1_fields
08006058 g     F .text	00000128 _strtoul_r
0801293c g     O .rodata	00000010 CRC_POL_fields
0801a5b0 g     O .rodata	00000010 DMA1_CMAR4_fields
08005be4  w    F .text	00000002 TIM7_IRQHandler
08005988 g     F .text	0000005c L3GD20_INT1InterruptConfig
08004f42 g     F .text	00000002 HAL_PCD_SuspendCallback
08014230 g     O .rodata	00000010 DMA1_CPAR3_fields
08010040 g     O .rodata	00000010 RTC_BKP14R_fields
08004c80 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
0800192c g     F .text	00000006 _close_r
0800b2f8 g     O .rodata	00000010 SPI1_DR_fields
0800c958 g     O .rodata	00000020 RCC_CFGR2_fields
080005bc g     F .text	00000022 .hidden __aeabi_i2d
0800c484 g     O .rodata	00000018 TIM15_DCR_fields
0800c594 g     O .rodata	00000020 Flash_ACR_fields
0801a6c8 g     O .rodata	00000010 CRC_IDR_fields
200001a4 g     O .data	0000002c Lsm303dlhcDrv
0800f458 g     O .rodata	00000010 DMA1_CPAR5_fields
08015c70 g     O .rodata	00000108 CAN_F18R2_fields
08014070 g     O .rodata	00000048 IWDG_registers
08005fe4 g     F .text	00000010 strtok
0801b948 g     O .parsetable	0000000c CmdGyroE
0800cf78 g     O .rodata	00000010 IWDG_PR_fields
0801269c g     O .rodata	00000028 NVIC_IPR11_fields
0801194c g     O .rodata	00000058 COMP_COMP7_CSR_fields
0800bcfc g     O .rodata	00000028 CAN_RF1R_fields
08001a18 g     F .text	0000007c TerminalInit
08007634 g     F .text	000000c4 __swsetup_r
0800e538 g     O .rodata	00000010 TIM8_ARR_fields
08000c9c  w    F .text	00000002 .hidden __aeabi_ldiv0
08005be4  w    F .text	00000002 EXTI9_5_IRQHandler
08004616 g     F .text	00000006 HAL_SPI_GetState
080008dc g     F .text	000001d0 .hidden __divdf3
0800e1a4 g     O .rodata	00000010 ADC1_DR_fields
08005be4  w    F .text	00000002 RTC_WKUP_IRQHandler
0801a578 g     O .rodata	00000018 USART1_BRR_fields
08015e48 g     O .rodata	00000058 TIM15_CCMR1_Output_fields
20000688 g     O .data	00000408 __malloc_av_
08012cf4 g     O .rodata	00000090 SYSCFG_CFGR1_fields
08001aea g     F .text	00000010 TerminalReadNonBlock
08000688 g     F .text	00000254 .hidden __muldf3
08016aa0 g     O .rodata	00000020 CAN_TDT0R_fields
080018a4 g     F .text	00000054 CmdDump
0800a180 g     F .text	00000022 __sread
08011394 g     O .rodata	00000030 TIM16_CCMR1_Output_fields
08014798 g     O .rodata	00000020 WWDG_CFR_fields
08015054 g     O .rodata	000002a0 Peripherals
08015900 g     O .rodata	00000088 GPIOB_ODR_fields
08002a64  w    F .text	0000000c HAL_GetTick
0801295c g     O .rodata	00000058 USB_FS_USB_EP5R_fields
0800f938 g     O .rodata	00000108 CAN_F11R1_fields
080096ec g     F .text	00000002 __malloc_lock
08014220 g     O .rodata	00000010 NVIC_ISPR0_fields
0800cc58 g     O .rodata	00000060 ADC1_ISR_fields
0800d260 g     O .rodata	00000050 FPU_FPCCR_fields
08016800 g     O .rodata	00000018 TSC_ICR_fields
0800578a g     F .text	000000e6 LSM303DLHC_AccReadXYZ
0800d8ec g     O .rodata	00000010 NVIC_IABR2_fields
08008840 g     F .text	0000002c _fflush_r
08001afa g     F .text	00000012 TerminalReadAnyNonBlock
080050f8 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
0800a3e0 g     F .text	0000005e _calloc_r
08016e20 g     O .rodata	00000088 GPIOA_PUPDR_fields
08005be4  w    F .text	00000002 SPI2_IRQHandler
08014cdc g     O .rodata	00000010 RTC_BKP21R_fields
0801abb5 g     O .rodata	00000012 hUSBDDeviceDesc
0800b678 g     O .rodata	00000030 RTC_TSDR_fields
08001c9c g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
08014848 g     O .rodata	00000050 RCC_CFGR3_fields
08005c44 g     F .text	0000009a memset
08005be4  w    F .text	00000002 MemManage_Handler
080012e8 g     F .text	00000140 main
08014240 g     O .rodata	00000108 TSC_IOSCR_fields
0800b184 g     O .rodata	00000174 DMA1_registers
0800543c g     F .text	00000014 BSP_PB_GetState
080126e4 g     O .rodata	00000028 SYSCFG_EXTICR3_fields
20000ec4 g     O .bss	00000004 __malloc_max_total_mem
0800f06c g     O .rodata	00000010 ADC1_JDR3_fields
0801268c g     O .rodata	00000010 SPI1_TXCRCR_fields
0800437c g     F .text	0000029a HAL_SPI_TransmitReceive
20000178 g     O .data	00000004 SpixTimeout
0801b918 g       *ABS*	00000000 _siccmram
0801a788 g     O .rodata	00000058 COMP_COMP3_CSR_fields
08010328 g     O .rodata	00000028 NVIC_IPR9_fields
080105b4 g     O .rodata	0000003c DBGMCU_registers
08014c54 g     O .rodata	00000028 NVIC_IPR16_fields
0800f340 g     O .rodata	00000108 CAN_F2R2_fields
08005be4  w    F .text	00000002 SVC_Handler
0800a1fc g     F .text	00000008 __sclose
08005be4  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800dcb4 g     O .rodata	000000e8 DMA1_IFCR_fields
0800cae8 g     O .rodata	00000088 TSC_IOGCSR_fields
08001c2c g     F .text	00000070 TerminalInputBufferWrite
08016a58 g     O .rodata	00000010 DMA1_CPAR1_fields
0800e9d0 g     O .rodata	00000018 DES_UID0_fields
08007848 g     F .text	00000ea2 _dtoa_r
0800906c g     F .text	00000524 _malloc_r
080124b4 g     O .rodata	00000048 GPIOB_AFRL_fields
0800a5ec g     F .text	0000001a __ascii_wctomb
0800c6d8 g     O .rodata	00000060 ADC1_IER_fields
0800062c g     F .text	0000005a .hidden __aeabi_l2d
0800d058 g     O .rodata	00000010 DAC_DHR8R1_fields
08013c5c g     O .rodata	00000038 TIM1_CCMR1_Input_fields
0800c850 g     O .rodata	00000108 TSC_IOASCR_fields
0800e17c g     O .rodata	00000028 NVIC_IPR20_fields
080047c4 g     F .text	0000003e USBD_LL_Reset
0801367c g     O .rodata	00000020 CAN_RDT1R_fields
080108a0 g     O .rodata	00000088 GPIOA_BRR_fields
08014f4c g     O .rodata	00000108 CAN_F20R2_fields
08011924 g     O .rodata	00000018 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
08005060 g     F .text	0000000c USBD_LL_GetRxDataSize
08005be4  w    F .text	00000002 DMA1_Channel5_IRQHandler
08005700 g     F .text	00000020 LSM303DLHC_AccInit
08005be4  w    F .text	00000002 USB_LP_IRQHandler
200014a8 g     O .bss	00000800 UserRxBuffer
08012644 g     O .rodata	00000048 SPI1_I2SCFGR_fields
0801ab64 g     O .rodata	00000004 USBD_LangIDDesc
0800ce70 g     O .rodata	00000108 CAN_F15R2_fields
08005be4  w    F .text	00000002 EXTI4_IRQHandler
08014730 g     O .rodata	00000058 USB_FS_USB_EP2R_fields
20000184 g     O .data	00000020 LED_PORT
0800ba98 g     O .rodata	00000010 TIM8_CCR6_fields
080058ac g     F .text	00000046 LSM303DLHC_AccClickITEnable
080046dc g     F .text	00000060 USBD_LL_DataOutStage
0800fd30 g     O .rodata	00000010 RTC_BKP4R_fields
080089a8 g     F .text	0000009c _malloc_trim_r
080157a0 g     O .rodata	00000010 TSC_IOG7CR_fields
0800bd24 g     O .rodata	00000010 RTC_BKP16R_fields
0801155c g     O .rodata	00000030 DBGMCU_CR_fields
08011f3c g     O .rodata	00000020 CAN_RDT0R_fields
0800d4a8 g     O .rodata	00000010 ADC1_AWD2CR_fields
08016250 g     O .rodata	00000010 DMA1_CMAR5_fields
0800fb58 g     O .rodata	00000028 CAN_RDL0R_fields
08016f10 g     O .rodata	00000010 DMA1_CPAR4_fields
08014a98 g     O .rodata	0000006c TIM6_registers
08001204 g     F .text	00000028 CmdAccel
08011c2c g     O .rodata	00000010 RTC_BKP11R_fields
08004134 g     F .text	00000006 HAL_I2C_GetState
0800205c g     F .text	00000068 SystemInit
08012f0c g     O .rodata	00000050 TIM16_BDTR_fields
08000abc g     F .text	0000007a .hidden __nedf2
08011674 g     O .rodata	00000078 RTC_ALRMBR_fields
080120fc g     O .rodata	00000018 TIM2_DCR_fields
08016eb8 g     O .rodata	00000058 ADC1_CR_fields
0800a614 g     F .text	00000000 _fini
0800153c g     F .text	0000001c CmdW
08002dae g     F .text	0000000c HAL_PCD_Start
08005be4  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
080105f0 g     O .rodata	00000028 EXTI_EMR2_fields
08005720 g     F .text	00000012 LSM303DLHC_AccReadID
0800cbc0 g     O .rodata	00000010 RTC_WUTR_fields
080126d4 g     O .rodata	00000010 DMA1_CPAR6_fields
080160e0 g     O .rodata	00000010 CRC_INIT_fields
0800b9f8 g     O .rodata	00000090 RTC_ISR_fields
0800c690 g     O .rodata	00000018 TIM1_DCR_fields
0800c0fc g     O .rodata	00000040 PWR_CR_fields
0800e9f8 g     O .rodata	00000038 TIM2_EGR_fields
0800770c g     F .text	0000000c atexit
08016260 g     O .rodata	00000088 OPAMP_OPAMP1_CR_fields
0800d4b8 g     O .rodata	00000054 FPU_registers
0800c748 g     O .rodata	00000108 EXTI_IMR1_fields
08001bf4 g     F .text	00000038 _write_r
0800d170 g     O .rodata	00000018 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
080166b8 g     O .rodata	00000030 ADC1_SQR3_fields
08005be4  w    F .text	00000002 DMA1_Channel3_IRQHandler
08016c50 g     O .rodata	00000088 DBGMCU_APB1FZ_fields
0801234c g     O .rodata	00000068 SPI1_CR2_fields
08016720 g     O .rodata	00000018 ADC1_CALFACT_fields
08014e94 g     O .rodata	00000010 RTC_BKP28R_fields
08002a0a  w    F .text	00000024 HAL_InitTick
0800d348 g     O .rodata	00000028 TIM1_CCR5_fields
08005036 g     F .text	0000000e USBD_LL_SetUSBAddress
08015f18 g     O .rodata	00000028 NVIC_IPR12_fields
0801abc8 g     O .rodata	00000010 LED_PIN
20000628 g     O .data	00000004 _impure_ptr
08011b4c g     O .rodata	00000020 CAN_TDT2R_fields
080143f0 g     O .rodata	00000010 ADC1_JDR4_fields
08014348 g     O .rodata	00000048 TIM15_CR2_fields
080086ec g     F .text	00000154 __sflush_r
0800c094 g     O .rodata	00000068 RCC_CFGR_fields
08002a54  w    F .text	00000010 HAL_IncTick
0800cab8 g     O .rodata	00000030 TIM17_EGR_fields
08004fe6 g     F .text	0000000e USBD_LL_CloseEP
08005be4  w    F .text	00000002 ADC4_IRQHandler
08014120 g     O .rodata	000000a8 RTC_CR_fields
08004bb0 g     F .text	00000012 USBD_CtlContinueSendData
08015998 g     O .rodata	000000e8 DMA1_ISR_fields
0800d784 g     O .rodata	00000108 CAN_F6R1_fields
08005940 g     F .text	0000001c L3GD20_ReadID
08005be4  w    F .text	00000002 WWDG_IRQHandler
08003e76  w    F .text	00000002 HAL_I2C_MspInit
0800b730 g     O .rodata	00000108 EXTI_EMR1_fields
0800ff58 g     O .rodata	00000028 NVIC_IPR6_fields
08016f20 g     O .rodata	00000018 TIM2_CCR3_fields
080147e0 g     O .rodata	00000068 DMA1_CCR6_fields
0801144c g     O .rodata	00000088 GPIOA_MODER_fields
080148a8 g     O .rodata	00000088 OPAMP_OPAMP2_CR_fields
08012c74 g     O .rodata	00000080 TIM1_CR2_fields
0800eed4 g     O .rodata	00000018 RTC_PRER_fields
08005044 g     F .text	0000000e USBD_LL_Transmit
08005be4  w    F .text	00000002 TIM2_IRQHandler
080160a0 g     O .rodata	00000028 TIM16_CCER_fields
08002d14 g     F .text	0000009a HAL_PCD_Init
200000e4 g     O .data	00000043 USBD_CDC_CfgHSDesc
08011164 g     O .rodata	00000018 DES_UID1_fields
0801b93c g     O .parsetable	0000000c CmdDecodeE
0800df4c g     O .rodata	00000108 CAN_F26R2_fields
080127ac g     O .rodata	00000108 CAN_F6R2_fields
0800e1b4 g     O .rodata	00000108 CAN_F16R1_fields
0800ba88 g     O .rodata	00000010 RTC_BKP27R_fields
08011c14 g     O .rodata	00000018 EXTI_RTSR2_fields
08016828 g     O .rodata	00000030 TIM16_CR2_fields
0800d5cc g     O .rodata	00000078 RTC_ALRMAR_fields
08014b1c g     O .rodata	00000010 TIM1_ARR_fields
08004b5a g     F .text	0000003a USBD_GetString
0800d98c g     O .rodata	00000108 CAN_F22R2_fields
0800b570 g     O .rodata	00000108 CAN_F24R1_fields
08004ef0 g     F .text	0000000e HAL_PCD_SetupStageCallback
0801a5c0 g     O .rodata	00000108 CAN_F5R1_fields
08005be4  w    F .text	00000002 COMP7_IRQHandler
20007fff g       *ABS*	00000000 _estack
08001578 g     F .text	00000104 parse
08013378 g     O .rodata	00000010 RTC_BKP2R_fields
08005be4  w    F .text	00000002 COMP1_2_3_IRQHandler
0801253c g     O .rodata	00000108 CAN_F17R1_fields
08005be4  w    F .text	00000002 EXTI1_IRQHandler
0800d370 g     O .rodata	00000068 TIM8_BDTR_fields
08000b58 g     F .text	00000012 .hidden __aeabi_dcmpeq
08012bcc g     O .rodata	00000058 USB_FS_USB_EP1R_fields
0800b308 g     O .rodata	000000b8 ADC1_2_CSR_fields
08012a8c g     O .rodata	00000010 FPU_FPCAR_fields
20000a9c g       .data	00000000 _edata
08010ea0 g     O .rodata	00000144 TIM8_registers
0800f08c g     O .rodata	00000010 RTC_BKP30R_fields
080128b4 g     O .rodata	00000020 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
08011fb4 g     O .rodata	00000040 TIM16_CR1_fields
0801a81c g     O .rodata	00000108 CAN_F17R2_fields
0800d8ac g     O .rodata	00000040 TIM15_CR1_fields
0800a4c4 g     F .text	000000b0 __fputwc
08001e78 g     F .text	000001e4 CmdDecode
08011b6c g     O .rodata	00000010 TIM15_RCR_fields
0800f480 g     O .rodata	00000088 GPIOB_IDR_fields
0800b4b0 g     O .rodata	00000058 TIM1_CCMR3_Output_fields
08011664 g     O .rodata	00000010 TIM8_DMAR_fields
0800c5fc g     O .rodata	0000006c Flash_registers
08010780 g     O .rodata	00000018 TIM16_DCR_fields
0801a530 g     O .rodata	00000048 RCC_APB2RSTR_fields
080017a8 g     F .text	00000028 fetch_uint32_arg
08014b04 g     O .rodata	00000018 RTC_ALRMBSSR_fields
08014940 g     O .rodata	00000048 SYSCFG_RCR_fields
08005be4  w    F .text	00000002 USART2_IRQHandler
08016428 g     O .rodata	00000040 TIM17_CR1_fields
0801308c g     O .rodata	000001d4 NVIC_registers
08005be4  w    F .text	00000002 COMP4_5_6_IRQHandler
0800a1a4 g     F .text	00000038 __swrite
080020c4 g     F .text	000005d4 HAL_RCC_OscConfig
20000a90 g     O .data	00000004 __malloc_trim_threshold
08011ae4 g     O .rodata	00000010 TIM17_CCR1_fields
0800e690 g     O .rodata	00000030 I2C1_TIMINGR_fields
08014f3c g     O .rodata	00000010 USB_FS_BTABLE_fields
08010300 g     O .rodata	00000028 CAN_TDH1R_fields
0801213c g     O .rodata	000000b0 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
08004b94 g     F .text	0000001c USBD_CtlSendData
0801536c g     O .rodata	00000108 CAN_F15R1_fields
08014688 g     O .rodata	00000018 ADC1_2_CDR_fields
08008f0c g     F .text	00000052 _fwalk_reent
08009b50 g     F .text	000000d2 __mdiff
0800f730 g     O .rodata	00000010 TIM6_PSC_fields
08000bbc g     F .text	0000004e .hidden __aeabi_d2iz
08013ed8 g     O .rodata	00000010 RTC_BKP15R_fields
0800e514 g     O .rodata	00000024 PWR_registers
08015344 g     O .rodata	00000028 Flash_SR_fields
08016a90 g     O .rodata	00000010 ADC1_JDR2_fields
0801129c g     O .rodata	00000010 RTC_BKP20R_fields
200001fc g     O .data	00000004 __ctype_ptr__
0800f6e0 g     O .rodata	00000010 DMA1_CNDTR6_fields
0800bbf4 g     O .rodata	00000108 CAN_F19R2_fields
08005be4  w    F .text	00000002 I2C2_ER_IRQHandler
08010798 g     O .rodata	00000048 ADC1_2_CCR_fields
08005be4  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800bb30 g     O .rodata	000000b4 DAC_registers
08016bc8 g     O .rodata	00000088 GPIOA_OSPEEDR_fields
0801a4f8 g     O .rodata	00000038 TIM8_CCMR2_Input_fields
08008978 g     F .text	00000002 __sfp_lock_release
0800baa8 g     O .rodata	00000050 TIM17_BDTR_fields
08013064 g     O .rodata	00000028 CAN_RDH1R_fields
0801243c g     O .rodata	00000068 TIM2_CCER_fields
080160c8 g     O .rodata	00000018 DAC_DHR8RD_fields
080017d0 g     F .text	00000020 fetch_string_arg
08005328 g     F .text	00000068 BSP_LED_Init
08010a40 g     O .rodata	00000088 GPIOB_MODER_fields
0801b930 g     O .parsetable	0000000c CmdDumpE
0801ab54 g     O .rodata	00000010 PLLMULFactorTable
0800ea30 g     O .rodata	000000a0 USART1_CR3_fields
08001d24 g     F .text	00000040 DecodeField
08015c18 g     O .rodata	00000028 CAN_RI0R_fields
08005be4  w    F .text	00000002 TIM8_BRK_IRQHandler
0800d2b0 g     O .rodata	00000028 DBGMCU_APB2FZ_fields
0800c978 g     O .rodata	00000010 TIM1_PSC_fields
08001dec g     F .text	00000044 DecodePrintPeripherals
080107e0 g     O .rodata	00000040 TIM15_CCER_fields
0801abd8 g     O .rodata	00000101 _ctype_
08012d84 g     O .rodata	00000010 DMA1_CMAR7_fields
08000c9c  w    F .text	00000002 .hidden __aeabi_idiv0
0800f528 g     O .rodata	00000028 CAN_RI1R_fields
08016538 g     O .rodata	00000030 SYSCFG_CFGR2_fields
08010270 g     O .rodata	00000090 RCC_CIR_fields
0801b96c g     O .parsetable	0000000c CmdStatsE
08005be4  w    F .text	00000002 FLASH_IRQHandler
080105a4 g     O .rodata	00000010 TIM15_DMAR_fields
08016568 g     O .rodata	00000018 EXTI_FTSR2_fields
08010668 g     O .rodata	00000108 CAN_F10R2_fields
0800e668 g     O .rodata	00000028 NVIC_IPR3_fields
08016710 g     O .rodata	00000010 DMA1_CNDTR1_fields
0800cf98 g     O .rodata	00000030 I2C1_TIMEOUTR_fields
0800c50c g     O .rodata	00000050 TIM15_BDTR_fields
08005084 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001338 g     O .bss	00000100 USBD_StrDesc
08001b0c g     F .text	000000e8 TerminalOutputBufferWrite
08005be4  w    F .text	00000002 BusFault_Handler
08005be4  w    F .text	00000002 USART1_IRQHandler
08010820 g     O .rodata	00000058 COMP_COMP1_CSR_fields
0801a924 g     O .rodata	00000050 TIM8_EGR_fields
08008f7c g     F .text	000000e0 __smakebuf_r
0801110c g     O .rodata	00000048 TIM15_SR_fields
08005f88 g     F .text	0000005c strlen
0800e620 g     O .rodata	00000048 RCC_APB2ENR_fields
08005be4  w    F .text	00000002 SPI3_IRQHandler
08000b48 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000aac g     F .text	0000008a .hidden __gedf2
20001ca8 g     O .bss	0000003c TimHandle
080129b4 g     O .rodata	00000068 DMA1_CCR3_fields
0800defc g     O .rodata	00000050 TIM1_CR1_fields
0801561c g     O .rodata	00000020 IWDG_SR_fields
080164b8 g     O .rodata	00000058 USB_FS_USB_EP6R_fields
0801369c g     O .rodata	000000d8 TIM16_registers
08003be8  w    F .text	00000002 HAL_PCDEx_SetConnectionState
080104d8 g     O .rodata	000000cc TIM17_registers
08003f38 g     F .text	000000f8 HAL_I2C_Mem_Write
0800b0e4 g     O .rodata	000000a0 TIM1_CCER_fields
20000a98 g     O .data	00000004 __wctomb
08011c94 g     O .rodata	00000108 CAN_F3R2_fields
08000c3c g     F .text	0000002e .hidden __gnu_ldivmod_helper
0800d50c g     O .rodata	00000088 DAC_CR_fields
08005be4  w    F .text	00000002 I2C1_ER_IRQHandler
0800a27c g     F .text	00000018 __sprint_r
0800d118 g     O .rodata	00000058 USB_FS_USB_EP7R_fields
08010d08 g     O .rodata	00000090 I2C1_ISR_fields
0800b6b8 g     O .rodata	00000068 TIM1_CCMR2_Output_fields
0800cb98 g     O .rodata	00000028 NVIC_IPR8_fields
0801ab44 g     O .rodata	00000010 PredivFactorTable
08016580 g     O .rodata	00000010 TSC_IOG3CR_fields
080005e0 g     F .text	0000003a .hidden __aeabi_f2d
08005052 g     F .text	0000000e USBD_LL_PrepareReceive
0800f0cc g     O .rodata	00000010 DMA1_CNDTR3_fields
0800595c g     F .text	0000002c L3GD20_RebootCmd
0800c264 g     O .rodata	00000108 CAN_F27R1_fields
0801158c g     O .rodata	00000018 TSC_IER_fields
080103f0 g     O .rodata	000000e8 CAN_FFA1R_fields
0800eebc g     O .rodata	00000018 TIM8_CNT_fields
08016418 g     O .rodata	00000010 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
080166e8 g     O .rodata	00000010 RTC_BKP25R_fields
080119cc g     O .rodata	00000108 TSC_IOCCR_fields
0801270c g     O .rodata	00000088 OPAMP_OPAMP3_CR_fields
08004df2 g     F .text	0000000c USBD_CDC_SetRxBuffer
0801a420 g     O .rodata	000000d8 EXTI_SWIER1_fields
08000320 g     F .text	0000027a .hidden __subdf3
0800b9e8 g     O .rodata	00000010 TIM16_ARR_fields
08011284 g     O .rodata	00000018 DBGMCU_IDCODE_fields
08006198 g     F .text	00001424 _vfprintf_r
08009818 g     F .text	0000005a __lo0bits
08013408 g     O .rodata	00000028 EXTI_IMR2_fields
08014898 g     O .rodata	00000010 TIM6_EGR_fields
08012dec g     O .rodata	00000010 SPI1_RXCRCR_fields
0801a778 g     O .rodata	00000010 I2C1_PECR_fields
080032ce g     F .text	000000f4 HAL_PCD_EP_Receive
0801a2c0 g     O .rodata	00000020 ADC1_OFR3_fields
0800de2c g     O .rodata	00000060 COMP_COMP6_CSR_fields
08011edc g     O .rodata	00000010 RTC_BKP1R_fields
08014528 g     O .rodata	00000068 TIM8_CCMR1_Output_fields
08013fb8 g     O .rodata	00000090 GPIOB_registers
08001d64 g     F .text	0000004c DecodeRegister
08010618 g     O .rodata	00000050 TIM8_SMCR_fields
08001ca8 g     F .text	00000040 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
0800bddc g     O .rodata	00000058 CAN_MCR_fields
0800be84 g     O .rodata	00000010 DAC_DOR1_fields
08001a94 g     F .text	0000004c TerminalRead
0800efa4 g     O .rodata	00000068 TSC_CR_fields
0800cf88 g     O .rodata	00000010 TIM2_DMAR_fields
0800baf8 g     O .rodata	00000038 TIM8_CCMR1_Input_fields
0800588e g     F .text	0000001e LSM303DLHC_AccIT1Enable
0800c37c g     O .rodata	00000108 CAN_F12R1_fields
08005be4  w    F .text	00000002 USBWakeUp_IRQHandler
0801a6d8 g     O .rodata	00000010 TIM16_PSC_fields
08014668 g     O .rodata	00000010 USART1_RDR_fields
08012dac g     O .rodata	00000040 RCC_BDCR_fields
08014cec g     O .rodata	00000018 TIM17_DCR_fields
08016ea8 g     O .rodata	00000010 NVIC_ISPR1_fields
0800c738 g     O .rodata	00000010 NVIC_ICPR2_fields
0801b918 g     O .parsetable	0000000c CmdAccelE
08016590 g     O .rodata	00000108 CAN_F21R2_fields
08015da8 g     O .rodata	00000010 DES_UID2_fields
08004de2 g     F .text	00000010 USBD_CDC_SetTxBuffer
0800d188 g     O .rodata	00000060 SYSCFG_registers
08010ac8 g     O .rodata	00000088 OPAMP_OPAMP4_CR_fields
08005be4  w    F .text	00000002 DMA2_Channel3_IRQHandler
08010fe4 g     O .rodata	000000d8 EXTI_FTSR1_fields
0800514c g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
08010938 g     O .rodata	00000108 CAN_F7R1_fields
08009754 g     F .text	00000082 __multadd
08004682 g     F .text	0000005a USBD_LL_SetupStage
08009740 g     F .text	00000012 _Bfree
080012dc g     F .text	0000000a Error_Handler
080155f4 g     O .rodata	00000018 WWDG_CR_fields
08005be4  w    F .text	00000002 EXTI2_TSC_IRQHandler
0800d108 g     O .rodata	00000010 NVIC_STIR_fields
08005be4  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
08013f60 g     O .rodata	00000058 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000a9c 	.word	0x20000a9c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a608 	.word	0x0800a608

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	0800a608 	.word	0x0800a608
 80001d8:	20000aa0 	.word	0x20000aa0
 80001dc:	20000a9c 	.word	0x20000a9c
 80001e0:	00000000 	.word	0x00000000

080001e4 <memcpy>:
 80001e4:	4684      	mov	ip, r0
 80001e6:	ea41 0300 	orr.w	r3, r1, r0
 80001ea:	f013 0303 	ands.w	r3, r3, #3
 80001ee:	d16d      	bne.n	80002cc <memcpy+0xe8>
 80001f0:	3a40      	subs	r2, #64	; 0x40
 80001f2:	d341      	bcc.n	8000278 <memcpy+0x94>
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000270:	f840 3b04 	str.w	r3, [r0], #4
 8000274:	3a40      	subs	r2, #64	; 0x40
 8000276:	d2bd      	bcs.n	80001f4 <memcpy+0x10>
 8000278:	3230      	adds	r2, #48	; 0x30
 800027a:	d311      	bcc.n	80002a0 <memcpy+0xbc>
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	3a10      	subs	r2, #16
 800029e:	d2ed      	bcs.n	800027c <memcpy+0x98>
 80002a0:	320c      	adds	r2, #12
 80002a2:	d305      	bcc.n	80002b0 <memcpy+0xcc>
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	3a04      	subs	r2, #4
 80002ae:	d2f9      	bcs.n	80002a4 <memcpy+0xc0>
 80002b0:	3204      	adds	r2, #4
 80002b2:	d008      	beq.n	80002c6 <memcpy+0xe2>
 80002b4:	07d2      	lsls	r2, r2, #31
 80002b6:	bf1c      	itt	ne
 80002b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002bc:	f800 3b01 	strbne.w	r3, [r0], #1
 80002c0:	d301      	bcc.n	80002c6 <memcpy+0xe2>
 80002c2:	880b      	ldrh	r3, [r1, #0]
 80002c4:	8003      	strh	r3, [r0, #0]
 80002c6:	4660      	mov	r0, ip
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	2a08      	cmp	r2, #8
 80002ce:	d313      	bcc.n	80002f8 <memcpy+0x114>
 80002d0:	078b      	lsls	r3, r1, #30
 80002d2:	d08d      	beq.n	80001f0 <memcpy+0xc>
 80002d4:	f010 0303 	ands.w	r3, r0, #3
 80002d8:	d08a      	beq.n	80001f0 <memcpy+0xc>
 80002da:	f1c3 0304 	rsb	r3, r3, #4
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	07db      	lsls	r3, r3, #31
 80002e2:	bf1c      	itt	ne
 80002e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002ec:	d380      	bcc.n	80001f0 <memcpy+0xc>
 80002ee:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002f2:	f820 3b02 	strh.w	r3, [r0], #2
 80002f6:	e77b      	b.n	80001f0 <memcpy+0xc>
 80002f8:	3a04      	subs	r2, #4
 80002fa:	d3d9      	bcc.n	80002b0 <memcpy+0xcc>
 80002fc:	3a01      	subs	r2, #1
 80002fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000302:	f800 3b01 	strb.w	r3, [r0], #1
 8000306:	d2f9      	bcs.n	80002fc <memcpy+0x118>
 8000308:	780b      	ldrb	r3, [r1, #0]
 800030a:	7003      	strb	r3, [r0, #0]
 800030c:	784b      	ldrb	r3, [r1, #1]
 800030e:	7043      	strb	r3, [r0, #1]
 8000310:	788b      	ldrb	r3, [r1, #2]
 8000312:	7083      	strb	r3, [r0, #2]
 8000314:	4660      	mov	r0, ip
 8000316:	4770      	bx	lr

08000318 <__aeabi_drsub>:
 8000318:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800031c:	e002      	b.n	8000324 <__adddf3>
 800031e:	bf00      	nop

08000320 <__aeabi_dsub>:
 8000320:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000324 <__adddf3>:
 8000324:	b530      	push	{r4, r5, lr}
 8000326:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800032a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800032e:	ea94 0f05 	teq	r4, r5
 8000332:	bf08      	it	eq
 8000334:	ea90 0f02 	teqeq	r0, r2
 8000338:	bf1f      	itttt	ne
 800033a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800033e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000342:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000346:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800034a:	f000 80e2 	beq.w	8000512 <__adddf3+0x1ee>
 800034e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000352:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000356:	bfb8      	it	lt
 8000358:	426d      	neglt	r5, r5
 800035a:	dd0c      	ble.n	8000376 <__adddf3+0x52>
 800035c:	442c      	add	r4, r5
 800035e:	ea80 0202 	eor.w	r2, r0, r2
 8000362:	ea81 0303 	eor.w	r3, r1, r3
 8000366:	ea82 0000 	eor.w	r0, r2, r0
 800036a:	ea83 0101 	eor.w	r1, r3, r1
 800036e:	ea80 0202 	eor.w	r2, r0, r2
 8000372:	ea81 0303 	eor.w	r3, r1, r3
 8000376:	2d36      	cmp	r5, #54	; 0x36
 8000378:	bf88      	it	hi
 800037a:	bd30      	pophi	{r4, r5, pc}
 800037c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000380:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000384:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000388:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800038c:	d002      	beq.n	8000394 <__adddf3+0x70>
 800038e:	4240      	negs	r0, r0
 8000390:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000394:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000398:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800039c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a0:	d002      	beq.n	80003a8 <__adddf3+0x84>
 80003a2:	4252      	negs	r2, r2
 80003a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a8:	ea94 0f05 	teq	r4, r5
 80003ac:	f000 80a7 	beq.w	80004fe <__adddf3+0x1da>
 80003b0:	f1a4 0401 	sub.w	r4, r4, #1
 80003b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b8:	db0d      	blt.n	80003d6 <__adddf3+0xb2>
 80003ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003be:	fa22 f205 	lsr.w	r2, r2, r5
 80003c2:	1880      	adds	r0, r0, r2
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003cc:	1880      	adds	r0, r0, r2
 80003ce:	fa43 f305 	asr.w	r3, r3, r5
 80003d2:	4159      	adcs	r1, r3
 80003d4:	e00e      	b.n	80003f4 <__adddf3+0xd0>
 80003d6:	f1a5 0520 	sub.w	r5, r5, #32
 80003da:	f10e 0e20 	add.w	lr, lr, #32
 80003de:	2a01      	cmp	r2, #1
 80003e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003e4:	bf28      	it	cs
 80003e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ea:	fa43 f305 	asr.w	r3, r3, r5
 80003ee:	18c0      	adds	r0, r0, r3
 80003f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f8:	d507      	bpl.n	800040a <__adddf3+0xe6>
 80003fa:	f04f 0e00 	mov.w	lr, #0
 80003fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000402:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000406:	eb6e 0101 	sbc.w	r1, lr, r1
 800040a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800040e:	d31b      	bcc.n	8000448 <__adddf3+0x124>
 8000410:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000414:	d30c      	bcc.n	8000430 <__adddf3+0x10c>
 8000416:	0849      	lsrs	r1, r1, #1
 8000418:	ea5f 0030 	movs.w	r0, r0, rrx
 800041c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000420:	f104 0401 	add.w	r4, r4, #1
 8000424:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000428:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800042c:	f080 809a 	bcs.w	8000564 <__adddf3+0x240>
 8000430:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000434:	bf08      	it	eq
 8000436:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800043a:	f150 0000 	adcs.w	r0, r0, #0
 800043e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000442:	ea41 0105 	orr.w	r1, r1, r5
 8000446:	bd30      	pop	{r4, r5, pc}
 8000448:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800044c:	4140      	adcs	r0, r0
 800044e:	eb41 0101 	adc.w	r1, r1, r1
 8000452:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000456:	f1a4 0401 	sub.w	r4, r4, #1
 800045a:	d1e9      	bne.n	8000430 <__adddf3+0x10c>
 800045c:	f091 0f00 	teq	r1, #0
 8000460:	bf04      	itt	eq
 8000462:	4601      	moveq	r1, r0
 8000464:	2000      	moveq	r0, #0
 8000466:	fab1 f381 	clz	r3, r1
 800046a:	bf08      	it	eq
 800046c:	3320      	addeq	r3, #32
 800046e:	f1a3 030b 	sub.w	r3, r3, #11
 8000472:	f1b3 0220 	subs.w	r2, r3, #32
 8000476:	da0c      	bge.n	8000492 <__adddf3+0x16e>
 8000478:	320c      	adds	r2, #12
 800047a:	dd08      	ble.n	800048e <__adddf3+0x16a>
 800047c:	f102 0c14 	add.w	ip, r2, #20
 8000480:	f1c2 020c 	rsb	r2, r2, #12
 8000484:	fa01 f00c 	lsl.w	r0, r1, ip
 8000488:	fa21 f102 	lsr.w	r1, r1, r2
 800048c:	e00c      	b.n	80004a8 <__adddf3+0x184>
 800048e:	f102 0214 	add.w	r2, r2, #20
 8000492:	bfd8      	it	le
 8000494:	f1c2 0c20 	rsble	ip, r2, #32
 8000498:	fa01 f102 	lsl.w	r1, r1, r2
 800049c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a0:	bfdc      	itt	le
 80004a2:	ea41 010c 	orrle.w	r1, r1, ip
 80004a6:	4090      	lslle	r0, r2
 80004a8:	1ae4      	subs	r4, r4, r3
 80004aa:	bfa2      	ittt	ge
 80004ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b0:	4329      	orrge	r1, r5
 80004b2:	bd30      	popge	{r4, r5, pc}
 80004b4:	ea6f 0404 	mvn.w	r4, r4
 80004b8:	3c1f      	subs	r4, #31
 80004ba:	da1c      	bge.n	80004f6 <__adddf3+0x1d2>
 80004bc:	340c      	adds	r4, #12
 80004be:	dc0e      	bgt.n	80004de <__adddf3+0x1ba>
 80004c0:	f104 0414 	add.w	r4, r4, #20
 80004c4:	f1c4 0220 	rsb	r2, r4, #32
 80004c8:	fa20 f004 	lsr.w	r0, r0, r4
 80004cc:	fa01 f302 	lsl.w	r3, r1, r2
 80004d0:	ea40 0003 	orr.w	r0, r0, r3
 80004d4:	fa21 f304 	lsr.w	r3, r1, r4
 80004d8:	ea45 0103 	orr.w	r1, r5, r3
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	f1c4 040c 	rsb	r4, r4, #12
 80004e2:	f1c4 0220 	rsb	r2, r4, #32
 80004e6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ea:	fa01 f304 	lsl.w	r3, r1, r4
 80004ee:	ea40 0003 	orr.w	r0, r0, r3
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	fa21 f004 	lsr.w	r0, r1, r4
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	f094 0f00 	teq	r4, #0
 8000502:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000506:	bf06      	itte	eq
 8000508:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800050c:	3401      	addeq	r4, #1
 800050e:	3d01      	subne	r5, #1
 8000510:	e74e      	b.n	80003b0 <__adddf3+0x8c>
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf18      	it	ne
 8000518:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051c:	d029      	beq.n	8000572 <__adddf3+0x24e>
 800051e:	ea94 0f05 	teq	r4, r5
 8000522:	bf08      	it	eq
 8000524:	ea90 0f02 	teqeq	r0, r2
 8000528:	d005      	beq.n	8000536 <__adddf3+0x212>
 800052a:	ea54 0c00 	orrs.w	ip, r4, r0
 800052e:	bf04      	itt	eq
 8000530:	4619      	moveq	r1, r3
 8000532:	4610      	moveq	r0, r2
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea91 0f03 	teq	r1, r3
 800053a:	bf1e      	ittt	ne
 800053c:	2100      	movne	r1, #0
 800053e:	2000      	movne	r0, #0
 8000540:	bd30      	popne	{r4, r5, pc}
 8000542:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000546:	d105      	bne.n	8000554 <__adddf3+0x230>
 8000548:	0040      	lsls	r0, r0, #1
 800054a:	4149      	adcs	r1, r1
 800054c:	bf28      	it	cs
 800054e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000558:	bf3c      	itt	cc
 800055a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800055e:	bd30      	popcc	{r4, r5, pc}
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000568:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800056c:	f04f 0000 	mov.w	r0, #0
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000576:	bf1a      	itte	ne
 8000578:	4619      	movne	r1, r3
 800057a:	4610      	movne	r0, r2
 800057c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000580:	bf1c      	itt	ne
 8000582:	460b      	movne	r3, r1
 8000584:	4602      	movne	r2, r0
 8000586:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800058a:	bf06      	itte	eq
 800058c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000590:	ea91 0f03 	teqeq	r1, r3
 8000594:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	bf00      	nop

0800059c <__aeabi_ui2d>:
 800059c:	f090 0f00 	teq	r0, #0
 80005a0:	bf04      	itt	eq
 80005a2:	2100      	moveq	r1, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b0:	f04f 0500 	mov.w	r5, #0
 80005b4:	f04f 0100 	mov.w	r1, #0
 80005b8:	e750      	b.n	800045c <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_i2d>:
 80005bc:	f090 0f00 	teq	r0, #0
 80005c0:	bf04      	itt	eq
 80005c2:	2100      	moveq	r1, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005d4:	bf48      	it	mi
 80005d6:	4240      	negmi	r0, r0
 80005d8:	f04f 0100 	mov.w	r1, #0
 80005dc:	e73e      	b.n	800045c <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_f2d>:
 80005e0:	0042      	lsls	r2, r0, #1
 80005e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ee:	bf1f      	itttt	ne
 80005f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005fc:	4770      	bxne	lr
 80005fe:	f092 0f00 	teq	r2, #0
 8000602:	bf14      	ite	ne
 8000604:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e720      	b.n	800045c <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aedc 	beq.w	800040a <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6c1      	b.n	800040a <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_dmul>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800068e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000692:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000696:	bf1d      	ittte	ne
 8000698:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800069c:	ea94 0f0c 	teqne	r4, ip
 80006a0:	ea95 0f0c 	teqne	r5, ip
 80006a4:	f000 f8de 	bleq	8000864 <__aeabi_dmul+0x1dc>
 80006a8:	442c      	add	r4, r5
 80006aa:	ea81 0603 	eor.w	r6, r1, r3
 80006ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ba:	bf18      	it	ne
 80006bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006c8:	d038      	beq.n	800073c <__aeabi_dmul+0xb4>
 80006ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006de:	f04f 0600 	mov.w	r6, #0
 80006e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006e6:	f09c 0f00 	teq	ip, #0
 80006ea:	bf18      	it	ne
 80006ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80006f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006fc:	d204      	bcs.n	8000708 <__aeabi_dmul+0x80>
 80006fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000702:	416d      	adcs	r5, r5
 8000704:	eb46 0606 	adc.w	r6, r6, r6
 8000708:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800070c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000710:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000714:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000718:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800071c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000720:	bf88      	it	hi
 8000722:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000726:	d81e      	bhi.n	8000766 <__aeabi_dmul+0xde>
 8000728:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800072c:	bf08      	it	eq
 800072e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000732:	f150 0000 	adcs.w	r0, r0, #0
 8000736:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000740:	ea46 0101 	orr.w	r1, r6, r1
 8000744:	ea40 0002 	orr.w	r0, r0, r2
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000750:	bfc2      	ittt	gt
 8000752:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000756:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800075a:	bd70      	popgt	{r4, r5, r6, pc}
 800075c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000760:	f04f 0e00 	mov.w	lr, #0
 8000764:	3c01      	subs	r4, #1
 8000766:	f300 80ab 	bgt.w	80008c0 <__aeabi_dmul+0x238>
 800076a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800076e:	bfde      	ittt	le
 8000770:	2000      	movle	r0, #0
 8000772:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000776:	bd70      	pople	{r4, r5, r6, pc}
 8000778:	f1c4 0400 	rsb	r4, r4, #0
 800077c:	3c20      	subs	r4, #32
 800077e:	da35      	bge.n	80007ec <__aeabi_dmul+0x164>
 8000780:	340c      	adds	r4, #12
 8000782:	dc1b      	bgt.n	80007bc <__aeabi_dmul+0x134>
 8000784:	f104 0414 	add.w	r4, r4, #20
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f305 	lsl.w	r3, r0, r5
 8000790:	fa20 f004 	lsr.w	r0, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ac:	eb42 0106 	adc.w	r1, r2, r6
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 040c 	rsb	r4, r4, #12
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f304 	lsl.w	r3, r0, r4
 80007c8:	fa20 f005 	lsr.w	r0, r0, r5
 80007cc:	fa01 f204 	lsl.w	r2, r1, r4
 80007d0:	ea40 0002 	orr.w	r0, r0, r2
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007dc:	f141 0100 	adc.w	r1, r1, #0
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 0520 	rsb	r5, r4, #32
 80007f0:	fa00 f205 	lsl.w	r2, r0, r5
 80007f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007f8:	fa20 f304 	lsr.w	r3, r0, r4
 80007fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000800:	ea43 0302 	orr.w	r3, r3, r2
 8000804:	fa21 f004 	lsr.w	r0, r1, r4
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	fa21 f204 	lsr.w	r2, r1, r4
 8000810:	ea20 0002 	bic.w	r0, r0, r2
 8000814:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000818:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800081c:	bf08      	it	eq
 800081e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f094 0f00 	teq	r4, #0
 8000828:	d10f      	bne.n	800084a <__aeabi_dmul+0x1c2>
 800082a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800082e:	0040      	lsls	r0, r0, #1
 8000830:	eb41 0101 	adc.w	r1, r1, r1
 8000834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3c01      	subeq	r4, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1a6>
 800083e:	ea41 0106 	orr.w	r1, r1, r6
 8000842:	f095 0f00 	teq	r5, #0
 8000846:	bf18      	it	ne
 8000848:	4770      	bxne	lr
 800084a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	eb43 0303 	adc.w	r3, r3, r3
 8000854:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3d01      	subeq	r5, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1c6>
 800085e:	ea43 0306 	orr.w	r3, r3, r6
 8000862:	4770      	bx	lr
 8000864:	ea94 0f0c 	teq	r4, ip
 8000868:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800086c:	bf18      	it	ne
 800086e:	ea95 0f0c 	teqne	r5, ip
 8000872:	d00c      	beq.n	800088e <__aeabi_dmul+0x206>
 8000874:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000878:	bf18      	it	ne
 800087a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087e:	d1d1      	bne.n	8000824 <__aeabi_dmul+0x19c>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000892:	bf06      	itte	eq
 8000894:	4610      	moveq	r0, r2
 8000896:	4619      	moveq	r1, r3
 8000898:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089c:	d019      	beq.n	80008d2 <__aeabi_dmul+0x24a>
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	d102      	bne.n	80008aa <__aeabi_dmul+0x222>
 80008a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008a8:	d113      	bne.n	80008d2 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	d105      	bne.n	80008bc <__aeabi_dmul+0x234>
 80008b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008b4:	bf1c      	itt	ne
 80008b6:	4610      	movne	r0, r2
 80008b8:	4619      	movne	r1, r3
 80008ba:	d10a      	bne.n	80008d2 <__aeabi_dmul+0x24a>
 80008bc:	ea81 0103 	eor.w	r1, r1, r3
 80008c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008da:	bd70      	pop	{r4, r5, r6, pc}

080008dc <__aeabi_ddiv>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ea:	bf1d      	ittte	ne
 80008ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008f0:	ea94 0f0c 	teqne	r4, ip
 80008f4:	ea95 0f0c 	teqne	r5, ip
 80008f8:	f000 f8a7 	bleq	8000a4a <__aeabi_ddiv+0x16e>
 80008fc:	eba4 0405 	sub.w	r4, r4, r5
 8000900:	ea81 0e03 	eor.w	lr, r1, r3
 8000904:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000908:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800090c:	f000 8088 	beq.w	8000a20 <__aeabi_ddiv+0x144>
 8000910:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000914:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000918:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800091c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000920:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000924:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000928:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800092c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000930:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000934:	429d      	cmp	r5, r3
 8000936:	bf08      	it	eq
 8000938:	4296      	cmpeq	r6, r2
 800093a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800093e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000942:	d202      	bcs.n	800094a <__aeabi_ddiv+0x6e>
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	1ab6      	subs	r6, r6, r2
 800094c:	eb65 0503 	sbc.w	r5, r5, r3
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800095a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009bc:	d018      	beq.n	80009f0 <__aeabi_ddiv+0x114>
 80009be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009da:	d1c0      	bne.n	800095e <__aeabi_ddiv+0x82>
 80009dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e0:	d10b      	bne.n	80009fa <__aeabi_ddiv+0x11e>
 80009e2:	ea41 0100 	orr.w	r1, r1, r0
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ee:	e7b6      	b.n	800095e <__aeabi_ddiv+0x82>
 80009f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f4:	bf04      	itt	eq
 80009f6:	4301      	orreq	r1, r0
 80009f8:	2000      	moveq	r0, #0
 80009fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009fe:	bf88      	it	hi
 8000a00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a04:	f63f aeaf 	bhi.w	8000766 <__aeabi_dmul+0xde>
 8000a08:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a0c:	bf04      	itt	eq
 8000a0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a16:	f150 0000 	adcs.w	r0, r0, #0
 8000a1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a2c:	bfc2      	ittt	gt
 8000a2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a36:	bd70      	popgt	{r4, r5, r6, pc}
 8000a38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3c:	f04f 0e00 	mov.w	lr, #0
 8000a40:	3c01      	subs	r4, #1
 8000a42:	e690      	b.n	8000766 <__aeabi_dmul+0xde>
 8000a44:	ea45 0e06 	orr.w	lr, r5, r6
 8000a48:	e68d      	b.n	8000766 <__aeabi_dmul+0xde>
 8000a4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a4e:	ea94 0f0c 	teq	r4, ip
 8000a52:	bf08      	it	eq
 8000a54:	ea95 0f0c 	teqeq	r5, ip
 8000a58:	f43f af3b 	beq.w	80008d2 <__aeabi_dmul+0x24a>
 8000a5c:	ea94 0f0c 	teq	r4, ip
 8000a60:	d10a      	bne.n	8000a78 <__aeabi_ddiv+0x19c>
 8000a62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a66:	f47f af34 	bne.w	80008d2 <__aeabi_dmul+0x24a>
 8000a6a:	ea95 0f0c 	teq	r5, ip
 8000a6e:	f47f af25 	bne.w	80008bc <__aeabi_dmul+0x234>
 8000a72:	4610      	mov	r0, r2
 8000a74:	4619      	mov	r1, r3
 8000a76:	e72c      	b.n	80008d2 <__aeabi_dmul+0x24a>
 8000a78:	ea95 0f0c 	teq	r5, ip
 8000a7c:	d106      	bne.n	8000a8c <__aeabi_ddiv+0x1b0>
 8000a7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a82:	f43f aefd 	beq.w	8000880 <__aeabi_dmul+0x1f8>
 8000a86:	4610      	mov	r0, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	e722      	b.n	80008d2 <__aeabi_dmul+0x24a>
 8000a8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a96:	f47f aec5 	bne.w	8000824 <__aeabi_dmul+0x19c>
 8000a9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a9e:	f47f af0d 	bne.w	80008bc <__aeabi_dmul+0x234>
 8000aa2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aa6:	f47f aeeb 	bne.w	8000880 <__aeabi_dmul+0x1f8>
 8000aaa:	e712      	b.n	80008d2 <__aeabi_dmul+0x24a>

08000aac <__gedf2>:
 8000aac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ab0:	e006      	b.n	8000ac0 <__cmpdf2+0x4>
 8000ab2:	bf00      	nop

08000ab4 <__ledf2>:
 8000ab4:	f04f 0c01 	mov.w	ip, #1
 8000ab8:	e002      	b.n	8000ac0 <__cmpdf2+0x4>
 8000aba:	bf00      	nop

08000abc <__cmpdf2>:
 8000abc:	f04f 0c01 	mov.w	ip, #1
 8000ac0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ad6:	d01b      	beq.n	8000b10 <__cmpdf2+0x54>
 8000ad8:	b001      	add	sp, #4
 8000ada:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ade:	bf0c      	ite	eq
 8000ae0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ae4:	ea91 0f03 	teqne	r1, r3
 8000ae8:	bf02      	ittt	eq
 8000aea:	ea90 0f02 	teqeq	r0, r2
 8000aee:	2000      	moveq	r0, #0
 8000af0:	4770      	bxeq	lr
 8000af2:	f110 0f00 	cmn.w	r0, #0
 8000af6:	ea91 0f03 	teq	r1, r3
 8000afa:	bf58      	it	pl
 8000afc:	4299      	cmppl	r1, r3
 8000afe:	bf08      	it	eq
 8000b00:	4290      	cmpeq	r0, r2
 8000b02:	bf2c      	ite	cs
 8000b04:	17d8      	asrcs	r0, r3, #31
 8000b06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b0a:	f040 0001 	orr.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__cmpdf2+0x64>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d107      	bne.n	8000b30 <__cmpdf2+0x74>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d1d6      	bne.n	8000ad8 <__cmpdf2+0x1c>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d0d3      	beq.n	8000ad8 <__cmpdf2+0x1c>
 8000b30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdrcmple>:
 8000b38:	4684      	mov	ip, r0
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4662      	mov	r2, ip
 8000b3e:	468c      	mov	ip, r1
 8000b40:	4619      	mov	r1, r3
 8000b42:	4663      	mov	r3, ip
 8000b44:	e000      	b.n	8000b48 <__aeabi_cdcmpeq>
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdcmpeq>:
 8000b48:	b501      	push	{r0, lr}
 8000b4a:	f7ff ffb7 	bl	8000abc <__cmpdf2>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	bf48      	it	mi
 8000b52:	f110 0f00 	cmnmi.w	r0, #0
 8000b56:	bd01      	pop	{r0, pc}

08000b58 <__aeabi_dcmpeq>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff fff4 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b60:	bf0c      	ite	eq
 8000b62:	2001      	moveq	r0, #1
 8000b64:	2000      	movne	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmplt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffea 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmple>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff ffe0 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b88:	bf94      	ite	ls
 8000b8a:	2001      	movls	r0, #1
 8000b8c:	2000      	movhi	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmpge>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffce 	bl	8000b38 <__aeabi_cdrcmple>
 8000b9c:	bf94      	ite	ls
 8000b9e:	2001      	movls	r0, #1
 8000ba0:	2000      	movhi	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmpgt>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffc4 	bl	8000b38 <__aeabi_cdrcmple>
 8000bb0:	bf34      	ite	cc
 8000bb2:	2001      	movcc	r0, #1
 8000bb4:	2000      	movcs	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2iz>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d215      	bcs.n	8000bf2 <__aeabi_d2iz+0x36>
 8000bc6:	d511      	bpl.n	8000bec <__aeabi_d2iz+0x30>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d912      	bls.n	8000bf8 <__aeabi_d2iz+0x3c>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d105      	bne.n	8000c04 <__aeabi_d2iz+0x48>
 8000bf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c20:	f000 b83c 	b.w	8000c9c <__aeabi_idiv0>
 8000c24:	b082      	sub	sp, #8
 8000c26:	46ec      	mov	ip, sp
 8000c28:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c2c:	f000 f81e 	bl	8000c6c <__gnu_uldivmod_helper>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	b002      	add	sp, #8
 8000c36:	bc0c      	pop	{r2, r3}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__gnu_ldivmod_helper>:
 8000c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c40:	9c06      	ldr	r4, [sp, #24]
 8000c42:	4615      	mov	r5, r2
 8000c44:	4606      	mov	r6, r0
 8000c46:	460f      	mov	r7, r1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	f000 f829 	bl	8000ca0 <__divdi3>
 8000c4e:	fb05 f301 	mul.w	r3, r5, r1
 8000c52:	fb00 3808 	mla	r8, r0, r8, r3
 8000c56:	fba5 2300 	umull	r2, r3, r5, r0
 8000c5a:	1ab2      	subs	r2, r6, r2
 8000c5c:	4443      	add	r3, r8
 8000c5e:	eb67 0303 	sbc.w	r3, r7, r3
 8000c62:	e9c4 2300 	strd	r2, r3, [r4]
 8000c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c6a:	bf00      	nop

08000c6c <__gnu_uldivmod_helper>:
 8000c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c70:	9c06      	ldr	r4, [sp, #24]
 8000c72:	4690      	mov	r8, r2
 8000c74:	4606      	mov	r6, r0
 8000c76:	460f      	mov	r7, r1
 8000c78:	461d      	mov	r5, r3
 8000c7a:	f000 f95f 	bl	8000f3c <__udivdi3>
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	fba0 2308 	umull	r2, r3, r0, r8
 8000c86:	fb08 5501 	mla	r5, r8, r1, r5
 8000c8a:	1ab2      	subs	r2, r6, r2
 8000c8c:	442b      	add	r3, r5
 8000c8e:	eb67 0303 	sbc.w	r3, r7, r3
 8000c92:	e9c4 2300 	strd	r2, r3, [r4]
 8000c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__divdi3>:
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ca6:	f2c0 80a6 	blt.w	8000df6 <__divdi3+0x156>
 8000caa:	2600      	movs	r6, #0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f2c0 809c 	blt.w	8000dea <__divdi3+0x14a>
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	469e      	mov	lr, r3
 8000cb8:	4615      	mov	r5, r2
 8000cba:	4604      	mov	r4, r0
 8000cbc:	460f      	mov	r7, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d13d      	bne.n	8000d3e <__divdi3+0x9e>
 8000cc2:	428a      	cmp	r2, r1
 8000cc4:	d959      	bls.n	8000d7a <__divdi3+0xda>
 8000cc6:	fab2 f382 	clz	r3, r2
 8000cca:	b13b      	cbz	r3, 8000cdc <__divdi3+0x3c>
 8000ccc:	f1c3 0220 	rsb	r2, r3, #32
 8000cd0:	409f      	lsls	r7, r3
 8000cd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd6:	409d      	lsls	r5, r3
 8000cd8:	4317      	orrs	r7, r2
 8000cda:	409c      	lsls	r4, r3
 8000cdc:	0c29      	lsrs	r1, r5, #16
 8000cde:	0c22      	lsrs	r2, r4, #16
 8000ce0:	fbb7 fef1 	udiv	lr, r7, r1
 8000ce4:	b2a8      	uxth	r0, r5
 8000ce6:	fb01 771e 	mls	r7, r1, lr, r7
 8000cea:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000cee:	fb00 f30e 	mul.w	r3, r0, lr
 8000cf2:	42bb      	cmp	r3, r7
 8000cf4:	d90a      	bls.n	8000d0c <__divdi3+0x6c>
 8000cf6:	197f      	adds	r7, r7, r5
 8000cf8:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8000cfc:	f080 8105 	bcs.w	8000f0a <__divdi3+0x26a>
 8000d00:	42bb      	cmp	r3, r7
 8000d02:	f240 8102 	bls.w	8000f0a <__divdi3+0x26a>
 8000d06:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d0a:	442f      	add	r7, r5
 8000d0c:	1aff      	subs	r7, r7, r3
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb7 f3f1 	udiv	r3, r7, r1
 8000d14:	fb01 7713 	mls	r7, r1, r3, r7
 8000d18:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000d1c:	fb00 f003 	mul.w	r0, r0, r3
 8000d20:	42b8      	cmp	r0, r7
 8000d22:	d908      	bls.n	8000d36 <__divdi3+0x96>
 8000d24:	197f      	adds	r7, r7, r5
 8000d26:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000d2a:	f080 80f0 	bcs.w	8000f0e <__divdi3+0x26e>
 8000d2e:	42b8      	cmp	r0, r7
 8000d30:	f240 80ed 	bls.w	8000f0e <__divdi3+0x26e>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	e003      	b.n	8000d46 <__divdi3+0xa6>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d90f      	bls.n	8000d62 <__divdi3+0xc2>
 8000d42:	2200      	movs	r2, #0
 8000d44:	4613      	mov	r3, r2
 8000d46:	1c34      	adds	r4, r6, #0
 8000d48:	bf18      	it	ne
 8000d4a:	2401      	movne	r4, #1
 8000d4c:	4260      	negs	r0, r4
 8000d4e:	f04f 0500 	mov.w	r5, #0
 8000d52:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000d56:	4058      	eors	r0, r3
 8000d58:	4051      	eors	r1, r2
 8000d5a:	1900      	adds	r0, r0, r4
 8000d5c:	4169      	adcs	r1, r5
 8000d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d62:	fab3 f283 	clz	r2, r3
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8086 	bne.w	8000e78 <__divdi3+0x1d8>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d302      	bcc.n	8000d76 <__divdi3+0xd6>
 8000d70:	4584      	cmp	ip, r0
 8000d72:	f200 80db 	bhi.w	8000f2c <__divdi3+0x28c>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e7e5      	b.n	8000d46 <__divdi3+0xa6>
 8000d7a:	b912      	cbnz	r2, 8000d82 <__divdi3+0xe2>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	fbb3 f5f2 	udiv	r5, r3, r2
 8000d82:	fab5 f085 	clz	r0, r5
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d13b      	bne.n	8000e02 <__divdi3+0x162>
 8000d8a:	1b78      	subs	r0, r7, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	2201      	movs	r2, #1
 8000d96:	fbb0 f8fe 	udiv	r8, r0, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 0718 	mls	r7, lr, r8, r0
 8000da0:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000da4:	fb0c f308 	mul.w	r3, ip, r8
 8000da8:	42bb      	cmp	r3, r7
 8000daa:	d907      	bls.n	8000dbc <__divdi3+0x11c>
 8000dac:	197f      	adds	r7, r7, r5
 8000dae:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__divdi3+0x11a>
 8000db4:	42bb      	cmp	r3, r7
 8000db6:	f200 80bd 	bhi.w	8000f34 <__divdi3+0x294>
 8000dba:	4688      	mov	r8, r1
 8000dbc:	1aff      	subs	r7, r7, r3
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb7 f3fe 	udiv	r3, r7, lr
 8000dc4:	fb0e 7713 	mls	r7, lr, r3, r7
 8000dc8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000dcc:	fb0c fc03 	mul.w	ip, ip, r3
 8000dd0:	45bc      	cmp	ip, r7
 8000dd2:	d907      	bls.n	8000de4 <__divdi3+0x144>
 8000dd4:	197f      	adds	r7, r7, r5
 8000dd6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__divdi3+0x142>
 8000ddc:	45bc      	cmp	ip, r7
 8000dde:	f200 80a7 	bhi.w	8000f30 <__divdi3+0x290>
 8000de2:	460b      	mov	r3, r1
 8000de4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de8:	e7ad      	b.n	8000d46 <__divdi3+0xa6>
 8000dea:	4252      	negs	r2, r2
 8000dec:	ea6f 0606 	mvn.w	r6, r6
 8000df0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000df4:	e75d      	b.n	8000cb2 <__divdi3+0x12>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000e00:	e754      	b.n	8000cac <__divdi3+0xc>
 8000e02:	f1c0 0220 	rsb	r2, r0, #32
 8000e06:	fa24 f102 	lsr.w	r1, r4, r2
 8000e0a:	fa07 f300 	lsl.w	r3, r7, r0
 8000e0e:	4085      	lsls	r5, r0
 8000e10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e14:	40d7      	lsrs	r7, r2
 8000e16:	4319      	orrs	r1, r3
 8000e18:	fbb7 f2fe 	udiv	r2, r7, lr
 8000e1c:	0c0b      	lsrs	r3, r1, #16
 8000e1e:	fb0e 7712 	mls	r7, lr, r2, r7
 8000e22:	fa1f fc85 	uxth.w	ip, r5
 8000e26:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000e2a:	fb0c f702 	mul.w	r7, ip, r2
 8000e2e:	429f      	cmp	r7, r3
 8000e30:	fa04 f400 	lsl.w	r4, r4, r0
 8000e34:	d907      	bls.n	8000e46 <__divdi3+0x1a6>
 8000e36:	195b      	adds	r3, r3, r5
 8000e38:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8000e3c:	d274      	bcs.n	8000f28 <__divdi3+0x288>
 8000e3e:	429f      	cmp	r7, r3
 8000e40:	d972      	bls.n	8000f28 <__divdi3+0x288>
 8000e42:	3a02      	subs	r2, #2
 8000e44:	442b      	add	r3, r5
 8000e46:	1bdf      	subs	r7, r3, r7
 8000e48:	b289      	uxth	r1, r1
 8000e4a:	fbb7 f8fe 	udiv	r8, r7, lr
 8000e4e:	fb0e 7318 	mls	r3, lr, r8, r7
 8000e52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e56:	fb0c f708 	mul.w	r7, ip, r8
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__divdi3+0x1d0>
 8000e5e:	195b      	adds	r3, r3, r5
 8000e60:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000e64:	d25c      	bcs.n	8000f20 <__divdi3+0x280>
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d95a      	bls.n	8000f20 <__divdi3+0x280>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	442b      	add	r3, r5
 8000e70:	1bd8      	subs	r0, r3, r7
 8000e72:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000e76:	e78e      	b.n	8000d96 <__divdi3+0xf6>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa2c f103 	lsr.w	r1, ip, r3
 8000e80:	fa0e fe02 	lsl.w	lr, lr, r2
 8000e84:	fa20 f703 	lsr.w	r7, r0, r3
 8000e88:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e8c:	fa08 f002 	lsl.w	r0, r8, r2
 8000e90:	fa28 f103 	lsr.w	r1, r8, r3
 8000e94:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000e98:	4338      	orrs	r0, r7
 8000e9a:	fbb1 f8f5 	udiv	r8, r1, r5
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fb05 1118 	mls	r1, r5, r8, r1
 8000ea4:	fa1f f78e 	uxth.w	r7, lr
 8000ea8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eac:	fb07 f308 	mul.w	r3, r7, r8
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb6:	d909      	bls.n	8000ecc <__divdi3+0x22c>
 8000eb8:	eb11 010e 	adds.w	r1, r1, lr
 8000ebc:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8000ec0:	d230      	bcs.n	8000f24 <__divdi3+0x284>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d92e      	bls.n	8000f24 <__divdi3+0x284>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4471      	add	r1, lr
 8000ecc:	1ac9      	subs	r1, r1, r3
 8000ece:	b280      	uxth	r0, r0
 8000ed0:	fbb1 f3f5 	udiv	r3, r1, r5
 8000ed4:	fb05 1113 	mls	r1, r5, r3, r1
 8000ed8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000edc:	fb07 f703 	mul.w	r7, r7, r3
 8000ee0:	428f      	cmp	r7, r1
 8000ee2:	d908      	bls.n	8000ef6 <__divdi3+0x256>
 8000ee4:	eb11 010e 	adds.w	r1, r1, lr
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000eec:	d216      	bcs.n	8000f1c <__divdi3+0x27c>
 8000eee:	428f      	cmp	r7, r1
 8000ef0:	d914      	bls.n	8000f1c <__divdi3+0x27c>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	4471      	add	r1, lr
 8000ef6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000efa:	1bc9      	subs	r1, r1, r7
 8000efc:	fba3 890c 	umull	r8, r9, r3, ip
 8000f00:	4549      	cmp	r1, r9
 8000f02:	d309      	bcc.n	8000f18 <__divdi3+0x278>
 8000f04:	d005      	beq.n	8000f12 <__divdi3+0x272>
 8000f06:	2200      	movs	r2, #0
 8000f08:	e71d      	b.n	8000d46 <__divdi3+0xa6>
 8000f0a:	4696      	mov	lr, r2
 8000f0c:	e6fe      	b.n	8000d0c <__divdi3+0x6c>
 8000f0e:	4613      	mov	r3, r2
 8000f10:	e711      	b.n	8000d36 <__divdi3+0x96>
 8000f12:	4094      	lsls	r4, r2
 8000f14:	4544      	cmp	r4, r8
 8000f16:	d2f6      	bcs.n	8000f06 <__divdi3+0x266>
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	e7f4      	b.n	8000f06 <__divdi3+0x266>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	e7ea      	b.n	8000ef6 <__divdi3+0x256>
 8000f20:	4688      	mov	r8, r1
 8000f22:	e7a5      	b.n	8000e70 <__divdi3+0x1d0>
 8000f24:	46c8      	mov	r8, r9
 8000f26:	e7d1      	b.n	8000ecc <__divdi3+0x22c>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	e78c      	b.n	8000e46 <__divdi3+0x1a6>
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	e70a      	b.n	8000d46 <__divdi3+0xa6>
 8000f30:	3b02      	subs	r3, #2
 8000f32:	e757      	b.n	8000de4 <__divdi3+0x144>
 8000f34:	f1a8 0802 	sub.w	r8, r8, #2
 8000f38:	442f      	add	r7, r5
 8000f3a:	e73f      	b.n	8000dbc <__divdi3+0x11c>

08000f3c <__udivdi3>:
 8000f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d144      	bne.n	8000fce <__udivdi3+0x92>
 8000f44:	428a      	cmp	r2, r1
 8000f46:	4615      	mov	r5, r2
 8000f48:	4604      	mov	r4, r0
 8000f4a:	d94f      	bls.n	8000fec <__udivdi3+0xb0>
 8000f4c:	fab2 f782 	clz	r7, r2
 8000f50:	460e      	mov	r6, r1
 8000f52:	b14f      	cbz	r7, 8000f68 <__udivdi3+0x2c>
 8000f54:	f1c7 0320 	rsb	r3, r7, #32
 8000f58:	40b9      	lsls	r1, r7
 8000f5a:	fa20 f603 	lsr.w	r6, r0, r3
 8000f5e:	fa02 f507 	lsl.w	r5, r2, r7
 8000f62:	430e      	orrs	r6, r1
 8000f64:	fa00 f407 	lsl.w	r4, r0, r7
 8000f68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f6c:	0c23      	lsrs	r3, r4, #16
 8000f6e:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f72:	b2af      	uxth	r7, r5
 8000f74:	fb0e 6110 	mls	r1, lr, r0, r6
 8000f78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f7c:	fb07 f100 	mul.w	r1, r7, r0
 8000f80:	4299      	cmp	r1, r3
 8000f82:	d909      	bls.n	8000f98 <__udivdi3+0x5c>
 8000f84:	195b      	adds	r3, r3, r5
 8000f86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f8a:	f080 80ec 	bcs.w	8001166 <__udivdi3+0x22a>
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	f240 80e9 	bls.w	8001166 <__udivdi3+0x22a>
 8000f94:	3802      	subs	r0, #2
 8000f96:	442b      	add	r3, r5
 8000f98:	1a5a      	subs	r2, r3, r1
 8000f9a:	b2a4      	uxth	r4, r4
 8000f9c:	fbb2 f3fe 	udiv	r3, r2, lr
 8000fa0:	fb0e 2213 	mls	r2, lr, r3, r2
 8000fa4:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8000fa8:	fb07 f703 	mul.w	r7, r7, r3
 8000fac:	4297      	cmp	r7, r2
 8000fae:	d908      	bls.n	8000fc2 <__udivdi3+0x86>
 8000fb0:	1952      	adds	r2, r2, r5
 8000fb2:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000fb6:	f080 80d8 	bcs.w	800116a <__udivdi3+0x22e>
 8000fba:	4297      	cmp	r7, r2
 8000fbc:	f240 80d5 	bls.w	800116a <__udivdi3+0x22e>
 8000fc0:	3b02      	subs	r3, #2
 8000fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	4631      	mov	r1, r6
 8000fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d847      	bhi.n	8001062 <__udivdi3+0x126>
 8000fd2:	fab3 f683 	clz	r6, r3
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	d148      	bne.n	800106c <__udivdi3+0x130>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d302      	bcc.n	8000fe4 <__udivdi3+0xa8>
 8000fde:	4282      	cmp	r2, r0
 8000fe0:	f200 80cd 	bhi.w	800117e <__udivdi3+0x242>
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	4631      	mov	r1, r6
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fec:	b912      	cbnz	r2, 8000ff4 <__udivdi3+0xb8>
 8000fee:	2501      	movs	r5, #1
 8000ff0:	fbb5 f5f2 	udiv	r5, r5, r2
 8000ff4:	fab5 f885 	clz	r8, r5
 8000ff8:	f1b8 0f00 	cmp.w	r8, #0
 8000ffc:	d177      	bne.n	80010ee <__udivdi3+0x1b2>
 8000ffe:	1b4a      	subs	r2, r1, r5
 8001000:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001004:	b2af      	uxth	r7, r5
 8001006:	2601      	movs	r6, #1
 8001008:	fbb2 f0fe 	udiv	r0, r2, lr
 800100c:	0c23      	lsrs	r3, r4, #16
 800100e:	fb0e 2110 	mls	r1, lr, r0, r2
 8001012:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001016:	fb07 f300 	mul.w	r3, r7, r0
 800101a:	428b      	cmp	r3, r1
 800101c:	d907      	bls.n	800102e <__udivdi3+0xf2>
 800101e:	1949      	adds	r1, r1, r5
 8001020:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001024:	d202      	bcs.n	800102c <__udivdi3+0xf0>
 8001026:	428b      	cmp	r3, r1
 8001028:	f200 80ba 	bhi.w	80011a0 <__udivdi3+0x264>
 800102c:	4610      	mov	r0, r2
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	b2a4      	uxth	r4, r4
 8001032:	fbb1 f3fe 	udiv	r3, r1, lr
 8001036:	fb0e 1113 	mls	r1, lr, r3, r1
 800103a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800103e:	fb07 f703 	mul.w	r7, r7, r3
 8001042:	42a7      	cmp	r7, r4
 8001044:	d908      	bls.n	8001058 <__udivdi3+0x11c>
 8001046:	1964      	adds	r4, r4, r5
 8001048:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800104c:	f080 808f 	bcs.w	800116e <__udivdi3+0x232>
 8001050:	42a7      	cmp	r7, r4
 8001052:	f240 808c 	bls.w	800116e <__udivdi3+0x232>
 8001056:	3b02      	subs	r3, #2
 8001058:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800105c:	4631      	mov	r1, r6
 800105e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001062:	2600      	movs	r6, #0
 8001064:	4630      	mov	r0, r6
 8001066:	4631      	mov	r1, r6
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800106c:	f1c6 0420 	rsb	r4, r6, #32
 8001070:	fa22 f504 	lsr.w	r5, r2, r4
 8001074:	40b3      	lsls	r3, r6
 8001076:	432b      	orrs	r3, r5
 8001078:	fa20 fc04 	lsr.w	ip, r0, r4
 800107c:	fa01 f706 	lsl.w	r7, r1, r6
 8001080:	fa21 f504 	lsr.w	r5, r1, r4
 8001084:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001088:	ea4c 0707 	orr.w	r7, ip, r7
 800108c:	fbb5 f8fe 	udiv	r8, r5, lr
 8001090:	0c39      	lsrs	r1, r7, #16
 8001092:	fb0e 5518 	mls	r5, lr, r8, r5
 8001096:	fa1f fc83 	uxth.w	ip, r3
 800109a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800109e:	fb0c f108 	mul.w	r1, ip, r8
 80010a2:	42a9      	cmp	r1, r5
 80010a4:	fa02 f206 	lsl.w	r2, r2, r6
 80010a8:	d904      	bls.n	80010b4 <__udivdi3+0x178>
 80010aa:	18ed      	adds	r5, r5, r3
 80010ac:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80010b0:	d367      	bcc.n	8001182 <__udivdi3+0x246>
 80010b2:	46a0      	mov	r8, r4
 80010b4:	1a6d      	subs	r5, r5, r1
 80010b6:	b2bf      	uxth	r7, r7
 80010b8:	fbb5 f4fe 	udiv	r4, r5, lr
 80010bc:	fb0e 5514 	mls	r5, lr, r4, r5
 80010c0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80010c4:	fb0c fc04 	mul.w	ip, ip, r4
 80010c8:	458c      	cmp	ip, r1
 80010ca:	d904      	bls.n	80010d6 <__udivdi3+0x19a>
 80010cc:	18c9      	adds	r1, r1, r3
 80010ce:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 80010d2:	d35c      	bcc.n	800118e <__udivdi3+0x252>
 80010d4:	462c      	mov	r4, r5
 80010d6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80010da:	ebcc 0101 	rsb	r1, ip, r1
 80010de:	fba4 2302 	umull	r2, r3, r4, r2
 80010e2:	4299      	cmp	r1, r3
 80010e4:	d348      	bcc.n	8001178 <__udivdi3+0x23c>
 80010e6:	d044      	beq.n	8001172 <__udivdi3+0x236>
 80010e8:	4620      	mov	r0, r4
 80010ea:	2600      	movs	r6, #0
 80010ec:	e76c      	b.n	8000fc8 <__udivdi3+0x8c>
 80010ee:	f1c8 0420 	rsb	r4, r8, #32
 80010f2:	fa01 f308 	lsl.w	r3, r1, r8
 80010f6:	fa05 f508 	lsl.w	r5, r5, r8
 80010fa:	fa20 f704 	lsr.w	r7, r0, r4
 80010fe:	40e1      	lsrs	r1, r4
 8001100:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001104:	431f      	orrs	r7, r3
 8001106:	fbb1 f6fe 	udiv	r6, r1, lr
 800110a:	0c3a      	lsrs	r2, r7, #16
 800110c:	fb0e 1116 	mls	r1, lr, r6, r1
 8001110:	fa1f fc85 	uxth.w	ip, r5
 8001114:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8001118:	fb0c f206 	mul.w	r2, ip, r6
 800111c:	429a      	cmp	r2, r3
 800111e:	fa00 f408 	lsl.w	r4, r0, r8
 8001122:	d907      	bls.n	8001134 <__udivdi3+0x1f8>
 8001124:	195b      	adds	r3, r3, r5
 8001126:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800112a:	d237      	bcs.n	800119c <__udivdi3+0x260>
 800112c:	429a      	cmp	r2, r3
 800112e:	d935      	bls.n	800119c <__udivdi3+0x260>
 8001130:	3e02      	subs	r6, #2
 8001132:	442b      	add	r3, r5
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	b2bf      	uxth	r7, r7
 8001138:	fbb3 f0fe 	udiv	r0, r3, lr
 800113c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001140:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8001144:	fb0c f100 	mul.w	r1, ip, r0
 8001148:	4299      	cmp	r1, r3
 800114a:	d907      	bls.n	800115c <__udivdi3+0x220>
 800114c:	195b      	adds	r3, r3, r5
 800114e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001152:	d221      	bcs.n	8001198 <__udivdi3+0x25c>
 8001154:	4299      	cmp	r1, r3
 8001156:	d91f      	bls.n	8001198 <__udivdi3+0x25c>
 8001158:	3802      	subs	r0, #2
 800115a:	442b      	add	r3, r5
 800115c:	1a5a      	subs	r2, r3, r1
 800115e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001162:	4667      	mov	r7, ip
 8001164:	e750      	b.n	8001008 <__udivdi3+0xcc>
 8001166:	4610      	mov	r0, r2
 8001168:	e716      	b.n	8000f98 <__udivdi3+0x5c>
 800116a:	460b      	mov	r3, r1
 800116c:	e729      	b.n	8000fc2 <__udivdi3+0x86>
 800116e:	4613      	mov	r3, r2
 8001170:	e772      	b.n	8001058 <__udivdi3+0x11c>
 8001172:	40b0      	lsls	r0, r6
 8001174:	4290      	cmp	r0, r2
 8001176:	d2b7      	bcs.n	80010e8 <__udivdi3+0x1ac>
 8001178:	1e60      	subs	r0, r4, #1
 800117a:	2600      	movs	r6, #0
 800117c:	e724      	b.n	8000fc8 <__udivdi3+0x8c>
 800117e:	4630      	mov	r0, r6
 8001180:	e722      	b.n	8000fc8 <__udivdi3+0x8c>
 8001182:	42a9      	cmp	r1, r5
 8001184:	d995      	bls.n	80010b2 <__udivdi3+0x176>
 8001186:	f1a8 0802 	sub.w	r8, r8, #2
 800118a:	441d      	add	r5, r3
 800118c:	e792      	b.n	80010b4 <__udivdi3+0x178>
 800118e:	458c      	cmp	ip, r1
 8001190:	d9a0      	bls.n	80010d4 <__udivdi3+0x198>
 8001192:	3c02      	subs	r4, #2
 8001194:	4419      	add	r1, r3
 8001196:	e79e      	b.n	80010d6 <__udivdi3+0x19a>
 8001198:	4610      	mov	r0, r2
 800119a:	e7df      	b.n	800115c <__udivdi3+0x220>
 800119c:	460e      	mov	r6, r1
 800119e:	e7c9      	b.n	8001134 <__udivdi3+0x1f8>
 80011a0:	3802      	subs	r0, #2
 80011a2:	4429      	add	r1, r5
 80011a4:	e743      	b.n	800102e <__udivdi3+0xf2>
 80011a6:	bf00      	nop

080011a8 <CmdLED>:
    HAL_IncTick();
}


void CmdLED(int mode)
{
 80011a8:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 80011aa:	b9f8      	cbnz	r0, 80011ec <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 80011ac:	4668      	mov	r0, sp
 80011ae:	f000 fafb 	bl	80017a8 <fetch_uint32_arg>
  if(rc) {
 80011b2:	b108      	cbz	r0, 80011b8 <CmdLED+0x10>
    printf("Missing LED index\n");
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <CmdLED+0x4c>)
 80011b6:	e004      	b.n	80011c2 <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 80011b8:	a801      	add	r0, sp, #4
 80011ba:	f000 faf5 	bl	80017a8 <fetch_uint32_arg>
  if(rc) {
 80011be:	b118      	cbz	r0, 80011c8 <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <CmdLED+0x50>)
 80011c2:	f004 fddd 	bl	8005d80 <puts>
    return;
 80011c6:	e011      	b.n	80011ec <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 80011c8:	9900      	ldr	r1, [sp, #0]
 80011ca:	1ecb      	subs	r3, r1, #3
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	d903      	bls.n	80011d8 <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <CmdLED+0x54>)
 80011d2:	f004 fd85 	bl	8005ce0 <printf>
	   (unsigned int)led);
    return;
 80011d6:	e009      	b.n	80011ec <CmdLED+0x44>
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 80011da:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 80011dc:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 80011de:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 80011e0:	b111      	cbz	r1, 80011e8 <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 80011e2:	f004 f8d5 	bl	8005390 <BSP_LED_On>
 80011e6:	e001      	b.n	80011ec <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 80011e8:	f004 f8e0 	bl	80053ac <BSP_LED_Off>
  }

} 
 80011ec:	b003      	add	sp, #12
 80011ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80011f2:	bf00      	nop
 80011f4:	0800a620 	.word	0x0800a620
 80011f8:	0800a632 	.word	0x0800a632
 80011fc:	0800a65b 	.word	0x0800a65b
 8001200:	0800a7f2 	.word	0x0800a7f2

08001204 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 8001204:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8001206:	b958      	cbnz	r0, 8001220 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 8001208:	4668      	mov	r0, sp
 800120a:	f004 fa47 	bl	800569c <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <CmdAccel+0x24>)
 8001210:	f9bd 1000 	ldrsh.w	r1, [sp]
 8001214:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8001218:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800121c:	f004 fd60 	bl	8005ce0 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8001220:	b003      	add	sp, #12
 8001222:	f85d fb04 	ldr.w	pc, [sp], #4
 8001226:	bf00      	nop
 8001228:	0800a688 	.word	0x0800a688

0800122c <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 800122c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 800122e:	b9f8      	cbnz	r0, 8001270 <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8001230:	a801      	add	r0, sp, #4
 8001232:	f004 fa5d 	bl	80056f0 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 8001236:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001278 <CmdGyro+0x4c>
 800123a:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 800123e:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 8001242:	eddd 7a03 	vldr	s15, [sp, #12]
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <CmdGyro+0x50>)
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 8001248:	ee66 6a86 	vmul.f32	s13, s13, s12
	 (int)(xyz[1]*256),
 800124c:	ee27 7a06 	vmul.f32	s14, s14, s12
	 (int)(xyz[2]*256));
 8001250:	ee67 7a86 	vmul.f32	s15, s15, s12
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8001254:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8001258:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	ee16 1a90 	vmov	r1, s13
 8001264:	ee17 2a10 	vmov	r2, s14
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	f004 fd38 	bl	8005ce0 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8001270:	b005      	add	sp, #20
 8001272:	f85d fb04 	ldr.w	pc, [sp], #4
 8001276:	bf00      	nop
 8001278:	43800000 	.word	0x43800000
 800127c:	0800a6bb 	.word	0x0800a6bb

08001280 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8001280:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8001282:	b958      	cbnz	r0, 800129c <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8001284:	f004 f8da 	bl	800543c <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <CmdButton+0x20>)
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <CmdButton+0x24>)
 800128c:	2800      	cmp	r0, #0
 800128e:	bf18      	it	ne
 8001290:	4619      	movne	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8001294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 8001298:	f004 bd22 	b.w	8005ce0 <printf>
 800129c:	bd08      	pop	{r3, pc}
 800129e:	bf00      	nop
 80012a0:	0800a6ea 	.word	0x0800a6ea
 80012a4:	0800a6f2 	.word	0x0800a6f2
 80012a8:	0800a6fb 	.word	0x0800a6fb

080012ac <EXTI0_IRQHandler>:



/* USER CODE BEGIN EXTI0_IRQn 0 */
void EXTI0_IRQHandler(void)
{
 80012ac:	b508      	push	{r3, lr}
  /* removes bouncing effect of the push button */
  for(int i = 0; i<65000; i++);

  /* read GPIOA PIN 0 */
  if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	2101      	movs	r1, #1
 80012b4:	f001 fd12 	bl	8002cdc <HAL_GPIO_ReadPin>
 80012b8:	b140      	cbz	r0, 80012cc <EXTI0_IRQHandler+0x20>
   {
     if(ledDelay == 1000) ledDelay = 100;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <EXTI0_IRQHandler+0x2c>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80012c2:	bf0c      	ite	eq
 80012c4:	2264      	moveq	r2, #100	; 0x64
     else ledDelay = 1000;
 80012c6:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
 80012ca:	601a      	str	r2, [r3, #0]
   }

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012cc:	2001      	movs	r0, #1
}
 80012ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   {
     if(ledDelay == 1000) ledDelay = 100;
     else ledDelay = 1000;
   }

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012d2:	f001 bd13 	b.w	8002cfc <HAL_GPIO_EXTI_IRQHandler>
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000

080012dc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 80012de:	2003      	movs	r0, #3
 80012e0:	f004 f856 	bl	8005390 <BSP_LED_On>
  /* Infinite loop */
  while(1)
  {
  }
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <main>:
static void SystemClock_Config(void);
static void GPIO_Init(void);


int main(int argc, char **argv)
{
 80012e8:	b530      	push	{r4, r5, lr}
 80012ea:	b091      	sub	sp, #68	; 0x44
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ec:	2301      	movs	r3, #1
 80012ee:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fa:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012fc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80012fe:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001300:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001306:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001308:	f000 fedc 	bl	80020c4 <HAL_RCC_OscConfig>
 800130c:	bb10      	cbnz	r0, 8001354 <main+0x6c>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800130e:	230f      	movs	r3, #15
 8001310:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001314:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001318:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 800131a:	4621      	mov	r1, r4
 800131c:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001320:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8001322:	f001 f9b9 	bl	8002698 <HAL_RCC_ClockConfig>
 8001326:	4604      	mov	r4, r0
 8001328:	b9a0      	cbnz	r0, 8001354 <main+0x6c>

  /* Configure the system clock */
  SystemClock_Config();
  
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f001 fb81 	bl	8002a30 <HAL_Init>
  
  /* Start the Watchdog */
  TerminalInit();  /* Initialize UART and USB */
 800132e:	f000 fb73 	bl	8001a18 <TerminalInit>

  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
    BSP_LED_Init(LEDs[i]);
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <main+0x124>)
 8001334:	5d18      	ldrb	r0, [r3, r4]
  
  /* Start the Watchdog */
  TerminalInit();  /* Initialize UART and USB */

  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 8001336:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 8001338:	f003 fff6 	bl	8005328 <BSP_LED_Init>
  
  /* Start the Watchdog */
  TerminalInit();  /* Initialize UART and USB */

  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 800133c:	2c08      	cmp	r4, #8
 800133e:	d1f8      	bne.n	8001332 <main+0x4a>
    BSP_LED_Init(LEDs[i]);
  }

  /* Initialize the pushbutton */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001340:	2000      	movs	r0, #0
 8001342:	4601      	mov	r1, r0
 8001344:	f004 f840 	bl	80053c8 <BSP_PB_Init>

  /* Initialize the Accelerometer */
  accelRc = BSP_ACCELERO_Init();
 8001348:	f004 f990 	bl	800566c <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 800134c:	b120      	cbz	r0, 8001358 <main+0x70>
    printf("Failed to initialize acceleromter\n");
 800134e:	4830      	ldr	r0, [pc, #192]	; (8001410 <main+0x128>)
 8001350:	f004 fd16 	bl	8005d80 <puts>
    Error_Handler();
 8001354:	f7ff ffc2 	bl	80012dc <Error_Handler>
  }

  /* Initialize the Gyroscope */
  gyroRc = BSP_GYRO_Init();
 8001358:	f004 f9a8 	bl	80056ac <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 800135c:	4604      	mov	r4, r0
 800135e:	b108      	cbz	r0, 8001364 <main+0x7c>
    printf("Failed to initialize Gyroscope\n");
 8001360:	482c      	ldr	r0, [pc, #176]	; (8001414 <main+0x12c>)
 8001362:	e7f5      	b.n	8001350 <main+0x68>
{
 /* declare a GPIO struct to initialize all the GPIO registers */
 GPIO_InitTypeDef GPIO_InitStruct;

 /* GPIOE Ports Clock Enable */
 __GPIOE_CLK_ENABLE();
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <main+0x130>)
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800136c:	615a      	str	r2, [r3, #20]

 /* GPIOA Ports Clock Enable */
 __GPIOA_CLK_ENABLE();
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001374:	615a      	str	r2, [r3, #20]
  
 /*Configure GPIO pins : PA0 */  
 GPIO_InitStruct.Pin  = GPIO_PIN_0;
 8001376:	2501      	movs	r5, #1
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <main+0x134>)
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	9008      	str	r0, [sp, #32]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	a906      	add	r1, sp, #24
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 /* GPIOA Ports Clock Enable */
 __GPIOA_CLK_ENABLE();
  
 /*Configure GPIO pins : PA0 */  
 GPIO_InitStruct.Pin  = GPIO_PIN_0;
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001382:	9307      	str	r3, [sp, #28]

 /* GPIOA Ports Clock Enable */
 __GPIOA_CLK_ENABLE();
  
 /*Configure GPIO pins : PA0 */  
 GPIO_InitStruct.Pin  = GPIO_PIN_0;
 8001384:	9506      	str	r5, [sp, #24]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f001 fbe5 	bl	8002b54 <HAL_GPIO_Init>
 
 /*Configure GPIO pins : PE8 PE9 PE10 PE11 PE12 PE13 PE14 PE15 */
 GPIO_InitStruct.Pin   = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|
 800138a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
                         GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 GPIO_InitStruct.Pull  = GPIO_NOPULL;
 GPIO_InitStruct.Speed = GPIO_SPEED_LOW ;
 HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138e:	4824      	ldr	r0, [pc, #144]	; (8001420 <main+0x138>)
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 
 /*Configure GPIO pins : PE8 PE9 PE10 PE11 PE12 PE13 PE14 PE15 */
 GPIO_InitStruct.Pin   = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|
 8001390:	9306      	str	r3, [sp, #24]
                         GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 GPIO_InitStruct.Pull  = GPIO_NOPULL;
 GPIO_InitStruct.Speed = GPIO_SPEED_LOW ;
 HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001392:	a906      	add	r1, sp, #24
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 
 /*Configure GPIO pins : PE8 PE9 PE10 PE11 PE12 PE13 PE14 PE15 */
 GPIO_InitStruct.Pin   = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|
                         GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001394:	9507      	str	r5, [sp, #28]
 GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001396:	9408      	str	r4, [sp, #32]
 GPIO_InitStruct.Speed = GPIO_SPEED_LOW ;
 8001398:	9409      	str	r4, [sp, #36]	; 0x24
 HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139a:	f001 fbdb 	bl	8002b54 <HAL_GPIO_Init>

 /* EXTI interrupt init */
 HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800139e:	2006      	movs	r0, #6
 80013a0:	4621      	mov	r1, r4
 80013a2:	4622      	mov	r2, r4
 80013a4:	f001 fb84 	bl	8002ab0 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013a8:	2006      	movs	r0, #6
 80013aa:	f001 fbb1 	bl	8002b10 <HAL_NVIC_EnableIRQ>

  /* Initialize all configured peripherals */
  GPIO_Init();

  while(1) {
    TaskInput();
 80013ae:	f000 f965 	bl	800167c <TaskInput>
    /* Tickle the watchdog */

    /* Toggle all the configured LED pins on STM32 */
    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80013b2:	481b      	ldr	r0, [pc, #108]	; (8001420 <main+0x138>)
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	f001 fc9b 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 80013bc:	4818      	ldr	r0, [pc, #96]	; (8001420 <main+0x138>)
 80013be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c2:	f001 fc96 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 80013c6:	4816      	ldr	r0, [pc, #88]	; (8001420 <main+0x138>)
 80013c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013cc:	f001 fc91 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
 80013d0:	4813      	ldr	r0, [pc, #76]	; (8001420 <main+0x138>)
 80013d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d6:	f001 fc8c 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_12);
 80013da:	4811      	ldr	r0, [pc, #68]	; (8001420 <main+0x138>)
 80013dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e0:	f001 fc87 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_13);
 80013e4:	480e      	ldr	r0, [pc, #56]	; (8001420 <main+0x138>)
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	f001 fc82 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_14);
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <main+0x138>)
 80013f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f4:	f001 fc7d 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <main+0x138>)
 80013fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fe:	f001 fc78 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_Delay(ledDelay);
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <main+0x13c>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	f001 fb33 	bl	8002a70 <HAL_Delay>
  }
 800140a:	e7d0      	b.n	80013ae <main+0xc6>
 800140c:	0800a7f2 	.word	0x0800a7f2
 8001410:	0800a714 	.word	0x0800a714
 8001414:	0800a736 	.word	0x0800a736
 8001418:	40021000 	.word	0x40021000
 800141c:	10110000 	.word	0x10110000
 8001420:	48001000 	.word	0x48001000
 8001424:	20000000 	.word	0x20000000

08001428 <SysTick_Handler>:
}


void SysTick_Handler(void)
{
    HAL_IncTick();
 8001428:	f001 bb14 	b.w	8002a54 <HAL_IncTick>

0800142c <configureUSART>:
// PARAMETERS    : The function accepts a uint32_t 
// RETURNS       : returns nothing
void configureUSART(uint32_t val) {

//enable GPIOC clock
RCC->AHBENR 	|= RCC_AHBENR_GPIOCEN;  
 800142c:	4a35      	ldr	r2, [pc, #212]	; (8001504 <configureUSART+0xd8>)
 800142e:	6953      	ldr	r3, [r2, #20]
 8001430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
// FUNCTION      : configureUSART()
// DESCRIPTION   : The function configures the GPIOC and USART1
//                 send and receive data
// PARAMETERS    : The function accepts a uint32_t 
// RETURNS       : returns nothing
void configureUSART(uint32_t val) {
 8001434:	b510      	push	{r4, lr}

//enable GPIOC clock
RCC->AHBENR 	|= RCC_AHBENR_GPIOCEN;  
 8001436:	6153      	str	r3, [r2, #20]

//Configure PC4(TX) pin
GPIOC->MODER 	|= 0X00000200;             //GPIO Mode: Alternate function
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <configureUSART+0xdc>)
GPIOC->PUPDR   |= 0X00000400;              //PULL UP 
GPIOC->AFR [0] |= 0X00700000;              //AF7: Alternate function register

//Initialize the USART1
RCC->APB2ENR |= RCC_APB2ENR_USART1EN;      //CLK enable for USART1
USART1->BRR   = (72000000/9600) & 0XFFFF;  //f=8Mhz, Baud Rate: 9600
 800143a:	4c34      	ldr	r4, [pc, #208]	; (800150c <configureUSART+0xe0>)

//enable GPIOC clock
RCC->AHBENR 	|= RCC_AHBENR_GPIOCEN;  

//Configure PC4(TX) pin
GPIOC->MODER 	|= 0X00000200;             //GPIO Mode: Alternate function
 800143c:	6819      	ldr	r1, [r3, #0]
 800143e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001442:	6019      	str	r1, [r3, #0]
GPIOC->OTYPER 	|= 0X00000010;             //Output Type: Open Drain
 8001444:	6859      	ldr	r1, [r3, #4]
 8001446:	f041 0110 	orr.w	r1, r1, #16
 800144a:	6059      	str	r1, [r3, #4]
GPIOC->OSPEEDR 	|= 0X00000300;             //GPIO Speed: 50MHz    
 800144c:	6899      	ldr	r1, [r3, #8]
 800144e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8001452:	6099      	str	r1, [r3, #8]
GPIOC->PUPDR 	|= 0X00000100;             //PULL UP
 8001454:	68d9      	ldr	r1, [r3, #12]
 8001456:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800145a:	60d9      	str	r1, [r3, #12]
GPIOC->AFR [0] 	|= 0X00070000;             //AF7: Alternate function register
 800145c:	6a19      	ldr	r1, [r3, #32]
 800145e:	f441 21e0 	orr.w	r1, r1, #458752	; 0x70000
 8001462:	6219      	str	r1, [r3, #32]
	
//Configure PC5(RX) pin
GPIOC->MODER   |= 0X00000800;              //GPIO Mode: Alternate Functions
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800146a:	6019      	str	r1, [r3, #0]
GPIOC->OTYPER  |= 0X00000020;              //Output Type: Open Drain
 800146c:	6859      	ldr	r1, [r3, #4]
 800146e:	f041 0120 	orr.w	r1, r1, #32
 8001472:	6059      	str	r1, [r3, #4]
GPIOC->OSPEEDR |= 0X00000C00;              //GPIO Speed: 50MHz    
 8001474:	6899      	ldr	r1, [r3, #8]
 8001476:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
 800147a:	6099      	str	r1, [r3, #8]
GPIOC->PUPDR   |= 0X00000400;              //PULL UP 
 800147c:	68d9      	ldr	r1, [r3, #12]
 800147e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001482:	60d9      	str	r1, [r3, #12]
GPIOC->AFR [0] |= 0X00700000;              //AF7: Alternate function register
 8001484:	6a19      	ldr	r1, [r3, #32]
 8001486:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800148a:	6219      	str	r1, [r3, #32]

//Initialize the USART1
RCC->APB2ENR |= RCC_APB2ENR_USART1EN;      //CLK enable for USART1
 800148c:	6993      	ldr	r3, [r2, #24]
 800148e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001492:	6193      	str	r3, [r2, #24]
USART1->BRR   = (72000000/9600) & 0XFFFF;  //f=8Mhz, Baud Rate: 9600
 8001494:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8001498:	60e3      	str	r3, [r4, #12]
USART1->CR1  &= ~USART_CR1_OVER8;     	   //Oversampling mode = 16
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014a0:	6023      	str	r3, [r4, #0]
USART1->CR1  &= ~USART_CR1_M;              //Word length = 8 bits
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014a8:	6023      	str	r3, [r4, #0]
USART1->CR1  &= ~USART_CR1_PCE;            //No parity
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014b0:	6023      	str	r3, [r4, #0]
USART1->CR1  |= USART_CR1_TE;              //Transmitter enable
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	6023      	str	r3, [r4, #0]
USART1->CR1  |= USART_CR1_RE;              //Receiver enable
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6023      	str	r3, [r4, #0]
USART1->CR1  |= USART_CR1_UE;	           //USART enable
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6023      	str	r3, [r4, #0]
USART1->CR2  &= ~(USART_CR2_STOP_1 | USART_CR2_STOP_0); // one stop bit
 80014ca:	6863      	ldr	r3, [r4, #4]

//transmit data
USART1->TDR = val;
 80014cc:	b280      	uxth	r0, r0
USART1->CR1  &= ~USART_CR1_M;              //Word length = 8 bits
USART1->CR1  &= ~USART_CR1_PCE;            //No parity
USART1->CR1  |= USART_CR1_TE;              //Transmitter enable
USART1->CR1  |= USART_CR1_RE;              //Receiver enable
USART1->CR1  |= USART_CR1_UE;	           //USART enable
USART1->CR2  &= ~(USART_CR2_STOP_1 | USART_CR2_STOP_0); // one stop bit
 80014ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014d2:	6063      	str	r3, [r4, #4]

//transmit data
USART1->TDR = val;
 80014d4:	8520      	strh	r0, [r4, #40]	; 0x28
printf("Transmit data = %x\n", USART1->TDR);
 80014d6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <configureUSART+0xe4>)
 80014da:	b289      	uxth	r1, r1
 80014dc:	f004 fc00 	bl	8005ce0 <printf>

//wait for TX
while ((USART1->ISR & USART_ISR_TC) == 0);
 80014e0:	69e3      	ldr	r3, [r4, #28]
 80014e2:	0659      	lsls	r1, r3, #25
 80014e4:	d5fc      	bpl.n	80014e0 <configureUSART+0xb4>

//Wait until the data is ready to be received
while ((USART1->ISR & USART_ISR_RXNE) == 0);
 80014e6:	69e2      	ldr	r2, [r4, #28]
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <configureUSART+0xe0>)
 80014ea:	0692      	lsls	r2, r2, #26
 80014ec:	d5fb      	bpl.n	80014e6 <configureUSART+0xba>

// read RX data, combine with DR mask (we only accept a max of 9 Bits)
USART1->RDR = USART1->RDR & 0x1FF;
 80014ee:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
printf("Recieve data = %x\n", USART1->RDR);
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <configureUSART+0xe8>)

//Wait until the data is ready to be received
while ((USART1->ISR & USART_ISR_RXNE) == 0);

// read RX data, combine with DR mask (we only accept a max of 9 Bits)
USART1->RDR = USART1->RDR & 0x1FF;
 80014f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014f6:	849a      	strh	r2, [r3, #36]	; 0x24
printf("Recieve data = %x\n", USART1->RDR);
 80014f8:	8c99      	ldrh	r1, [r3, #36]	; 0x24

}
 80014fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//Wait until the data is ready to be received
while ((USART1->ISR & USART_ISR_RXNE) == 0);

// read RX data, combine with DR mask (we only accept a max of 9 Bits)
USART1->RDR = USART1->RDR & 0x1FF;
printf("Recieve data = %x\n", USART1->RDR);
 80014fe:	b289      	uxth	r1, r1
 8001500:	f004 bbee 	b.w	8005ce0 <printf>
 8001504:	40021000 	.word	0x40021000
 8001508:	48000800 	.word	0x48000800
 800150c:	40013800 	.word	0x40013800
 8001510:	0800a7fa 	.word	0x0800a7fa
 8001514:	0800a80e 	.word	0x0800a80e

08001518 <CmdUSART>:
// FUNCTION      : cmdUSART()
// DESCRIPTION   : The function accepts the input terminal command
//                 'usart' and data to Tx and Rx
// PARAMETERS    : The function accepts an int parameter
// RETURNS       : returns nothing
void CmdUSART(int mode){
 8001518:	b507      	push	{r0, r1, r2, lr}
	
        uint32_t val;
        int rc;

	if(mode != CMD_INTERACTIVE) {
 800151a:	b950      	cbnz	r0, 8001532 <CmdUSART+0x1a>
    	 return;
  	}

        rc = fetch_uint32_arg(&val);
 800151c:	a801      	add	r0, sp, #4
 800151e:	f000 f943 	bl	80017a8 <fetch_uint32_arg>

        if(rc) {
 8001522:	b118      	cbz	r0, 800152c <CmdUSART+0x14>
         printf("Missing Transmit data\n");
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <CmdUSART+0x20>)
 8001526:	f004 fc2b 	bl	8005d80 <puts>
         return;
 800152a:	e002      	b.n	8001532 <CmdUSART+0x1a>
        }
    
        configureUSART(val);
 800152c:	9801      	ldr	r0, [sp, #4]
 800152e:	f7ff ff7d 	bl	800142c <configureUSART>
        
}
 8001532:	b003      	add	sp, #12
 8001534:	f85d fb04 	ldr.w	pc, [sp], #4
 8001538:	0800a821 	.word	0x0800a821

0800153c <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 800153c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 800153e:	b940      	cbnz	r0, 8001552 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8001540:	4668      	mov	r0, sp
 8001542:	f000 f931 	bl	80017a8 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8001546:	a801      	add	r0, sp, #4
 8001548:	f000 f92e 	bl	80017a8 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 800154c:	9b00      	ldr	r3, [sp, #0]
 800154e:	9a01      	ldr	r2, [sp, #4]
 8001550:	601a      	str	r2, [r3, #0]
}
 8001552:	b003      	add	sp, #12
 8001554:	f85d fb04 	ldr.w	pc, [sp], #4

08001558 <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 8001558:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 800155a:	b938      	cbnz	r0, 800156c <CmdR+0x14>

  fetch_uint32_arg(&addr);
 800155c:	a801      	add	r0, sp, #4
 800155e:	f000 f923 	bl	80017a8 <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 8001562:	9901      	ldr	r1, [sp, #4]
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <CmdR+0x1c>)
 8001566:	680a      	ldr	r2, [r1, #0]
 8001568:	f004 fbba 	bl	8005ce0 <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 800156c:	b003      	add	sp, #12
 800156e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001572:	bf00      	nop
 8001574:	0800a84f 	.word	0x0800a84f

08001578 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8001578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800157c:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 800157e:	b908      	cbnz	r0, 8001584 <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8001580:	4833      	ldr	r0, [pc, #204]	; (8001650 <parse+0xd8>)
 8001582:	e020      	b.n	80015c6 <parse+0x4e>
    return -1;
  }

  if(len==0) {
 8001584:	b909      	cbnz	r1, 800158a <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 8001586:	4833      	ldr	r0, [pc, #204]	; (8001654 <parse+0xdc>)
 8001588:	e01d      	b.n	80015c6 <parse+0x4e>
    return -1;
  }

  if(table == NULL) {
 800158a:	b122      	cbz	r2, 8001596 <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <parse+0xe0>)
 800158e:	1e4c      	subs	r4, r1, #1
 8001590:	681e      	ldr	r6, [r3, #0]
 8001592:	4603      	mov	r3, r0
 8001594:	e00a      	b.n	80015ac <parse+0x34>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8001596:	4831      	ldr	r0, [pc, #196]	; (800165c <parse+0xe4>)
 8001598:	e015      	b.n	80015c6 <parse+0x4e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800159a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d04d      	beq.n	800163e <parse+0xc6>
 80015a2:	4432      	add	r2, r6
 80015a4:	3c01      	subs	r4, #1
 80015a6:	7852      	ldrb	r2, [r2, #1]
 80015a8:	0712      	lsls	r2, r2, #28
 80015aa:	d54b      	bpl.n	8001644 <parse+0xcc>
 80015ac:	1c67      	adds	r7, r4, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	4621      	mov	r1, r4
 80015b2:	d1f2      	bne.n	800159a <parse+0x22>
  if((i==0) || (*buf==0)) {
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d047      	beq.n	800164a <parse+0xd2>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 80015ba:	4929      	ldr	r1, [pc, #164]	; (8001660 <parse+0xe8>)
 80015bc:	f004 fd12 	bl	8005fe4 <strtok>
  if(p==NULL) {
 80015c0:	4606      	mov	r6, r0
 80015c2:	b910      	cbnz	r0, 80015ca <parse+0x52>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80015c4:	4827      	ldr	r0, [pc, #156]	; (8001664 <parse+0xec>)
 80015c6:	4928      	ldr	r1, [pc, #160]	; (8001668 <parse+0xf0>)
 80015c8:	e037      	b.n	800163a <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 80015ca:	4928      	ldr	r1, [pc, #160]	; (800166c <parse+0xf4>)
 80015cc:	f004 fc5c 	bl	8005e88 <strcasecmp>
 80015d0:	4604      	mov	r4, r0
 80015d2:	b9a0      	cbnz	r0, 80015fe <parse+0x86>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 80015d4:	4922      	ldr	r1, [pc, #136]	; (8001660 <parse+0xe8>)
 80015d6:	f004 fd05 	bl	8005fe4 <strtok>
    if(p == NULL) {
 80015da:	4606      	mov	r6, r0
 80015dc:	b990      	cbnz	r0, 8001604 <parse+0x8c>
 80015de:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 80015e0:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80015e4:	b389      	cbz	r1, 800164a <parse+0xd2>
	if(t->help != NULL) {
 80015e6:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80015ea:	b11a      	cbz	r2, 80015f4 <parse+0x7c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80015ec:	4820      	ldr	r0, [pc, #128]	; (8001670 <parse+0xf8>)
 80015ee:	f004 fb77 	bl	8005ce0 <printf>
 80015f2:	e7f4      	b.n	80015de <parse+0x66>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80015f4:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80015f8:	2001      	movs	r0, #1
 80015fa:	4798      	blx	r3
 80015fc:	e7ef      	b.n	80015de <parse+0x66>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80015fe:	f04f 0800 	mov.w	r8, #0
 8001602:	e009      	b.n	8001618 <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 8001604:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8001608:	e006      	b.n	8001618 <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 800160a:	4630      	mov	r0, r6
 800160c:	4639      	mov	r1, r7
 800160e:	f004 fc3b 	bl	8005e88 <strcasecmp>
 8001612:	4604      	mov	r4, r0
 8001614:	b120      	cbz	r0, 8001620 <parse+0xa8>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8001616:	350c      	adds	r5, #12
 8001618:	682f      	ldr	r7, [r5, #0]
 800161a:	2f00      	cmp	r7, #0
 800161c:	d1f5      	bne.n	800160a <parse+0x92>
 800161e:	e00a      	b.n	8001636 <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8001620:	f1b8 0f00 	cmp.w	r8, #0
 8001624:	d003      	beq.n	800162e <parse+0xb6>
	printf("%s:\n",t->cmdname);
 8001626:	4813      	ldr	r0, [pc, #76]	; (8001674 <parse+0xfc>)
 8001628:	4639      	mov	r1, r7
 800162a:	f004 fb59 	bl	8005ce0 <printf>
      }
      t->func(arg);
 800162e:	686b      	ldr	r3, [r5, #4]
 8001630:	4640      	mov	r0, r8
 8001632:	4798      	blx	r3
      return 0;
 8001634:	e009      	b.n	800164a <parse+0xd2>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8001636:	4810      	ldr	r0, [pc, #64]	; (8001678 <parse+0x100>)
 8001638:	4631      	mov	r1, r6
 800163a:	f004 fb51 	bl	8005ce0 <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 800163e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001642:	e002      	b.n	800164a <parse+0xd2>


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
  if((i==0) || (*buf==0)) {
 8001644:	2900      	cmp	r1, #0
 8001646:	d1b8      	bne.n	80015ba <parse+0x42>
 8001648:	e7f9      	b.n	800163e <parse+0xc6>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 800164a:	4620      	mov	r0, r4
 800164c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001650:	0800a89a 	.word	0x0800a89a
 8001654:	0800a8bb 	.word	0x0800a8bb
 8001658:	200001fc 	.word	0x200001fc
 800165c:	0800a8cb 	.word	0x0800a8cb
 8001660:	0800a8ee 	.word	0x0800a8ee
 8001664:	0800a8f5 	.word	0x0800a8f5
 8001668:	0800a97e 	.word	0x0800a97e
 800166c:	0800a925 	.word	0x0800a925
 8001670:	0800a92a 	.word	0x0800a92a
 8001674:	0800a936 	.word	0x0800a936
 8001678:	0800a93b 	.word	0x0800a93b

0800167c <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 800167c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 800167e:	4d3f      	ldr	r5, [pc, #252]	; (800177c <TaskInput+0x100>)
 8001680:	682b      	ldr	r3, [r5, #0]
 8001682:	b123      	cbz	r3, 800168e <TaskInput+0x12>
    printf("ARMON>");
 8001684:	483e      	ldr	r0, [pc, #248]	; (8001780 <TaskInput+0x104>)
 8001686:	f004 fb2b 	bl	8005ce0 <printf>
    printPrompt = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 800168e:	f10d 0007 	add.w	r0, sp, #7
 8001692:	f000 fa32 	bl	8001afa <TerminalReadAnyNonBlock>
  if(rc) {
 8001696:	2800      	cmp	r0, #0
 8001698:	d16e      	bne.n	8001778 <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 800169a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d001      	beq.n	80016a6 <TaskInput+0x2a>
 80016a2:	2b7f      	cmp	r3, #127	; 0x7f
 80016a4:	d10d      	bne.n	80016c2 <TaskInput+0x46>
 80016a6:	4c37      	ldr	r4, [pc, #220]	; (8001784 <TaskInput+0x108>)
 80016a8:	6822      	ldr	r2, [r4, #0]
 80016aa:	b152      	cbz	r2, 80016c2 <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 80016ac:	4836      	ldr	r0, [pc, #216]	; (8001788 <TaskInput+0x10c>)
 80016ae:	f004 fb17 	bl	8005ce0 <printf>
    buf--;     /* Then remove it from the buffer */
 80016b2:	4a36      	ldr	r2, [pc, #216]	; (800178c <TaskInput+0x110>)
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	6023      	str	r3, [r4, #0]
 80016c0:	e05a      	b.n	8001778 <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 80016c2:	2b21      	cmp	r3, #33	; 0x21
 80016c4:	d115      	bne.n	80016f2 <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <TaskInput+0x114>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d054      	beq.n	8001778 <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 80016ce:	4c31      	ldr	r4, [pc, #196]	; (8001794 <TaskInput+0x118>)
 80016d0:	4931      	ldr	r1, [pc, #196]	; (8001798 <TaskInput+0x11c>)
 80016d2:	4620      	mov	r0, r4
 80016d4:	f004 fbfa 	bl	8005ecc <strcpy>
      printf("%s",input);
 80016d8:	4621      	mov	r1, r4
 80016da:	4830      	ldr	r0, [pc, #192]	; (800179c <TaskInput+0x120>)
 80016dc:	f004 fb00 	bl	8005ce0 <printf>
      count = strlen(input);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f004 fc51 	bl	8005f88 <strlen>
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <TaskInput+0x108>)
 80016e8:	6018      	str	r0, [r3, #0]
      buf = input+count;
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <TaskInput+0x110>)
 80016ec:	4404      	add	r4, r0
 80016ee:	601c      	str	r4, [r3, #0]
      goto parseme;
 80016f0:	e025      	b.n	800173e <TaskInput+0xc2>
    }
  } else if(isprint((unsigned int)c)) {
 80016f2:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <TaskInput+0x124>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	441a      	add	r2, r3
 80016f8:	7852      	ldrb	r2, [r2, #1]
 80016fa:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 80016fe:	d012      	beq.n	8001726 <TaskInput+0xaa>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 8001700:	4920      	ldr	r1, [pc, #128]	; (8001784 <TaskInput+0x108>)
 8001702:	680a      	ldr	r2, [r1, #0]
 8001704:	2a4f      	cmp	r2, #79	; 0x4f
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 8001706:	bf9f      	itttt	ls
 8001708:	4c20      	ldrls	r4, [pc, #128]	; (800178c <TaskInput+0x110>)
 800170a:	6820      	ldrls	r0, [r4, #0]
 800170c:	7003      	strbls	r3, [r0, #0]
 800170e:	1c45      	addls	r5, r0, #1
      count++;
 8001710:	bf97      	itett	ls
 8001712:	3201      	addls	r2, #1
    }
  } else if(isprint((unsigned int)c)) {
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
 8001714:	2007      	movhi	r0, #7
      return;
    } else {
      *buf++ = c;
      count++;
      /* Echo it back to the user */
      printf("%c",c);
 8001716:	f89d 0007 	ldrbls.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 800171a:	6025      	strls	r5, [r4, #0]
      count++;
 800171c:	bf98      	it	ls
 800171e:	600a      	strls	r2, [r1, #0]
      /* Echo it back to the user */
      printf("%c",c);
 8001720:	f004 faf2 	bl	8005d08 <putchar>
 8001724:	e028      	b.n	8001778 <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 8001726:	2b0d      	cmp	r3, #13
 8001728:	d126      	bne.n	8001778 <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 800172c:	481a      	ldr	r0, [pc, #104]	; (8001798 <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800172e:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001730:	4918      	ldr	r1, [pc, #96]	; (8001794 <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001732:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001734:	f004 fbca 	bl	8005ecc <strcpy>
    saved = 1;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <TaskInput+0x114>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 800173e:	200a      	movs	r0, #10
 8001740:	4c12      	ldr	r4, [pc, #72]	; (800178c <TaskInput+0x110>)
 8001742:	f004 fae1 	bl	8005d08 <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <TaskInput+0x108>)
 8001748:	6820      	ldr	r0, [r4, #0]
 800174a:	681e      	ldr	r6, [r3, #0]
 800174c:	4602      	mov	r2, r0
 800174e:	1a31      	subs	r1, r6, r0
 8001750:	4411      	add	r1, r2
 8001752:	294f      	cmp	r1, #79	; 0x4f
 8001754:	f04f 0100 	mov.w	r1, #0
 8001758:	d802      	bhi.n	8001760 <TaskInput+0xe4>
 800175a:	f802 1b01 	strb.w	r1, [r2], #1
 800175e:	e7f6      	b.n	800174e <TaskInput+0xd2>
    count = 0;
 8001760:	6019      	str	r1, [r3, #0]
    parse(input, sizeof(input), Commands);
 8001762:	4e0c      	ldr	r6, [pc, #48]	; (8001794 <TaskInput+0x118>)
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <TaskInput+0x128>)
 8001766:	6022      	str	r2, [r4, #0]
 8001768:	4630      	mov	r0, r6
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2150      	movs	r1, #80	; 0x50
 800176e:	f7ff ff03 	bl	8001578 <parse>
    buf = input;
    printPrompt = 1;
 8001772:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 8001774:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8001776:	602b      	str	r3, [r5, #0]
  }
}
 8001778:	b002      	add	sp, #8
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	20000008 	.word	0x20000008
 8001780:	0800a970 	.word	0x0800a970
 8001784:	20000ab8 	.word	0x20000ab8
 8001788:	0800a977 	.word	0x0800a977
 800178c:	20000004 	.word	0x20000004
 8001790:	20000abc 	.word	0x20000abc
 8001794:	20000f48 	.word	0x20000f48
 8001798:	20000ef8 	.word	0x20000ef8
 800179c:	0800a97b 	.word	0x0800a97b
 80017a0:	200001fc 	.word	0x200001fc
 80017a4:	2000000c 	.word	0x2000000c

080017a8 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80017a8:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80017ac:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f004 fc18 	bl	8005fe4 <strtok>
  if(p == NULL) {
 80017b4:	b130      	cbz	r0, 80017c4 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 80017b6:	2100      	movs	r1, #0
 80017b8:	460a      	mov	r2, r1
 80017ba:	f004 fce1 	bl	8006180 <strtoul>
 80017be:	6020      	str	r0, [r4, #0]
  return 0;
 80017c0:	2000      	movs	r0, #0
 80017c2:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	bf00      	nop
 80017cc:	0800a8ee 	.word	0x0800a8ee

080017d0 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80017d0:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80017d2:	4906      	ldr	r1, [pc, #24]	; (80017ec <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80017d4:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f004 fc04 	bl	8005fe4 <strtok>
  if(p == NULL) {
 80017dc:	b110      	cbz	r0, 80017e4 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 80017de:	6020      	str	r0, [r4, #0]
  return 0;
 80017e0:	2000      	movs	r0, #0
 80017e2:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	bf00      	nop
 80017ec:	0800a8ee 	.word	0x0800a8ee

080017f0 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 80017f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f4:	4680      	mov	r8, r0
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 80017fa:	460d      	mov	r5, r1
 80017fc:	2900      	cmp	r1, #0
 80017fe:	d044      	beq.n	800188a <DumpBuffer+0x9a>
 8001800:	ac03      	add	r4, sp, #12
 8001802:	eb00 0901 	add.w	r9, r0, r1
 8001806:	4606      	mov	r6, r0
 8001808:	4627      	mov	r7, r4
 800180a:	ebc8 010a 	rsb	r1, r8, sl

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 800180e:	454e      	cmp	r6, r9
 8001810:	4431      	add	r1, r6
 8001812:	ebc8 0306 	rsb	r3, r8, r6
 8001816:	d025      	beq.n	8001864 <DumpBuffer+0x74>
    if((i% BYTES_PER_LINE) == 0) {
 8001818:	f013 0b0f 	ands.w	fp, r3, #15
 800181c:	d103      	bne.n	8001826 <DumpBuffer+0x36>
      printf("%08x:",(unsigned int)address);
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <DumpBuffer+0xa0>)
 8001820:	f004 fa5e 	bl	8005ce0 <printf>
      bufp = buf;
 8001824:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <DumpBuffer+0xa4>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 8001828:	f816 1b01 	ldrb.w	r1, [r6], #1
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 800182c:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800182e:	481a      	ldr	r0, [pc, #104]	; (8001898 <DumpBuffer+0xa8>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001830:	440b      	add	r3, r1
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8001838:	bf08      	it	eq
 800183a:	222e      	moveq	r2, #46	; 0x2e
 800183c:	f104 0301 	add.w	r3, r4, #1
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 8001840:	bf14      	ite	ne
 8001842:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 8001844:	7022      	strbeq	r2, [r4, #0]
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	461c      	mov	r4, r3
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800184a:	f004 fa49 	bl	8005ce0 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 800184e:	f1bb 0f0f 	cmp.w	fp, #15
 8001852:	9b01      	ldr	r3, [sp, #4]
 8001854:	d1d9      	bne.n	800180a <DumpBuffer+0x1a>
      *bufp = '\0';  /* NULL terminate buffer */
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 800185a:	4639      	mov	r1, r7
 800185c:	480f      	ldr	r0, [pc, #60]	; (800189c <DumpBuffer+0xac>)
 800185e:	f004 fa3f 	bl	8005ce0 <printf>
 8001862:	e7d2      	b.n	800180a <DumpBuffer+0x1a>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8001864:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 8001866:	f015 050f 	ands.w	r5, r5, #15
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 800186a:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 800186c:	d00d      	beq.n	800188a <DumpBuffer+0x9a>
 800186e:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001870:	f1c5 0310 	rsb	r3, r5, #16
 8001874:	429c      	cmp	r4, r3
 8001876:	d204      	bcs.n	8001882 <DumpBuffer+0x92>
      printf("   ");
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <DumpBuffer+0xb0>)
 800187a:	f004 fa31 	bl	8005ce0 <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800187e:	3401      	adds	r4, #1
 8001880:	e7f6      	b.n	8001870 <DumpBuffer+0x80>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <DumpBuffer+0xac>)
 8001884:	4639      	mov	r1, r7
 8001886:	f004 fa2b 	bl	8005ce0 <printf>
  }



}
 800188a:	b009      	add	sp, #36	; 0x24
 800188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001890:	0800a984 	.word	0x0800a984
 8001894:	200001fc 	.word	0x200001fc
 8001898:	0800a98a 	.word	0x0800a98a
 800189c:	0800a990 	.word	0x0800a990
 80018a0:	0800a996 	.word	0x0800a996

080018a4 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 80018a4:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 80018a6:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 80018a8:	d01d      	beq.n	80018e6 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 80018aa:	2802      	cmp	r0, #2
 80018ac:	4c0e      	ldr	r4, [pc, #56]	; (80018e8 <CmdDump+0x44>)
 80018ae:	4d0f      	ldr	r5, [pc, #60]	; (80018ec <CmdDump+0x48>)
 80018b0:	d109      	bne.n	80018c6 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 80018b2:	480f      	ldr	r0, [pc, #60]	; (80018f0 <CmdDump+0x4c>)
 80018b4:	f004 fa64 	bl	8005d80 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80018b8:	6821      	ldr	r1, [r4, #0]
 80018ba:	682a      	ldr	r2, [r5, #0]
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 80018be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80018c2:	f004 ba0d 	b.w	8005ce0 <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff ff6e 	bl	80017a8 <fetch_uint32_arg>
  if(rc == 0) {
 80018cc:	b910      	cbnz	r0, 80018d4 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 80018ce:	4628      	mov	r0, r5
 80018d0:	f7ff ff6a 	bl	80017a8 <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 80018d4:	6820      	ldr	r0, [r4, #0]
 80018d6:	6829      	ldr	r1, [r5, #0]
 80018d8:	4602      	mov	r2, r0
 80018da:	f7ff ff89 	bl	80017f0 <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	682a      	ldr	r2, [r5, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	6023      	str	r3, [r4, #0]
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	20000ac0 	.word	0x20000ac0
 80018ec:	20000010 	.word	0x20000010
 80018f0:	0800a99a 	.word	0x0800a99a
 80018f4:	0800ab32 	.word	0x0800ab32

080018f8 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 80018f8:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <_sbrk_r+0x2c>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	b90a      	cbnz	r2, 8001904 <_sbrk_r+0xc>
                heap_end = &end;
 8001900:	4a09      	ldr	r2, [pc, #36]	; (8001928 <_sbrk_r+0x30>)
 8001902:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8001904:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8001906:	466b      	mov	r3, sp
 8001908:	4401      	add	r1, r0
 800190a:	4299      	cmp	r1, r3
 800190c:	d906      	bls.n	800191c <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 800190e:	f004 f96b 	bl	8005be8 <__errno>
 8001912:	230c      	movs	r3, #12
 8001914:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8001916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191a:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 800191c:	4b01      	ldr	r3, [pc, #4]	; (8001924 <_sbrk_r+0x2c>)
 800191e:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8001920:	bd08      	pop	{r3, pc}
 8001922:	bf00      	nop
 8001924:	20000ac4 	.word	0x20000ac4
 8001928:	20001ce4 	.word	0x20001ce4

0800192c <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001930:	4770      	bx	lr

08001932 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8001932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001936:	6053      	str	r3, [r2, #4]
        return 0;
}
 8001938:	2000      	movs	r0, #0
 800193a:	4770      	bx	lr

0800193c <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 800193c:	2001      	movs	r0, #1
 800193e:	4770      	bx	lr

08001940 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8001940:	2000      	movs	r0, #0
 8001942:	4770      	bx	lr

08001944 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <USBD_CDC_DataIn+0x74>)
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001946:	b570      	push	{r4, r5, r6, lr}
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001948:	681b      	ldr	r3, [r3, #0]
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800194a:	4604      	mov	r4, r0
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 800194c:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <USBD_CDC_DataIn+0x78>)
 8001950:	429c      	cmp	r4, r3
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001952:	4606      	mov	r6, r0

  if(pdev == &hUSBDDevice) {
 8001954:	d12d      	bne.n	80019b2 <USBD_CDC_DataIn+0x6e>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <USBD_CDC_DataIn+0x7c>)
 8001958:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 800195c:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8001960:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 8001962:	fa12 f181 	uxtah	r1, r2, r1
 8001966:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800196a:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 800196e:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 8001972:	1a8a      	subs	r2, r1, r2
 8001974:	b292      	uxth	r2, r2
 8001976:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 800197a:	2200      	movs	r2, #0
 800197c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8001980:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 8001984:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8001988:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
    TerminalState[index].outCount -= count;
    TerminalState[index].outSending = 0;

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 800198a:	b289      	uxth	r1, r1
 800198c:	461c      	mov	r4, r3
    count = TerminalState[index].outCount;
    if(count != 0) {
 800198e:	b182      	cbz	r2, 80019b2 <USBD_CDC_DataIn+0x6e>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 8001990:	188b      	adds	r3, r1, r2
 8001992:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 8001994:	bf88      	it	hi
 8001996:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 800199a:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 800199c:	4421      	add	r1, r4
    if(count != 0) {
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
	count = TERMINALBUFFERSIZE - tail;
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 800199e:	3186      	adds	r1, #134	; 0x86
 80019a0:	462a      	mov	r2, r5
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <USBD_CDC_DataIn+0x78>)
 80019a4:	f003 fa1d 	bl	8004de2 <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <USBD_CDC_DataIn+0x78>)
 80019aa:	f003 fa28 	bl	8004dfe <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 80019ae:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 80019b2:	4630      	mov	r0, r6
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
 80019b6:	bf00      	nop
 80019b8:	200011bc 	.word	0x200011bc
 80019bc:	20000f98 	.word	0x20000f98
 80019c0:	20000ac8 	.word	0x20000ac8

080019c4 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 80019c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 80019c8:	4604      	mov	r4, r0

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 80019ca:	b085      	sub	sp, #20
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 80019cc:	b9e8      	cbnz	r0, 8001a0a <CmdStats+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ce:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80019d0:	480f      	ldr	r0, [pc, #60]	; (8001a10 <CmdStats+0x4c>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80019d2:	4621      	mov	r1, r4
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80019d4:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 80019d8:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
 80019dc:	f8d0 9118 	ldr.w	r9, [r0, #280]	; 0x118
 80019e0:	f8d0 811c 	ldr.w	r8, [r0, #284]	; 0x11c
 80019e4:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80019e8:	2214      	movs	r2, #20
 80019ea:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80019ee:	f004 f929 	bl	8005c44 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80019f2:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <CmdStats+0x50>)
 80019f6:	f8cd 9000 	str.w	r9, [sp]
 80019fa:	f8cd 8004 	str.w	r8, [sp, #4]
 80019fe:	9702      	str	r7, [sp, #8]
 8001a00:	4621      	mov	r1, r4
 8001a02:	4632      	mov	r2, r6
 8001a04:	462b      	mov	r3, r5
 8001a06:	f004 f96b 	bl	8005ce0 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8001a0a:	b005      	add	sp, #20
 8001a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a10:	20000ac8 	.word	0x20000ac8
 8001a14:	0800ab80 	.word	0x0800ab80

08001a18 <TerminalInit>:
/* Private functions */
uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len);
uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len);

void TerminalInit(void)
{
 8001a18:	b510      	push	{r4, lr}
#ifdef USE_UART
  GPIO_InitTypeDef  GPIO_InitStruct;
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
 8001a1a:	4c17      	ldr	r4, [pc, #92]	; (8001a78 <TerminalInit+0x60>)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6858      	ldr	r0, [r3, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	460b      	mov	r3, r1
 8001a26:	f004 f9b3 	bl	8005d90 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	6898      	ldr	r0, [r3, #8]
 8001a30:	2202      	movs	r2, #2
 8001a32:	460b      	mov	r3, r1
 8001a34:	f004 f9ac 	bl	8005d90 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8001a38:	6823      	ldr	r3, [r4, #0]
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001a3a:	4c10      	ldr	r4, [pc, #64]	; (8001a7c <TerminalInit+0x64>)
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
 8001a3c:	68d8      	ldr	r0, [r3, #12]
 8001a3e:	2100      	movs	r1, #0
 8001a40:	460b      	mov	r3, r1
 8001a42:	2202      	movs	r2, #2
 8001a44:	f004 f9a4 	bl	8005d90 <setvbuf>
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	490d      	ldr	r1, [pc, #52]	; (8001a80 <TerminalInit+0x68>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f002 fde5 	bl	800461c <USBD_Init>
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
 8001a52:	490c      	ldr	r1, [pc, #48]	; (8001a84 <TerminalInit+0x6c>)
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <TerminalInit+0x70>)
 8001a56:	694a      	ldr	r2, [r1, #20]
 8001a58:	601a      	str	r2, [r3, #0]
  USBD_CDC.DataIn = USBD_CDC_DataIn;
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8001a5a:	4620      	mov	r0, r4
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <TerminalInit+0x74>)
 8001a5e:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8001a60:	f002 fdf1 	bl	8004646 <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8001a64:	4620      	mov	r0, r4
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <TerminalInit+0x78>)
 8001a68:	f003 f9b4 	bl	8004dd4 <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8001a6c:	4620      	mov	r0, r4
#endif

}
 8001a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8001a72:	f002 bdef 	b.w	8004654 <USBD_Start>
 8001a76:	bf00      	nop
 8001a78:	20000628 	.word	0x20000628
 8001a7c:	20000f98 	.word	0x20000f98
 8001a80:	20000128 	.word	0x20000128
 8001a84:	2000005c 	.word	0x2000005c
 8001a88:	200011bc 	.word	0x200011bc
 8001a8c:	08001945 	.word	0x08001945
 8001a90:	20000168 	.word	0x20000168

08001a94 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a96:	b672      	cpsid	i
 8001a98:	440a      	add	r2, r1
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8001a9a:	460e      	mov	r6, r1
 8001a9c:	4f0f      	ldr	r7, [pc, #60]	; (8001adc <TerminalRead+0x48>)
 8001a9e:	f44f 7592 	mov.w	r5, #292	; 0x124
 8001aa2:	4345      	muls	r5, r0
 8001aa4:	197c      	adds	r4, r7, r5
 8001aa6:	3480      	adds	r4, #128	; 0x80
 8001aa8:	88a3      	ldrh	r3, [r4, #4]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	ebc1 0e06 	rsb	lr, r1, r6
 8001ab0:	b183      	cbz	r3, 8001ad4 <TerminalRead+0x40>
 8001ab2:	4296      	cmp	r6, r2
 8001ab4:	d00e      	beq.n	8001ad4 <TerminalRead+0x40>
    tail   = TerminalState[index].inTail;
 8001ab6:	8863      	ldrh	r3, [r4, #2]
 8001ab8:	b29b      	uxth	r3, r3
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001aba:	441d      	add	r5, r3
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001abc:	3301      	adds	r3, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001abe:	5d7d      	ldrb	r5, [r7, r5]
 8001ac0:	f806 5b01 	strb.w	r5, [r6], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac8:	8063      	strh	r3, [r4, #2]
    TerminalState[index].inCount--;
 8001aca:	88a3      	ldrh	r3, [r4, #4]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	80a3      	strh	r3, [r4, #4]
 8001ad2:	e7e3      	b.n	8001a9c <TerminalRead+0x8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001ad4:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8001ad6:	4670      	mov	r0, lr
 8001ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000ac8 	.word	0x20000ac8

08001ae0 <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f7ff bfd5 	b.w	8001a94 <TerminalRead>

08001aea <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 8001aea:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8001aec:	2201      	movs	r2, #1
 8001aee:	f7ff ffd1 	bl	8001a94 <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 8001af2:	fab0 f080 	clz	r0, r0
 8001af6:	0940      	lsrs	r0, r0, #5
 8001af8:	bd08      	pop	{r3, pc}

08001afa <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 8001afa:	4601      	mov	r1, r0
 8001afc:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fff3 	bl	8001aea <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 8001b04:	3000      	adds	r0, #0
 8001b06:	bf18      	it	ne
 8001b08:	2001      	movne	r0, #1
 8001b0a:	bd08      	pop	{r3, pc}

08001b0c <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	4e37      	ldr	r6, [pc, #220]	; (8001bec <TerminalOutputBufferWrite+0xe0>)
 8001b10:	f44f 7392 	mov.w	r3, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001b14:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001b16:	fb03 6300 	mla	r3, r3, r0, r6
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001b1a:	d906      	bls.n	8001b2a <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001b1c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001b20:	3201      	adds	r2, #1
 8001b22:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8001b26:	2001      	movs	r0, #1
 8001b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001b2a:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8001b2e:	fa12 f484 	uxtah	r4, r2, r4
 8001b32:	2c7f      	cmp	r4, #127	; 0x7f
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8001b34:	bf82      	ittt	hi
 8001b36:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8001b3a:	3401      	addhi	r4, #1
 8001b3c:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8001b40:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001b44:	fb03 6300 	mla	r3, r3, r0, r6
 8001b48:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8001b4c:	fa12 f484 	uxtah	r4, r2, r4
 8001b50:	2c7f      	cmp	r4, #127	; 0x7f
 8001b52:	d8f5      	bhi.n	8001b40 <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8001b56:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8001b5a:	4414      	add	r4, r2
 8001b5c:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 8001b60:	440a      	add	r2, r1
  while((len != 0) 
 8001b62:	4291      	cmp	r1, r2
 8001b64:	d01c      	beq.n	8001ba0 <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001b66:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001b6a:	fb03 6300 	mla	r3, r3, r0, r6
 8001b6e:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8001b72:	886c      	ldrh	r4, [r5, #2]
 8001b74:	b2a4      	uxth	r4, r4
 8001b76:	2c7f      	cmp	r4, #127	; 0x7f
 8001b78:	d812      	bhi.n	8001ba0 <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8001b7a:	f8b3 4106 	ldrh.w	r4, [r3, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8001b7e:	f811 eb01 	ldrb.w	lr, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8001b82:	b2a4      	uxth	r4, r4
 8001b84:	f503 7780 	add.w	r7, r3, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8001b88:	4423      	add	r3, r4
    TerminalState[index].outHead = TERMINALINCR(head);
 8001b8a:	3401      	adds	r4, #1
 8001b8c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8001b90:	80fc      	strh	r4, [r7, #6]
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8001b92:	f883 e086 	strb.w	lr, [r3, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
 8001b96:	886b      	ldrh	r3, [r5, #2]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	806b      	strh	r3, [r5, #2]
 8001b9e:	e7e0      	b.n	8001b62 <TerminalOutputBufferWrite+0x56>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8001ba0:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001ba4:	fb03 6300 	mla	r3, r3, r0, r6
 8001ba8:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8001bac:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8001bae:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8001bb2:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8001bb4:	1953      	adds	r3, r2, r5
 8001bb6:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8001bb8:	bf88      	it	hi
 8001bba:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  }
  switch(index) {
 8001bbe:	b990      	cbnz	r0, 8001be6 <TerminalOutputBufferWrite+0xda>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8001bc0:	4f0b      	ldr	r7, [pc, #44]	; (8001bf0 <TerminalOutputBufferWrite+0xe4>)
 8001bc2:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d10d      	bne.n	8001be6 <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001bca:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8001bcc:	1971      	adds	r1, r6, r5
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001bce:	4638      	mov	r0, r7
 8001bd0:	3186      	adds	r1, #134	; 0x86
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	f003 f905 	bl	8004de2 <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8001bd8:	4638      	mov	r0, r7
 8001bda:	f003 f910 	bl	8004dfe <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8001bde:	b910      	cbnz	r0, 8001be6 <TerminalOutputBufferWrite+0xda>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <TerminalOutputBufferWrite+0xe0>)
 8001be2:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001be6:	b662      	cpsie	i
 8001be8:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8001bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bec:	20000ac8 	.word	0x20000ac8
 8001bf0:	20000f98 	.word	0x20000f98

08001bf4 <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8001bfc:	42bc      	cmp	r4, r7
 8001bfe:	4626      	mov	r6, r4
 8001c00:	d00f      	beq.n	8001c22 <_write_r+0x2e>
    if(*ptr == '\n') {
 8001c02:	7833      	ldrb	r3, [r6, #0]
 8001c04:	2b0a      	cmp	r3, #10
 8001c06:	f104 0401 	add.w	r4, r4, #1
 8001c0a:	d104      	bne.n	8001c16 <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	4906      	ldr	r1, [pc, #24]	; (8001c28 <_write_r+0x34>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	f7ff ff7b 	bl	8001b0c <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8001c16:	4631      	mov	r1, r6
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff ff76 	bl	8001b0c <TerminalOutputBufferWrite>
 8001c20:	e7ec      	b.n	8001bfc <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8001c22:	4628      	mov	r0, r5
 8001c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	0800a8f3 	.word	0x0800a8f3

08001c2c <TerminalInputBufferWrite>:
  __enable_irq();
  return 0;
}

uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t head;

  /* Critical Section begin */
  //__disable_irq();
  /* Check that our block will fit, if not, return fail */
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001c2e:	4d1a      	ldr	r5, [pc, #104]	; (8001c98 <TerminalInputBufferWrite+0x6c>)
 8001c30:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001c34:	fb03 5300 	mla	r3, r3, r0, r5
 8001c38:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 8001c3c:	fa12 f484 	uxtah	r4, r2, r4
 8001c40:	2c7f      	cmp	r4, #127	; 0x7f
 8001c42:	d906      	bls.n	8001c52 <TerminalInputBufferWrite+0x26>
    //__enable_irq();
    TerminalState[index].stats.receiveTooBig++;
 8001c44:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8001c48:	3201      	adds	r2, #1
 8001c4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    return 1;
 8001c4e:	2001      	movs	r0, #1
 8001c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
 8001c52:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001c56:	4414      	add	r4, r2
 8001c58:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 8001c5c:	440a      	add	r2, r1
  while(len != 0) {
 8001c5e:	4291      	cmp	r1, r2
 8001c60:	d017      	beq.n	8001c92 <TerminalInputBufferWrite+0x66>
    head = TerminalState[index].inHead;
 8001c62:	f44f 7492 	mov.w	r4, #292	; 0x124
 8001c66:	4344      	muls	r4, r0
 8001c68:	192f      	adds	r7, r5, r4
    TerminalState[index].inBuffer[head] = *p++;
 8001c6a:	f811 eb01 	ldrb.w	lr, [r1], #1
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 8001c6e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001c72:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8001c74:	441c      	add	r4, r3
    TerminalState[index].inHead = TERMINALINCR(head);
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c7c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    TerminalState[index].inCount++;
 8001c80:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
    TerminalState[index].inBuffer[head] = *p++;
 8001c84:	f805 e004 	strb.w	lr, [r5, r4]
    TerminalState[index].inHead = TERMINALINCR(head);
    TerminalState[index].inCount++;
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8001c90:	e7e5      	b.n	8001c5e <TerminalInputBufferWrite+0x32>
    len--;
  }
  
  /* Critical section end */
  //__enable_irq();
  return 0;
 8001c92:	2000      	movs	r0, #0
}
 8001c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000ac8 	.word	0x20000ac8

08001c9c <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8001c9c:	4801      	ldr	r0, [pc, #4]	; (8001ca4 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001c9e:	f001 bc59 	b.w	8003554 <HAL_PCD_IRQHandler>
 8001ca2:	bf00      	nop
 8001ca4:	200011c0 	.word	0x200011c0

08001ca8 <DecodeReadRegister>:
#include "decoder.h"


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001ca8:	b510      	push	{r4, lr}
 8001caa:	460b      	mov	r3, r1
  uint32_t address, val;

  if(p == NULL) return 0;
 8001cac:	4604      	mov	r4, r0
 8001cae:	b1b0      	cbz	r0, 8001cde <DecodeReadRegister+0x36>
  if(r == NULL) return 0;
 8001cb0:	b1b1      	cbz	r1, 8001ce0 <DecodeReadRegister+0x38>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8001cb2:	8888      	ldrh	r0, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8001cb4:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8001cb6:	6862      	ldr	r2, [r4, #4]

  /* read register according to size */
  switch(r->size) {
 8001cb8:	2910      	cmp	r1, #16
 8001cba:	d005      	beq.n	8001cc8 <DecodeReadRegister+0x20>
 8001cbc:	2920      	cmp	r1, #32
 8001cbe:	d005      	beq.n	8001ccc <DecodeReadRegister+0x24>
 8001cc0:	2908      	cmp	r1, #8
 8001cc2:	d105      	bne.n	8001cd0 <DecodeReadRegister+0x28>
  case 8:
    val = *(uint8_t *)address;
 8001cc4:	5c80      	ldrb	r0, [r0, r2]
    break;
 8001cc6:	bd10      	pop	{r4, pc}
  case 16:
    val = *(uint16_t *)address;
 8001cc8:	5a80      	ldrh	r0, [r0, r2]
    break;  
 8001cca:	bd10      	pop	{r4, pc}
  case 32:
    val = *(uint32_t *)address;
 8001ccc:	5880      	ldr	r0, [r0, r2]
    break;
 8001cce:	bd10      	pop	{r4, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <DecodeReadRegister+0x3c>)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	f004 f803 	bl	8005ce0 <printf>
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 0;
 8001cda:	2000      	movs	r0, #0
 8001cdc:	bd10      	pop	{r4, pc}
 8001cde:	bd10      	pop	{r4, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 8001ce0:	4608      	mov	r0, r1
	   r->name,
	   p->name);
    return 0;
  }
  return val;
}
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	0800ac2a 	.word	0x0800ac2a

08001ce8 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8001ce8:	b538      	push	{r3, r4, r5, lr}
 8001cea:	460b      	mov	r3, r1
  uint32_t address;

  if(p == NULL) return 1;
 8001cec:	4604      	mov	r4, r0
 8001cee:	b1a8      	cbz	r0, 8001d1c <DecodeWriteRegister+0x34>
  if(r == NULL) return 1;
 8001cf0:	b1a1      	cbz	r1, 8001d1c <DecodeWriteRegister+0x34>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8001cf2:	888d      	ldrh	r5, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8001cf4:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8001cf6:	6840      	ldr	r0, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8001cf8:	2910      	cmp	r1, #16
 8001cfa:	d005      	beq.n	8001d08 <DecodeWriteRegister+0x20>
 8001cfc:	2920      	cmp	r1, #32
 8001cfe:	d005      	beq.n	8001d0c <DecodeWriteRegister+0x24>
 8001d00:	2908      	cmp	r1, #8
 8001d02:	d106      	bne.n	8001d12 <DecodeWriteRegister+0x2a>
  case 8:
    *(uint8_t *)address = val;
 8001d04:	542a      	strb	r2, [r5, r0]
 8001d06:	e002      	b.n	8001d0e <DecodeWriteRegister+0x26>
    break;
  case 16:
    *(uint16_t *)address = val;
 8001d08:	522a      	strh	r2, [r5, r0]
 8001d0a:	e000      	b.n	8001d0e <DecodeWriteRegister+0x26>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8001d0c:	502a      	str	r2, [r5, r0]
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
 8001d0e:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 8001d10:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DecodeWriteRegister+0x38>)
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	f003 ffe2 	bl	8005ce0 <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 8001d1c:	2001      	movs	r0, #1
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
}
 8001d1e:	bd38      	pop	{r3, r4, r5, pc}
 8001d20:	0800ac2a 	.word	0x0800ac2a

08001d24 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8001d24:	b530      	push	{r4, r5, lr}
 8001d26:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 8001d28:	b198      	cbz	r0, 8001d52 <DecodeField+0x2e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001d2a:	7944      	ldrb	r4, [r0, #5]
 8001d2c:	7905      	ldrb	r5, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <DecodeField+0x34>)
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001d30:	2201      	movs	r2, #1
 8001d32:	40a2      	lsls	r2, r4
 8001d34:	40e9      	lsrs	r1, r5
 8001d36:	3a01      	subs	r2, #1
 8001d38:	400a      	ands	r2, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001d3a:	6801      	ldr	r1, [r0, #0]
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <DecodeField+0x38>)
 8001d3e:	9400      	str	r4, [sp, #0]
 8001d40:	2c01      	cmp	r4, #1
 8001d42:	bf98      	it	ls
 8001d44:	4603      	movls	r3, r0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	9502      	str	r5, [sp, #8]
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <DecodeField+0x3c>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	f003 ffc7 	bl	8005ce0 <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8001d52:	b005      	add	sp, #20
 8001d54:	bd30      	pop	{r4, r5, pc}
 8001d56:	bf00      	nop
 8001d58:	0800ac5e 	.word	0x0800ac5e
 8001d5c:	0800ac64 	.word	0x0800ac64
 8001d60:	0800ac6a 	.word	0x0800ac6a

08001d64 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d66:	4616      	mov	r6, r2
 8001d68:	461d      	mov	r5, r3
  Field_t const *f;
  
  if(r == NULL) return;
 8001d6a:	4604      	mov	r4, r0
 8001d6c:	b1d8      	cbz	r0, 8001da6 <DecodeRegister+0x42>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001d6e:	7983      	ldrb	r3, [r0, #6]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	8883      	ldrh	r3, [r0, #4]
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <DecodeRegister+0x48>)
	 r->name,
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001d76:	4419      	add	r1, r3
  Field_t const *f;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001d78:	9101      	str	r1, [sp, #4]
 8001d7a:	6821      	ldr	r1, [r4, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	f003 ffaf 	bl	8005ce0 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001d82:	68a4      	ldr	r4, [r4, #8]
 8001d84:	b144      	cbz	r4, 8001d98 <DecodeRegister+0x34>
 8001d86:	b175      	cbz	r5, 8001da6 <DecodeRegister+0x42>
    for(f = r->fields; f->name != NULL; f++) {
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	b133      	cbz	r3, 8001d9a <DecodeRegister+0x36>
      DecodeField(f,val);
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	4631      	mov	r1, r6
 8001d90:	f7ff ffc8 	bl	8001d24 <DecodeField>
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    for(f = r->fields; f->name != NULL; f++) {
 8001d94:	3408      	adds	r4, #8
 8001d96:	e7f7      	b.n	8001d88 <DecodeRegister+0x24>
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
 8001d98:	b12d      	cbz	r5, 8001da6 <DecodeRegister+0x42>
    printf("\n");
 8001d9a:	200a      	movs	r0, #10
  }

}
 8001d9c:	b002      	add	sp, #8
 8001d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    for(f = r->fields; f->name != NULL; f++) {
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
    printf("\n");
 8001da2:	f003 bfb1 	b.w	8005d08 <putchar>
  }

}
 8001da6:	b002      	add	sp, #8
 8001da8:	bd70      	pop	{r4, r5, r6, pc}
 8001daa:	bf00      	nop
 8001dac:	0800ac93 	.word	0x0800ac93

08001db0 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;

  if(p == NULL) return;
 8001db4:	4605      	mov	r5, r0
 8001db6:	b1a8      	cbz	r0, 8001de4 <DecodePeripheral+0x34>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <DecodePeripheral+0x38>)
 8001dba:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001dbe:	f003 ff8f 	bl	8005ce0 <printf>
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001dc2:	68ac      	ldr	r4, [r5, #8]
 8001dc4:	b904      	cbnz	r4, 8001dc8 <DecodePeripheral+0x18>
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}
    for(r = p->registers; r->name != NULL; r++) {
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	b15b      	cbz	r3, 8001de4 <DecodePeripheral+0x34>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8001dcc:	4621      	mov	r1, r4
 8001dce:	4628      	mov	r0, r5
 8001dd0:	f7ff ff6a 	bl	8001ca8 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8001dd4:	6869      	ldr	r1, [r5, #4]

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8001dd6:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8001dd8:	4633      	mov	r3, r6
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff ffc2 	bl	8001d64 <DecodeRegister>
  printf("Peripheral %-13s: Base address: 0x%08x\n",
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
 8001de0:	340c      	adds	r4, #12
 8001de2:	e7f1      	b.n	8001dc8 <DecodePeripheral+0x18>
 8001de4:	bd70      	pop	{r4, r5, r6, pc}
 8001de6:	bf00      	nop
 8001de8:	0800acce 	.word	0x0800acce

08001dec <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8001df0:	2009      	movs	r0, #9
 8001df2:	f003 ff89 	bl	8005d08 <putchar>

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 8001df6:	2408      	movs	r4, #8
  printf("\t");
  for(; p->name != NULL; p++) {
 8001df8:	6829      	ldr	r1, [r5, #0]
 8001dfa:	b189      	cbz	r1, 8001e20 <DecodePrintPeripherals+0x34>
    col += printf("%s",p->name);
 8001dfc:	4809      	ldr	r0, [pc, #36]	; (8001e24 <DecodePrintPeripherals+0x38>)
 8001dfe:	f003 ff6f 	bl	8005ce0 <printf>
    if((p+1)->name != NULL) {
 8001e02:	68eb      	ldr	r3, [r5, #12]
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
 8001e04:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8001e06:	b14b      	cbz	r3, 8001e1c <DecodePrintPeripherals+0x30>
      col += printf(", ");
 8001e08:	4807      	ldr	r0, [pc, #28]	; (8001e28 <DecodePrintPeripherals+0x3c>)
 8001e0a:	f003 ff69 	bl	8005ce0 <printf>
 8001e0e:	4404      	add	r4, r0
      if(col > 70) {
 8001e10:	2c46      	cmp	r4, #70	; 0x46
 8001e12:	d903      	bls.n	8001e1c <DecodePrintPeripherals+0x30>
	col = 8;
	printf("\n\t");
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <DecodePrintPeripherals+0x40>)
 8001e16:	f003 ff63 	bl	8005ce0 <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8001e1a:	2408      	movs	r4, #8
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
 8001e1c:	350c      	adds	r5, #12
 8001e1e:	e7eb      	b.n	8001df8 <DecodePrintPeripherals+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
 8001e22:	bf00      	nop
 8001e24:	0800a97b 	.word	0x0800a97b
 8001e28:	0800ac67 	.word	0x0800ac67
 8001e2c:	0800acf6 	.word	0x0800acf6

08001e30 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r) {
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001e34:	2009      	movs	r0, #9
 8001e36:	f003 ff67 	bl	8005d08 <putchar>
  }
}

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
 8001e3a:	2408      	movs	r4, #8
  printf("\t");
  for(; r->name != NULL; r++) {
 8001e3c:	6829      	ldr	r1, [r5, #0]
 8001e3e:	b199      	cbz	r1, 8001e68 <DecodePrintRegisters+0x38>
    col += printf("%s",r->name);
 8001e40:	480a      	ldr	r0, [pc, #40]	; (8001e6c <DecodePrintRegisters+0x3c>)
 8001e42:	f003 ff4d 	bl	8005ce0 <printf>
    if((r+1)->name != NULL) {
 8001e46:	68eb      	ldr	r3, [r5, #12]
void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
 8001e48:	4420      	add	r0, r4
 8001e4a:	b2c4      	uxtb	r4, r0
    if((r+1)->name != NULL) {
 8001e4c:	b153      	cbz	r3, 8001e64 <DecodePrintRegisters+0x34>
      col += printf(", ");
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <DecodePrintRegisters+0x40>)
 8001e50:	f003 ff46 	bl	8005ce0 <printf>
 8001e54:	4420      	add	r0, r4
 8001e56:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8001e58:	2c46      	cmp	r4, #70	; 0x46
 8001e5a:	d903      	bls.n	8001e64 <DecodePrintRegisters+0x34>
	col = 8;
	printf("\n\t");
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <DecodePrintRegisters+0x44>)
 8001e5e:	f003 ff3f 	bl	8005ce0 <printf>
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
    if((r+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8001e62:	2408      	movs	r4, #8

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
 8001e64:	350c      	adds	r5, #12
 8001e66:	e7e9      	b.n	8001e3c <DecodePrintRegisters+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8001e68:	bd38      	pop	{r3, r4, r5, pc}
 8001e6a:	bf00      	nop
 8001e6c:	0800a97b 	.word	0x0800a97b
 8001e70:	0800ac67 	.word	0x0800ac67
 8001e74:	0800acf6 	.word	0x0800acf6

08001e78 <CmdDecode>:

void CmdDecode(int mode)
{
 8001e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8001e7c:	2802      	cmp	r0, #2
    }
  }
}

void CmdDecode(int mode)
{
 8001e7e:	b086      	sub	sp, #24
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8001e80:	d118      	bne.n	8001eb4 <CmdDecode+0x3c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8001e82:	a805      	add	r0, sp, #20
 8001e84:	f7ff fca4 	bl	80017d0 <fetch_string_arg>
    if(rc) {
 8001e88:	b910      	cbnz	r0, 8001e90 <CmdDecode+0x18>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8001e8a:	9e05      	ldr	r6, [sp, #20]
 8001e8c:	4c65      	ldr	r4, [pc, #404]	; (8002024 <CmdDecode+0x1ac>)
 8001e8e:	e00d      	b.n	8001eac <CmdDecode+0x34>
  if(mode == CMD_LONG_HELP) {
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
    if(rc) {
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8001e90:	4865      	ldr	r0, [pc, #404]	; (8002028 <CmdDecode+0x1b0>)
 8001e92:	f003 ff75 	bl	8005d80 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8001e96:	4863      	ldr	r0, [pc, #396]	; (8002024 <CmdDecode+0x1ac>)
 8001e98:	f7ff ffa8 	bl	8001dec <DecodePrintPeripherals>
      printf("\n\n"
 8001e9c:	4863      	ldr	r0, [pc, #396]	; (800202c <CmdDecode+0x1b4>)
 8001e9e:	e036      	b.n	8001f0e <CmdDecode+0x96>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	f003 fff0 	bl	8005e88 <strcasecmp>
 8001ea8:	b308      	cbz	r0, 8001eee <CmdDecode+0x76>
	p++;
 8001eaa:	340c      	adds	r4, #12
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8001eac:	6825      	ldr	r5, [r4, #0]
 8001eae:	2d00      	cmp	r5, #0
 8001eb0:	d1f6      	bne.n	8001ea0 <CmdDecode+0x28>
 8001eb2:	e014      	b.n	8001ede <CmdDecode+0x66>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8001eb4:	a802      	add	r0, sp, #8
 8001eb6:	f7ff fc8b 	bl	80017d0 <fetch_string_arg>
  if(rc) {
 8001eba:	b910      	cbnz	r0, 8001ec2 <CmdDecode+0x4a>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8001ebc:	9e02      	ldr	r6, [sp, #8]
 8001ebe:	4c59      	ldr	r4, [pc, #356]	; (8002024 <CmdDecode+0x1ac>)
 8001ec0:	e009      	b.n	8001ed6 <CmdDecode+0x5e>
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
  if(rc) {
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8001ec2:	485b      	ldr	r0, [pc, #364]	; (8002030 <CmdDecode+0x1b8>)
 8001ec4:	f003 ff5c 	bl	8005d80 <puts>
 8001ec8:	e01d      	b.n	8001f06 <CmdDecode+0x8e>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8001eca:	4630      	mov	r0, r6
 8001ecc:	f003 ffdc 	bl	8005e88 <strcasecmp>
 8001ed0:	4605      	mov	r5, r0
 8001ed2:	b1f8      	cbz	r0, 8001f14 <CmdDecode+0x9c>
    p++;
 8001ed4:	340c      	adds	r4, #12
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8001ed6:	6821      	ldr	r1, [r4, #0]
 8001ed8:	2900      	cmp	r1, #0
 8001eda:	d1f6      	bne.n	8001eca <CmdDecode+0x52>
 8001edc:	e00f      	b.n	8001efe <CmdDecode+0x86>
	p++;
      }

      if(p->name == NULL) {
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8001ede:	4631      	mov	r1, r6
 8001ee0:	4854      	ldr	r0, [pc, #336]	; (8002034 <CmdDecode+0x1bc>)
 8001ee2:	f003 fefd 	bl	8005ce0 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
      DecodePrintPeripherals(Peripherals);
 8001ee6:	484f      	ldr	r0, [pc, #316]	; (8002024 <CmdDecode+0x1ac>)
 8001ee8:	f7ff ff80 	bl	8001dec <DecodePrintPeripherals>
	return;
 8001eec:	e097      	b.n	800201e <CmdDecode+0x1a6>
      }
      printf("Valid registers for peripheral %s:\n"
 8001eee:	4852      	ldr	r0, [pc, #328]	; (8002038 <CmdDecode+0x1c0>)
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f003 fef5 	bl	8005ce0 <printf>
	     "\n",
	     p->name);
      DecodePrintRegisters(p->registers);
 8001ef6:	68a0      	ldr	r0, [r4, #8]
 8001ef8:	f7ff ff9a 	bl	8001e30 <DecodePrintRegisters>
 8001efc:	e006      	b.n	8001f0c <CmdDecode+0x94>
    p++;
  }

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8001efe:	484f      	ldr	r0, [pc, #316]	; (800203c <CmdDecode+0x1c4>)
 8001f00:	4631      	mov	r1, r6
 8001f02:	f003 feed 	bl	8005ce0 <printf>
	   pname);
    DecodePrintPeripherals(Peripherals);
 8001f06:	4847      	ldr	r0, [pc, #284]	; (8002024 <CmdDecode+0x1ac>)
 8001f08:	f7ff ff70 	bl	8001dec <DecodePrintPeripherals>
    printf("\n\n");
 8001f0c:	484c      	ldr	r0, [pc, #304]	; (8002040 <CmdDecode+0x1c8>)
 8001f0e:	f003 ff37 	bl	8005d80 <puts>
    return;
 8001f12:	e084      	b.n	800201e <CmdDecode+0x1a6>
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8001f14:	a803      	add	r0, sp, #12
 8001f16:	f7ff fc5b 	bl	80017d0 <fetch_string_arg>
  if(rc) {
 8001f1a:	b110      	cbz	r0, 8001f22 <CmdDecode+0xaa>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	e00f      	b.n	8001f42 <CmdDecode+0xca>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8001f22:	68a5      	ldr	r5, [r4, #8]
  while((r->name != NULL) && strcasecmp(rname,r->name)) {
 8001f24:	9e03      	ldr	r6, [sp, #12]
 8001f26:	6829      	ldr	r1, [r5, #0]
 8001f28:	4630      	mov	r0, r6
 8001f2a:	b121      	cbz	r1, 8001f36 <CmdDecode+0xbe>
 8001f2c:	f003 ffac 	bl	8005e88 <strcasecmp>
 8001f30:	b150      	cbz	r0, 8001f48 <CmdDecode+0xd0>
    r++;
 8001f32:	350c      	adds	r5, #12
 8001f34:	e7f7      	b.n	8001f26 <CmdDecode+0xae>
  }

  if(r->name == NULL) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 8001f36:	4943      	ldr	r1, [pc, #268]	; (8002044 <CmdDecode+0x1cc>)
 8001f38:	f003 ffa6 	bl	8005e88 <strcasecmp>
 8001f3c:	bb08      	cbnz	r0, 8001f82 <CmdDecode+0x10a>
      DecodePeripheral(p,1);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	2101      	movs	r1, #1
 8001f42:	f7ff ff35 	bl	8001db0 <DecodePeripheral>
      return;
 8001f46:	e06a      	b.n	800201e <CmdDecode+0x1a6>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8001f48:	a804      	add	r0, sp, #16
 8001f4a:	f7ff fc41 	bl	80017d0 <fetch_string_arg>
  if(rc == 0) {
 8001f4e:	b960      	cbnz	r0, 8001f6a <CmdDecode+0xf2>
    /* There was something... see if it matches a field name */
    f = r->fields;
 8001f50:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
 8001f52:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001f56:	6837      	ldr	r7, [r6, #0]
 8001f58:	2f00      	cmp	r7, #0
 8001f5a:	d043      	beq.n	8001fe4 <CmdDecode+0x16c>
 8001f5c:	4640      	mov	r0, r8
 8001f5e:	4639      	mov	r1, r7
 8001f60:	f003 ff92 	bl	8005e88 <strcasecmp>
 8001f64:	b198      	cbz	r0, 8001f8e <CmdDecode+0x116>
      f++;
 8001f66:	3608      	adds	r6, #8
 8001f68:	e7f5      	b.n	8001f56 <CmdDecode+0xde>
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7ff fe9b 	bl	8001ca8 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8001f72:	6861      	ldr	r1, [r4, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8001f74:	9005      	str	r0, [sp, #20]
 8001f76:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 8001f78:	2301      	movs	r3, #1
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	f7ff fef2 	bl	8001d64 <DecodeRegister>
 8001f80:	e04d      	b.n	800201e <CmdDecode+0x1a6>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8001f82:	4631      	mov	r1, r6
 8001f84:	6822      	ldr	r2, [r4, #0]
 8001f86:	4830      	ldr	r0, [pc, #192]	; (8002048 <CmdDecode+0x1d0>)
 8001f88:	f003 feaa 	bl	8005ce0 <printf>
 8001f8c:	e7b3      	b.n	8001ef6 <CmdDecode+0x7e>
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
      f++;
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8001f8e:	a805      	add	r0, sp, #20
 8001f90:	f7ff fc0a 	bl	80017a8 <fetch_uint32_arg>
      if(rc) {
 8001f94:	b110      	cbz	r0, 8001f9c <CmdDecode+0x124>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8001f96:	482d      	ldr	r0, [pc, #180]	; (800204c <CmdDecode+0x1d4>)
 8001f98:	6829      	ldr	r1, [r5, #0]
 8001f9a:	e032      	b.n	8002002 <CmdDecode+0x18a>
	       r->name);
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff fe82 	bl	8001ca8 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 8001fa4:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 8001fa6:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8001faa:	9905      	ldr	r1, [sp, #20]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	4093      	lsls	r3, r2

      oval = (t >> f->offset) & m; /* Save old value */
 8001fb0:	fa20 f70e 	lsr.w	r7, r0, lr
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8001fb4:	3b01      	subs	r3, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8001fb6:	fa03 f20e 	lsl.w	r2, r3, lr
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 8001fba:	401f      	ands	r7, r3

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	fa03 f30e 	lsl.w	r3, r3, lr
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8001fc2:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff fe8c 	bl	8001ce8 <DecodeWriteRegister>
      printf("%s.%s.%s (%d) -> (%d)\n",
 8001fd0:	9b05      	ldr	r3, [sp, #20]
 8001fd2:	9700      	str	r7, [sp, #0]
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	6821      	ldr	r1, [r4, #0]
 8001fd8:	682a      	ldr	r2, [r5, #0]
 8001fda:	6833      	ldr	r3, [r6, #0]
 8001fdc:	481c      	ldr	r0, [pc, #112]	; (8002050 <CmdDecode+0x1d8>)
 8001fde:	f003 fe7f 	bl	8005ce0 <printf>
	     p->name, r->name, f->name,
	     (unsigned)oval, (unsigned)val);
      return;
 8001fe2:	e01c      	b.n	800201e <CmdDecode+0x1a6>

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8001fe4:	f003 fe00 	bl	8005be8 <__errno>
    val = strtoul(fname,NULL,0);
 8001fe8:	4639      	mov	r1, r7
	     (unsigned)oval, (unsigned)val);
      return;

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8001fea:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8001fec:	463a      	mov	r2, r7
 8001fee:	9804      	ldr	r0, [sp, #16]
 8001ff0:	f004 f8c6 	bl	8006180 <strtoul>
 8001ff4:	9005      	str	r0, [sp, #20]
    if(errno != 0) {
 8001ff6:	f003 fdf7 	bl	8005be8 <__errno>
 8001ffa:	6803      	ldr	r3, [r0, #0]
 8001ffc:	b123      	cbz	r3, 8002008 <CmdDecode+0x190>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 8001ffe:	4815      	ldr	r0, [pc, #84]	; (8002054 <CmdDecode+0x1dc>)
 8002000:	9904      	ldr	r1, [sp, #16]
 8002002:	f003 fe6d 	bl	8005ce0 <printf>
	     fname);
      return;
 8002006:	e00a      	b.n	800201e <CmdDecode+0x1a6>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8002008:	4629      	mov	r1, r5
 800200a:	9a05      	ldr	r2, [sp, #20]
 800200c:	4620      	mov	r0, r4
 800200e:	f7ff fe6b 	bl	8001ce8 <DecodeWriteRegister>
    printf("%s.%s = 0x%08x\n",
 8002012:	4811      	ldr	r0, [pc, #68]	; (8002058 <CmdDecode+0x1e0>)
 8002014:	6821      	ldr	r1, [r4, #0]
 8002016:	682a      	ldr	r2, [r5, #0]
 8002018:	9b05      	ldr	r3, [sp, #20]
 800201a:	f003 fe61 	bl	8005ce0 <printf>
  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

}
 800201e:	b006      	add	sp, #24
 8002020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002024:	08015054 	.word	0x08015054
 8002028:	0800acf9 	.word	0x0800acf9
 800202c:	0800aee8 	.word	0x0800aee8
 8002030:	0800af3d 	.word	0x0800af3d
 8002034:	0800b019 	.word	0x0800b019
 8002038:	0800b054 	.word	0x0800b054
 800203c:	0800b079 	.word	0x0800b079
 8002040:	0800b0b3 	.word	0x0800b0b3
 8002044:	0800b0b5 	.word	0x0800b0b5
 8002048:	0800af6c 	.word	0x0800af6c
 800204c:	0800afa9 	.word	0x0800afa9
 8002050:	0800afd4 	.word	0x0800afd4
 8002054:	0800afeb 	.word	0x0800afeb
 8002058:	0800b009 	.word	0x0800b009

0800205c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4915      	ldr	r1, [pc, #84]	; (80020b4 <SystemInit+0x58>)
 800205e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002062:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <SystemInit+0x5c>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002074:	6858      	ldr	r0, [r3, #4]
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <SystemInit+0x60>)
 8002078:	4002      	ands	r2, r0
 800207a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002082:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002086:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800208e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002096:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209a:	f022 020f 	bic.w	r2, r2, #15
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80020a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <SystemInit+0x64>)
 80020a4:	4002      	ands	r2, r0
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80020b0:	608b      	str	r3, [r1, #8]
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	f87fc00c 	.word	0xf87fc00c
 80020c0:	ff00fccc 	.word	0xff00fccc

080020c4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	6803      	ldr	r3, [r0, #0]
 80020c8:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ca:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020cc:	d404      	bmi.n	80020d8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	079f      	lsls	r7, r3, #30
 80020d2:	f100 80c6 	bmi.w	8002262 <HAL_RCC_OscConfig+0x19e>
 80020d6:	e157      	b.n	8002388 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020d8:	4dc1      	ldr	r5, [pc, #772]	; (80023e0 <HAL_RCC_OscConfig+0x31c>)
 80020da:	686b      	ldr	r3, [r5, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d007      	beq.n	80020f4 <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e4:	686b      	ldr	r3, [r5, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d127      	bne.n	800213e <HAL_RCC_OscConfig+0x7a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ee:	686b      	ldr	r3, [r5, #4]
 80020f0:	03de      	lsls	r6, r3, #15
 80020f2:	d524      	bpl.n	800213e <HAL_RCC_OscConfig+0x7a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020f8:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8002100:	f043 0320 	orr.w	r3, r3, #32
 8002104:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x4c>
 800210c:	6829      	ldr	r1, [r5, #0]
 800210e:	e004      	b.n	800211a <HAL_RCC_OscConfig+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	2201      	movs	r2, #1
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	420b      	tst	r3, r1
 8002132:	d0cc      	beq.n	80020ce <HAL_RCC_OscConfig+0xa>
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	4293      	cmp	r3, r2
 8002138:	d0c9      	beq.n	80020ce <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 800213a:	2001      	movs	r0, #1
 800213c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800213e:	4ea9      	ldr	r6, [pc, #676]	; (80023e4 <HAL_RCC_OscConfig+0x320>)
 8002140:	2300      	movs	r3, #0
 8002142:	7033      	strb	r3, [r6, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002144:	f000 fc8e 	bl	8002a64 <HAL_GetTick>
 8002148:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800214e:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002152:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	f043 0320 	orr.w	r3, r3, #32
 800215a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0xa2>
 8002162:	6829      	ldr	r1, [r5, #0]
 8002164:	e004      	b.n	8002170 <HAL_RCC_OscConfig+0xac>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002174:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	2201      	movs	r2, #1
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	420b      	tst	r3, r1
 8002188:	d008      	beq.n	800219c <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800218a:	f000 fc6b 	bl	8002a64 <HAL_GetTick>
 800218e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002192:	1bc0      	subs	r0, r0, r7
 8002194:	4298      	cmp	r0, r3
 8002196:	d9d8      	bls.n	800214a <HAL_RCC_OscConfig+0x86>
        {
          return HAL_TIMEOUT;
 8002198:	2003      	movs	r0, #3
 800219a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	7923      	ldrb	r3, [r4, #4]
 800219e:	7033      	strb	r3, [r6, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	68a3      	ldr	r3, [r4, #8]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	62eb      	str	r3, [r5, #44]	; 0x2c

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 80021ac:	6863      	ldr	r3, [r4, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d12b      	bne.n	800220a <HAL_RCC_OscConfig+0x146>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b2:	f000 fc57 	bl	8002a64 <HAL_GetTick>
 80021b6:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021bc:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c4:	f043 0320 	orr.w	r3, r3, #32
 80021c8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_OscConfig+0x110>
 80021d0:	6829      	ldr	r1, [r5, #0]
 80021d2:	e004      	b.n	80021de <HAL_RCC_OscConfig+0x11a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	fab2 f282 	clz	r2, r2
 80021dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	2201      	movs	r2, #1
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	420b      	tst	r3, r1
 80021f6:	f47f af6a 	bne.w	80020ce <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80021fa:	f000 fc33 	bl	8002a64 <HAL_GetTick>
 80021fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002202:	1b80      	subs	r0, r0, r6
 8002204:	4298      	cmp	r0, r3
 8002206:	d9d7      	bls.n	80021b8 <HAL_RCC_OscConfig+0xf4>
 8002208:	e7c6      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800220a:	f000 fc2b 	bl	8002a64 <HAL_GetTick>
 800220e:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002214:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002218:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221c:	f043 0320 	orr.w	r3, r3, #32
 8002220:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
 8002228:	6829      	ldr	r1, [r5, #0]
 800222a:	e004      	b.n	8002236 <HAL_RCC_OscConfig+0x172>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	2201      	movs	r2, #1
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	420b      	tst	r3, r1
 800224e:	f43f af3e 	beq.w	80020ce <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8002252:	f000 fc07 	bl	8002a64 <HAL_GetTick>
 8002256:	f241 3388 	movw	r3, #5000	; 0x1388
 800225a:	1b80      	subs	r0, r0, r6
 800225c:	4298      	cmp	r0, r3
 800225e:	d9d7      	bls.n	8002210 <HAL_RCC_OscConfig+0x14c>
 8002260:	e79a      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002262:	4d5f      	ldr	r5, [pc, #380]	; (80023e0 <HAL_RCC_OscConfig+0x31c>)
 8002264:	686b      	ldr	r3, [r5, #4]
 8002266:	f013 0f0c 	tst.w	r3, #12
 800226a:	d007      	beq.n	800227c <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800226c:	686b      	ldr	r3, [r5, #4]
 800226e:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002272:	2b08      	cmp	r3, #8
 8002274:	d125      	bne.n	80022c2 <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002276:	686b      	ldr	r3, [r5, #4]
 8002278:	03d8      	lsls	r0, r3, #15
 800227a:	d422      	bmi.n	80022c2 <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	2202      	movs	r2, #2
 800227e:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002282:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	f043 0320 	orr.w	r3, r3, #32
 800228a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x1d2>
 8002292:	6829      	ldr	r1, [r5, #0]
 8002294:	e004      	b.n	80022a0 <HAL_RCC_OscConfig+0x1dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800229a:	fab2 f282 	clz	r2, r2
 800229e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	2302      	movs	r3, #2
 80022a2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	2201      	movs	r2, #1
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	420b      	tst	r3, r1
 80022b6:	d030      	beq.n	800231a <HAL_RCC_OscConfig+0x256>
 80022b8:	6923      	ldr	r3, [r4, #16]
 80022ba:	4293      	cmp	r3, r2
 80022bc:	f47f af3d 	bne.w	800213a <HAL_RCC_OscConfig+0x76>
 80022c0:	e02b      	b.n	800231a <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c2:	6922      	ldr	r2, [r4, #16]
 80022c4:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCC_OscConfig+0x324>)
 80022c6:	b3ba      	cbz	r2, 8002338 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022cc:	f000 fbca 	bl	8002a64 <HAL_GetTick>
 80022d0:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	2202      	movs	r2, #2
 80022d4:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	f043 0320 	orr.w	r3, r3, #32
 80022e0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_OscConfig+0x228>
 80022e8:	6829      	ldr	r1, [r5, #0]
 80022ea:	e004      	b.n	80022f6 <HAL_RCC_OscConfig+0x232>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	fab2 f282 	clz	r2, r2
 80022f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	2302      	movs	r3, #2
 80022f8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	2201      	movs	r2, #1
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	420b      	tst	r3, r1
 800230c:	d105      	bne.n	800231a <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f000 fba9 	bl	8002a64 <HAL_GetTick>
 8002312:	1b80      	subs	r0, r0, r6
 8002314:	2864      	cmp	r0, #100	; 0x64
 8002316:	d9dc      	bls.n	80022d2 <HAL_RCC_OscConfig+0x20e>
 8002318:	e73e      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	23f8      	movs	r3, #248	; 0xf8
 800231e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	6961      	ldr	r1, [r4, #20]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4099      	lsls	r1, r3
 800232c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002330:	ea41 0302 	orr.w	r3, r1, r2
 8002334:	602b      	str	r3, [r5, #0]
 8002336:	e027      	b.n	8002388 <HAL_RCC_OscConfig+0x2c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002338:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800233a:	f000 fb93 	bl	8002a64 <HAL_GetTick>
 800233e:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	2202      	movs	r2, #2
 8002342:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002346:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	f043 0320 	orr.w	r3, r3, #32
 800234e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x296>
 8002356:	6829      	ldr	r1, [r5, #0]
 8002358:	e004      	b.n	8002364 <HAL_RCC_OscConfig+0x2a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	2302      	movs	r3, #2
 8002366:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	2201      	movs	r2, #1
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	420b      	tst	r3, r1
 800237a:	d005      	beq.n	8002388 <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f000 fb72 	bl	8002a64 <HAL_GetTick>
 8002380:	1b80      	subs	r0, r0, r6
 8002382:	2864      	cmp	r0, #100	; 0x64
 8002384:	d9dc      	bls.n	8002340 <HAL_RCC_OscConfig+0x27c>
 8002386:	e707      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	0719      	lsls	r1, r3, #28
 800238c:	d404      	bmi.n	8002398 <HAL_RCC_OscConfig+0x2d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	075a      	lsls	r2, r3, #29
 8002392:	f140 80a7 	bpl.w	80024e4 <HAL_RCC_OscConfig+0x420>
 8002396:	e04a      	b.n	800242e <HAL_RCC_OscConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002398:	69a2      	ldr	r2, [r4, #24]
 800239a:	4d11      	ldr	r5, [pc, #68]	; (80023e0 <HAL_RCC_OscConfig+0x31c>)
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_OscConfig+0x328>)
 800239e:	b33a      	cbz	r2, 80023f0 <HAL_RCC_OscConfig+0x32c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80023a4:	f000 fb5e 	bl	8002a64 <HAL_GetTick>
 80023a8:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	2302      	movs	r3, #2
 80023ac:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	2201      	movs	r2, #1
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	420b      	tst	r3, r1
 80023d2:	d1dc      	bne.n	800238e <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f000 fb46 	bl	8002a64 <HAL_GetTick>
 80023d8:	1b80      	subs	r0, r0, r6
 80023da:	2864      	cmp	r0, #100	; 0x64
 80023dc:	d9e5      	bls.n	80023aa <HAL_RCC_OscConfig+0x2e6>
 80023de:	e6db      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40021002 	.word	0x40021002
 80023e8:	42420000 	.word	0x42420000
 80023ec:	42420480 	.word	0x42420480
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f0:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80023f2:	f000 fb37 	bl	8002a64 <HAL_GetTick>
 80023f6:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	2302      	movs	r3, #2
 80023fa:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002406:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	2201      	movs	r2, #1
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	420b      	tst	r3, r1
 8002420:	d0b5      	beq.n	800238e <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8002422:	f000 fb1f 	bl	8002a64 <HAL_GetTick>
 8002426:	1b80      	subs	r0, r0, r6
 8002428:	2864      	cmp	r0, #100	; 0x64
 800242a:	d9e5      	bls.n	80023f8 <HAL_RCC_OscConfig+0x334>
 800242c:	e6b4      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 800242e:	4d97      	ldr	r5, [pc, #604]	; (800268c <HAL_RCC_OscConfig+0x5c8>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002430:	4a97      	ldr	r2, [pc, #604]	; (8002690 <HAL_RCC_OscConfig+0x5cc>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8002432:	69eb      	ldr	r3, [r5, #28]
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002438:	61eb      	str	r3, [r5, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002442:	f000 fb0f 	bl	8002a64 <HAL_GetTick>
 8002446:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002448:	4b91      	ldr	r3, [pc, #580]	; (8002690 <HAL_RCC_OscConfig+0x5cc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	05db      	lsls	r3, r3, #23
 800244e:	d54d      	bpl.n	80024ec <HAL_RCC_OscConfig+0x428>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002450:	6a2b      	ldr	r3, [r5, #32]
 8002452:	f023 0305 	bic.w	r3, r3, #5
 8002456:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002458:	f000 fb04 	bl	8002a64 <HAL_GetTick>
 800245c:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	2302      	movs	r3, #2
 8002460:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002464:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800246c:	fab2 f282 	clz	r2, r2
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002474:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002478:	429a      	cmp	r2, r3
 800247a:	bf0c      	ite	eq
 800247c:	6a29      	ldreq	r1, [r5, #32]
 800247e:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	2201      	movs	r2, #1
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	420b      	tst	r3, r1
 8002494:	d130      	bne.n	80024f8 <HAL_RCC_OscConfig+0x434>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002496:	6a2b      	ldr	r3, [r5, #32]
 8002498:	68e2      	ldr	r2, [r4, #12]
 800249a:	f023 0305 	bic.w	r3, r3, #5
 800249e:	4313      	orrs	r3, r2
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80024a0:	2a01      	cmp	r2, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a2:	622b      	str	r3, [r5, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80024a4:	d138      	bne.n	8002518 <HAL_RCC_OscConfig+0x454>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80024a6:	f000 fadd 	bl	8002a64 <HAL_GetTick>
 80024aa:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	2302      	movs	r3, #2
 80024ae:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c2:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80024c6:	429a      	cmp	r2, r3
 80024c8:	bf0c      	ite	eq
 80024ca:	6a29      	ldreq	r1, [r5, #32]
 80024cc:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	2201      	movs	r2, #1
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	420b      	tst	r3, r1
 80024e2:	d011      	beq.n	8002508 <HAL_RCC_OscConfig+0x444>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e4:	69e2      	ldr	r2, [r4, #28]
 80024e6:	2a00      	cmp	r2, #0
 80024e8:	d13d      	bne.n	8002566 <HAL_RCC_OscConfig+0x4a2>
 80024ea:	e08b      	b.n	8002604 <HAL_RCC_OscConfig+0x540>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 80024ec:	f000 faba 	bl	8002a64 <HAL_GetTick>
 80024f0:	1b80      	subs	r0, r0, r6
 80024f2:	2864      	cmp	r0, #100	; 0x64
 80024f4:	d9a8      	bls.n	8002448 <HAL_RCC_OscConfig+0x384>
 80024f6:	e64f      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80024f8:	f000 fab4 	bl	8002a64 <HAL_GetTick>
 80024fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002500:	1b80      	subs	r0, r0, r6
 8002502:	4298      	cmp	r0, r3
 8002504:	d9ab      	bls.n	800245e <HAL_RCC_OscConfig+0x39a>
 8002506:	e647      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8002508:	f000 faac 	bl	8002a64 <HAL_GetTick>
 800250c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002510:	1b80      	subs	r0, r0, r6
 8002512:	4298      	cmp	r0, r3
 8002514:	d9ca      	bls.n	80024ac <HAL_RCC_OscConfig+0x3e8>
 8002516:	e63f      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002518:	f000 faa4 	bl	8002a64 <HAL_GetTick>
 800251c:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	2302      	movs	r3, #2
 8002520:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002524:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800252c:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002534:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002538:	429a      	cmp	r2, r3
 800253a:	bf0c      	ite	eq
 800253c:	6a29      	ldreq	r1, [r5, #32]
 800253e:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	2201      	movs	r2, #1
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	420b      	tst	r3, r1
 8002554:	d0c6      	beq.n	80024e4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8002556:	f000 fa85 	bl	8002a64 <HAL_GetTick>
 800255a:	f241 3388 	movw	r3, #5000	; 0x1388
 800255e:	1b80      	subs	r0, r0, r6
 8002560:	4298      	cmp	r0, r3
 8002562:	d9dc      	bls.n	800251e <HAL_RCC_OscConfig+0x45a>
 8002564:	e618      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002566:	4d49      	ldr	r5, [pc, #292]	; (800268c <HAL_RCC_OscConfig+0x5c8>)
 8002568:	686b      	ldr	r3, [r5, #4]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b08      	cmp	r3, #8
 8002570:	f43f ade3 	beq.w	800213a <HAL_RCC_OscConfig+0x76>
 8002574:	4e47      	ldr	r6, [pc, #284]	; (8002694 <HAL_RCC_OscConfig+0x5d0>)
 8002576:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257c:	d15c      	bne.n	8002638 <HAL_RCC_OscConfig+0x574>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 800257e:	f000 fa71 	bl	8002a64 <HAL_GetTick>
 8002582:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002588:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800258c:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002590:	f043 0320 	orr.w	r3, r3, #32
 8002594:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d135      	bne.n	8002608 <HAL_RCC_OscConfig+0x544>
 800259c:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	2101      	movs	r1, #1
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	4213      	tst	r3, r2
 80025b6:	d12d      	bne.n	8002614 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b8:	6a20      	ldr	r0, [r4, #32]
 80025ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025bc:	686b      	ldr	r3, [r5, #4]
 80025be:	4302      	orrs	r2, r0
 80025c0:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80025c4:	4313      	orrs	r3, r2
 80025c6:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c8:	6031      	str	r1, [r6, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ca:	f000 fa4b 	bl	8002a64 <HAL_GetTick>
 80025ce:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d4:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025dc:	f043 0320 	orr.w	r3, r3, #32
 80025e0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d11b      	bne.n	8002620 <HAL_RCC_OscConfig+0x55c>
 80025e8:	6829      	ldr	r1, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ee:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	2201      	movs	r2, #1
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	420b      	tst	r3, r1
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0x568>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002604:	2000      	movs	r0, #0
 8002606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800260c:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002610:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002612:	e7c4      	b.n	800259e <HAL_RCC_OscConfig+0x4da>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f000 fa26 	bl	8002a64 <HAL_GetTick>
 8002618:	1bc0      	subs	r0, r0, r7
 800261a:	2864      	cmp	r0, #100	; 0x64
 800261c:	d9b2      	bls.n	8002584 <HAL_RCC_OscConfig+0x4c0>
 800261e:	e5bb      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002624:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002628:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800262a:	e7de      	b.n	80025ea <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f000 fa1a 	bl	8002a64 <HAL_GetTick>
 8002630:	1b00      	subs	r0, r0, r4
 8002632:	2864      	cmp	r0, #100	; 0x64
 8002634:	d9cc      	bls.n	80025d0 <HAL_RCC_OscConfig+0x50c>
 8002636:	e5af      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002638:	f000 fa14 	bl	8002a64 <HAL_GetTick>
 800263c:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002642:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002646:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	f043 0320 	orr.w	r3, r3, #32
 800264e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x596>
 8002656:	6829      	ldr	r1, [r5, #0]
 8002658:	e004      	b.n	8002664 <HAL_RCC_OscConfig+0x5a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800265e:	fab2 f282 	clz	r2, r2
 8002662:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002668:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	2201      	movs	r2, #1
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	420b      	tst	r3, r1
 800267c:	d0c2      	beq.n	8002604 <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f000 f9f1 	bl	8002a64 <HAL_GetTick>
 8002682:	1b00      	subs	r0, r0, r4
 8002684:	2864      	cmp	r0, #100	; 0x64
 8002686:	d9da      	bls.n	800263e <HAL_RCC_OscConfig+0x57a>
 8002688:	e586      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	40007000 	.word	0x40007000
 8002694:	42420060 	.word	0x42420060

08002698 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002698:	4ab0      	ldr	r2, [pc, #704]	; (800295c <HAL_RCC_ClockConfig+0x2c4>)
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800269c:	6813      	ldr	r3, [r2, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	4299      	cmp	r1, r3
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	4604      	mov	r4, r0
 80026a6:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026a8:	f240 80a9 	bls.w	80027fe <HAL_RCC_ClockConfig+0x166>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ac:	6813      	ldr	r3, [r2, #0]
 80026ae:	f023 0307 	bic.w	r3, r3, #7
 80026b2:	430b      	orrs	r3, r1
 80026b4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026b6:	6813      	ldr	r3, [r2, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	428b      	cmp	r3, r1
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 80026c0:	2001      	movs	r0, #1
 80026c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	6801      	ldr	r1, [r0, #0]
 80026c6:	078f      	lsls	r7, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	bf41      	itttt	mi
 80026ca:	48a5      	ldrmi	r0, [pc, #660]	; (8002960 <HAL_RCC_ClockConfig+0x2c8>)
 80026cc:	6843      	ldrmi	r3, [r0, #4]
 80026ce:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 80026d2:	68a3      	ldrmi	r3, [r4, #8]
 80026d4:	bf44      	itt	mi
 80026d6:	4313      	orrmi	r3, r2
 80026d8:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	07ce      	lsls	r6, r1, #31
 80026dc:	d40b      	bmi.n	80026f6 <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026de:	6821      	ldr	r1, [r4, #0]
 80026e0:	074d      	lsls	r5, r1, #29
 80026e2:	f140 812b 	bpl.w	800293c <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e6:	489e      	ldr	r0, [pc, #632]	; (8002960 <HAL_RCC_ClockConfig+0x2c8>)
 80026e8:	6843      	ldr	r3, [r0, #4]
 80026ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ee:	68e3      	ldr	r3, [r4, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	6043      	str	r3, [r0, #4]
 80026f4:	e122      	b.n	800293c <HAL_RCC_ClockConfig+0x2a4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	6862      	ldr	r2, [r4, #4]
 80026f8:	4d99      	ldr	r5, [pc, #612]	; (8002960 <HAL_RCC_ClockConfig+0x2c8>)
 80026fa:	2a01      	cmp	r2, #1
 80026fc:	d115      	bne.n	800272a <HAL_RCC_ClockConfig+0x92>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002702:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002706:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	f043 0320 	orr.w	r3, r3, #32
 800270e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_RCC_ClockConfig+0x82>
 8002716:	6828      	ldr	r0, [r5, #0]
 8002718:	e004      	b.n	8002724 <HAL_RCC_ClockConfig+0x8c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800271e:	fab1 f181 	clz	r1, r1
 8002722:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002728:	e02a      	b.n	8002780 <HAL_RCC_ClockConfig+0xe8>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	2a02      	cmp	r2, #2
 800272c:	d115      	bne.n	800275a <HAL_RCC_ClockConfig+0xc2>
 800272e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002732:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002736:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	f043 0320 	orr.w	r3, r3, #32
 800273e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xb2>
 8002746:	6828      	ldr	r0, [r5, #0]
 8002748:	e004      	b.n	8002754 <HAL_RCC_ClockConfig+0xbc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800274e:	fab1 f181 	clz	r1, r1
 8002752:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002758:	e012      	b.n	8002780 <HAL_RCC_ClockConfig+0xe8>
 800275a:	2102      	movs	r1, #2
 800275c:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002760:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	f043 0320 	orr.w	r3, r3, #32
 8002768:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0xdc>
 8002770:	6828      	ldr	r0, [r5, #0]
 8002772:	e004      	b.n	800277e <HAL_RCC_ClockConfig+0xe6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002778:	fab1 f181 	clz	r1, r1
 800277c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	2302      	movs	r3, #2
 8002780:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	2101      	movs	r1, #1
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	4203      	tst	r3, r0
 8002794:	d094      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002796:	686b      	ldr	r3, [r5, #4]
 8002798:	f023 0303 	bic.w	r3, r3, #3
 800279c:	431a      	orrs	r2, r3
 800279e:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 80027a0:	f000 f960 	bl	8002a64 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a4:	6863      	ldr	r3, [r4, #4]
 80027a6:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 80027a8:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x130>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ac:	686b      	ldr	r3, [r5, #4]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d093      	beq.n	80026de <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b6:	f000 f955 	bl	8002a64 <HAL_GetTick>
 80027ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80027be:	1b80      	subs	r0, r0, r6
 80027c0:	4298      	cmp	r0, r3
 80027c2:	d9f3      	bls.n	80027ac <HAL_RCC_ClockConfig+0x114>
          {
            return HAL_TIMEOUT;
 80027c4:	2003      	movs	r0, #3
 80027c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d113      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	686b      	ldr	r3, [r5, #4]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d083      	beq.n	80026de <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d6:	f000 f945 	bl	8002a64 <HAL_GetTick>
 80027da:	f241 3388 	movw	r3, #5000	; 0x1388
 80027de:	1b80      	subs	r0, r0, r6
 80027e0:	4298      	cmp	r0, r3
 80027e2:	d9f3      	bls.n	80027cc <HAL_RCC_ClockConfig+0x134>
 80027e4:	e7ee      	b.n	80027c4 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e6:	f000 f93d 	bl	8002a64 <HAL_GetTick>
 80027ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80027ee:	1b80      	subs	r0, r0, r6
 80027f0:	4298      	cmp	r0, r3
 80027f2:	d8e7      	bhi.n	80027c4 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f4:	686b      	ldr	r3, [r5, #4]
 80027f6:	f013 0f0c 	tst.w	r3, #12
 80027fa:	d1f4      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x14e>
 80027fc:	e76f      	b.n	80026de <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fe:	6801      	ldr	r1, [r0, #0]
 8002800:	0788      	lsls	r0, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002802:	bf41      	itttt	mi
 8002804:	4856      	ldrmi	r0, [pc, #344]	; (8002960 <HAL_RCC_ClockConfig+0x2c8>)
 8002806:	6843      	ldrmi	r3, [r0, #4]
 8002808:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 800280c:	68a3      	ldrmi	r3, [r4, #8]
 800280e:	bf44      	itt	mi
 8002810:	4313      	orrmi	r3, r2
 8002812:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002814:	07ca      	lsls	r2, r1, #31
 8002816:	d40c      	bmi.n	8002832 <HAL_RCC_ClockConfig+0x19a>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002818:	4a50      	ldr	r2, [pc, #320]	; (800295c <HAL_RCC_ClockConfig+0x2c4>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	f023 0307 	bic.w	r3, r3, #7
 8002820:	4333      	orrs	r3, r6
 8002822:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	42b3      	cmp	r3, r6
 800282c:	f47f af48 	bne.w	80026c0 <HAL_RCC_ClockConfig+0x28>
 8002830:	e755      	b.n	80026de <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	6862      	ldr	r2, [r4, #4]
 8002834:	4d4a      	ldr	r5, [pc, #296]	; (8002960 <HAL_RCC_ClockConfig+0x2c8>)
 8002836:	2a01      	cmp	r2, #1
 8002838:	d115      	bne.n	8002866 <HAL_RCC_ClockConfig+0x1ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800283e:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002842:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	f043 0320 	orr.w	r3, r3, #32
 800284a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0x1be>
 8002852:	6828      	ldr	r0, [r5, #0]
 8002854:	e004      	b.n	8002860 <HAL_RCC_ClockConfig+0x1c8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800285a:	fab1 f181 	clz	r1, r1
 800285e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002864:	e02a      	b.n	80028bc <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002866:	2a02      	cmp	r2, #2
 8002868:	d115      	bne.n	8002896 <HAL_RCC_ClockConfig+0x1fe>
 800286a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800286e:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002872:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	f043 0320 	orr.w	r3, r3, #32
 800287a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1ee>
 8002882:	6828      	ldr	r0, [r5, #0]
 8002884:	e004      	b.n	8002890 <HAL_RCC_ClockConfig+0x1f8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800288a:	fab1 f181 	clz	r1, r1
 800288e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002894:	e012      	b.n	80028bc <HAL_RCC_ClockConfig+0x224>
 8002896:	2102      	movs	r1, #2
 8002898:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800289c:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a0:	f043 0320 	orr.w	r3, r3, #32
 80028a4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x218>
 80028ac:	6828      	ldr	r0, [r5, #0]
 80028ae:	e004      	b.n	80028ba <HAL_RCC_ClockConfig+0x222>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	fab1 f181 	clz	r1, r1
 80028b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	2302      	movs	r3, #2
 80028bc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	2101      	movs	r1, #1
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	4203      	tst	r3, r0
 80028d0:	f43f aef6 	beq.w	80026c0 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d4:	686b      	ldr	r3, [r5, #4]
 80028d6:	f023 0303 	bic.w	r3, r3, #3
 80028da:	431a      	orrs	r2, r3
 80028dc:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 80028de:	f000 f8c1 	bl	8002a64 <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	6863      	ldr	r3, [r4, #4]
 80028e4:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 80028e6:	4607      	mov	r7, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_ClockConfig+0x26c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ea:	686b      	ldr	r3, [r5, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d091      	beq.n	8002818 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f000 f8b6 	bl	8002a64 <HAL_GetTick>
 80028f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80028fc:	1bc0      	subs	r0, r0, r7
 80028fe:	4298      	cmp	r0, r3
 8002900:	d9f3      	bls.n	80028ea <HAL_RCC_ClockConfig+0x252>
 8002902:	e75f      	b.n	80027c4 <HAL_RCC_ClockConfig+0x12c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002904:	2b02      	cmp	r3, #2
 8002906:	d114      	bne.n	8002932 <HAL_RCC_ClockConfig+0x29a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002908:	686b      	ldr	r3, [r5, #4]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d082      	beq.n	8002818 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002912:	f000 f8a7 	bl	8002a64 <HAL_GetTick>
 8002916:	f241 3388 	movw	r3, #5000	; 0x1388
 800291a:	1bc0      	subs	r0, r0, r7
 800291c:	4298      	cmp	r0, r3
 800291e:	d9f3      	bls.n	8002908 <HAL_RCC_ClockConfig+0x270>
 8002920:	e750      	b.n	80027c4 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002922:	f000 f89f 	bl	8002a64 <HAL_GetTick>
 8002926:	f241 3388 	movw	r3, #5000	; 0x1388
 800292a:	1bc0      	subs	r0, r0, r7
 800292c:	4298      	cmp	r0, r3
 800292e:	f63f af49 	bhi.w	80027c4 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002932:	686b      	ldr	r3, [r5, #4]
 8002934:	f013 0f0c 	tst.w	r3, #12
 8002938:	d1f3      	bne.n	8002922 <HAL_RCC_ClockConfig+0x28a>
 800293a:	e76d      	b.n	8002818 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	070b      	lsls	r3, r1, #28
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293e:	bf41      	itttt	mi
 8002940:	4a07      	ldrmi	r2, [pc, #28]	; (8002960 <HAL_RCC_ClockConfig+0x2c8>)
 8002942:	6921      	ldrmi	r1, [r4, #16]
 8002944:	6853      	ldrmi	r3, [r2, #4]
 8002946:	f423 5360 	bicmi.w	r3, r3, #14336	; 0x3800
 800294a:	bf44      	itt	mi
 800294c:	ea43 03c1 	orrmi.w	r3, r3, r1, lsl #3
 8002950:	6053      	strmi	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002952:	200f      	movs	r0, #15
 8002954:	f000 f859 	bl	8002a0a <HAL_InitTick>

  return HAL_OK;
 8002958:	2000      	movs	r0, #0
}
 800295a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800295c:	40022000 	.word	0x40022000
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002964:	4915      	ldr	r1, [pc, #84]	; (80029bc <HAL_RCC_GetSysClockFreq+0x58>)
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002966:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002968:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800296a:	f004 030c 	and.w	r3, r4, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d121      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002976:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800297a:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800297e:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8002982:	b2db      	uxtb	r3, r3
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800298a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800298c:	5cd2      	ldrb	r2, [r2, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	230f      	movs	r3, #15
 8002990:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002994:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002998:	f001 010f 	and.w	r1, r1, #15
 800299c:	b2db      	uxtb	r3, r3
 800299e:	fa21 f303 	lsr.w	r3, r1, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x60>)
 80029a4:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029a6:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 80029a8:	bf52      	itee	pl
 80029aa:	4807      	ldrpl	r0, [pc, #28]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x64>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 80029ac:	4b07      	ldrmi	r3, [pc, #28]	; (80029cc <HAL_RCC_GetSysClockFreq+0x68>)
 80029ae:	fbb3 f0f0 	udivmi	r0, r3, r0
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 80029b2:	4350      	muls	r0, r2
 80029b4:	bd10      	pop	{r4, pc}

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80029b6:	4805      	ldr	r0, [pc, #20]	; (80029cc <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	0801ab54 	.word	0x0801ab54
 80029c4:	0801ab44 	.word	0x0801ab44
 80029c8:	003d0900 	.word	0x003d0900
 80029cc:	007a1200 	.word	0x007a1200

080029d0 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80029d2:	f7ff ffc7 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80029d8:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	23f0      	movs	r3, #240	; 0xf0
 80029dc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x30>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	40d8      	lsrs	r0, r3
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x34>)
 80029f6:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80029f8:	bd08      	pop	{r3, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	0801ab34 	.word	0x0801ab34
 8002a04:	20000014 	.word	0x20000014

08002a08 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002a08:	4770      	bx	lr

08002a0a <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8002a0a:	b510      	push	{r4, lr}
 8002a0c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002a0e:	f7ff ffdf 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a1a:	f000 f885 	bl	8002b28 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8002a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a22:	4621      	mov	r1, r4
 8002a24:	2200      	movs	r2, #0
 8002a26:	f000 f843 	bl	8002ab0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	bd10      	pop	{r4, pc}
	...

08002a30 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_Init+0x20>)
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a32:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a34:	6813      	ldr	r3, [r2, #0]
 8002a36:	f043 0310 	orr.w	r3, r3, #16
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f000 f825 	bl	8002a8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a42:	200f      	movs	r0, #15
 8002a44:	f7ff ffe1 	bl	8002a0a <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a48:	f7ff ffde 	bl	8002a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	bd08      	pop	{r3, pc}
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002a54:	4a02      	ldr	r2, [pc, #8]	; (8002a60 <HAL_IncTick+0xc>)
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000bec 	.word	0x20000bec

08002a64 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002a64:	4b01      	ldr	r3, [pc, #4]	; (8002a6c <HAL_GetTick+0x8>)
 8002a66:	6818      	ldr	r0, [r3, #0]
}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000bec 	.word	0x20000bec

08002a70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002a70:	b513      	push	{r0, r1, r4, lr}
 8002a72:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff fff6 	bl	8002a64 <HAL_GetTick>
 8002a78:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8002a7a:	f7ff fff3 	bl	8002a64 <HAL_GetTick>
 8002a7e:	9b01      	ldr	r3, [sp, #4]
 8002a80:	1b00      	subs	r0, r0, r4
 8002a82:	4298      	cmp	r0, r3
 8002a84:	d3f9      	bcc.n	8002a7a <HAL_Delay+0xa>
  {
  }
}
 8002a86:	b002      	add	sp, #8
 8002a88:	bd10      	pop	{r4, pc}
	...

08002a8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002a90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002aa0:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8002aa4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002aa8:	60d3      	str	r3, [r2, #12]
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_NVIC_SetPriority+0x58>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002aba:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002abe:	1d1c      	adds	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002ac0:	2d04      	cmp	r5, #4
 8002ac2:	bf28      	it	cs
 8002ac4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002ac6:	2c06      	cmp	r4, #6
 8002ac8:	bf8c      	ite	hi
 8002aca:	3b03      	subhi	r3, #3
 8002acc:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002ace:	2401      	movs	r4, #1
 8002ad0:	fa04 f603 	lsl.w	r6, r4, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002ad4:	40ac      	lsls	r4, r5
 8002ad6:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002ad8:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002ada:	4021      	ands	r1, r4
 8002adc:	4099      	lsls	r1, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002ade:	4032      	ands	r2, r6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8002ae0:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002ae2:	ea42 0201 	orr.w	r2, r2, r1
 8002ae6:	ea4f 1202 	mov.w	r2, r2, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002aea:	bfaf      	iteee	ge
 8002aec:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002af0:	f000 000f 	andlt.w	r0, r0, #15
 8002af4:	4b05      	ldrlt	r3, [pc, #20]	; (8002b0c <HAL_NVIC_SetPriority+0x5c>)
 8002af6:	b2d2      	uxtblt	r2, r2
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002af8:	bfa5      	ittet	ge
 8002afa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002afe:	b2d2      	uxtbge	r2, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002b00:	541a      	strblt	r2, [r3, r0]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002b02:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	e000ed00 	.word	0xe000ed00
 8002b0c:	e000ed14 	.word	0xe000ed14

08002b10 <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002b10:	0941      	lsrs	r1, r0, #5
 8002b12:	2301      	movs	r3, #1
 8002b14:	f000 001f 	and.w	r0, r0, #31
 8002b18:	4a02      	ldr	r2, [pc, #8]	; (8002b24 <HAL_NVIC_EnableIRQ+0x14>)
 8002b1a:	4083      	lsls	r3, r0
 8002b1c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002b28:	3801      	subs	r0, #1
 8002b2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002b2e:	bf3f      	itttt	cc
 8002b30:	4b06      	ldrcc	r3, [pc, #24]	; (8002b4c <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002b32:	4a07      	ldrcc	r2, [pc, #28]	; (8002b50 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002b34:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002b36:	21f0      	movcc	r1, #240	; 0xf0
 8002b38:	bf3f      	itttt	cc
 8002b3a:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002b3e:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b40:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002b42:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b44:	bf34      	ite	cc
 8002b46:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002b48:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e010 	.word	0xe000e010
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b58:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b5a:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b60:	ea02 0507 	and.w	r5, r2, r7
 
    if (iocurrent == ioposition)
 8002b64:	4295      	cmp	r5, r2
 8002b66:	f040 80ac 	bne.w	8002cc2 <HAL_GPIO_Init+0x16e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002b6a:	684c      	ldr	r4, [r1, #4]
 8002b6c:	f024 0c10 	bic.w	ip, r4, #16
 8002b70:	f1bc 0f02 	cmp.w	ip, #2
 8002b74:	d114      	bne.n	8002ba0 <HAL_GPIO_Init+0x4c>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002b76:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002b7a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b7e:	f003 0607 	and.w	r6, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002b82:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b86:	00b6      	lsls	r6, r6, #2
 8002b88:	f04f 080f 	mov.w	r8, #15
 8002b8c:	fa08 f806 	lsl.w	r8, r8, r6
 8002b90:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b94:	690a      	ldr	r2, [r1, #16]
 8002b96:	40b2      	lsls	r2, r6
 8002b98:	ea48 0202 	orr.w	r2, r8, r2
        GPIOx->AFR[position >> 3] = temp;
 8002b9c:	f8ce 2020 	str.w	r2, [lr, #32]
 8002ba0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ba4:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ba8:	fa02 f20e 	lsl.w	r2, r2, lr
 8002bac:	43d2      	mvns	r2, r2
 8002bae:	ea02 0806 	and.w	r8, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bb2:	f004 0603 	and.w	r6, r4, #3
 8002bb6:	fa06 f60e 	lsl.w	r6, r6, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bba:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bbe:	ea48 0606 	orr.w	r6, r8, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bc2:	f1bc 0f01 	cmp.w	ip, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8002bc6:	6006      	str	r6, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bc8:	d811      	bhi.n	8002bee <HAL_GPIO_Init+0x9a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bca:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bcc:	ea02 0c06 	and.w	ip, r2, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bd0:	68ce      	ldr	r6, [r1, #12]
 8002bd2:	fa06 f60e 	lsl.w	r6, r6, lr
 8002bd6:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OSPEEDR = temp;
 8002bda:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bdc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bde:	ea26 0c05 	bic.w	ip, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002be2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8002be6:	409e      	lsls	r6, r3
 8002be8:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OTYPER = temp;
 8002bec:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bee:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bf0:	ea02 0c06 	and.w	ip, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bf4:	688a      	ldr	r2, [r1, #8]
 8002bf6:	fa02 f60e 	lsl.w	r6, r2, lr
 8002bfa:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 8002bfe:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c00:	00e2      	lsls	r2, r4, #3
 8002c02:	d55e      	bpl.n	8002cc2 <HAL_GPIO_Init+0x16e>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8002c04:	4e32      	ldr	r6, [pc, #200]	; (8002cd0 <HAL_GPIO_Init+0x17c>)
 8002c06:	69b2      	ldr	r2, [r6, #24]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	61b2      	str	r2, [r6, #24]
 8002c0e:	f023 0603 	bic.w	r6, r3, #3
 8002c12:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002c16:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c1a:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002c1e:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c22:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f20c 	lsl.w	r2, r2, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8002c2c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c30:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8002c34:	d015      	beq.n	8002c62 <HAL_GPIO_Init+0x10e>
 8002c36:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <HAL_GPIO_Init+0x180>)
 8002c38:	4290      	cmp	r0, r2
 8002c3a:	d014      	beq.n	8002c66 <HAL_GPIO_Init+0x112>
 8002c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c40:	4290      	cmp	r0, r2
 8002c42:	d012      	beq.n	8002c6a <HAL_GPIO_Init+0x116>
 8002c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c48:	4290      	cmp	r0, r2
 8002c4a:	d010      	beq.n	8002c6e <HAL_GPIO_Init+0x11a>
 8002c4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c50:	4290      	cmp	r0, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_GPIO_Init+0x11e>
 8002c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c58:	4290      	cmp	r0, r2
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2205      	moveq	r2, #5
 8002c5e:	2206      	movne	r2, #6
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x120>
 8002c62:	2200      	movs	r2, #0
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x120>
 8002c66:	2201      	movs	r2, #1
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x120>
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x120>
 8002c6e:	2203      	movs	r2, #3
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x120>
 8002c72:	2204      	movs	r2, #4
 8002c74:	fa02 f20c 	lsl.w	r2, r2, ip
 8002c78:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c7c:	60b2      	str	r2, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c7e:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_GPIO_Init+0x184>)
 8002c80:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	ea6f 0e05 	mvn.w	lr, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c86:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 8002c8a:	bf14      	ite	ne
 8002c8c:	432e      	orrne	r6, r5
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002c92:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8002c94:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c96:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        { 
          temp |= iocurrent;
 8002c9a:	bf14      	ite	ne
 8002c9c:	432e      	orrne	r6, r5
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002ca2:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca4:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8002caa:	bf14      	ite	ne
 8002cac:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8002cae:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002cb2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8002cb4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb6:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	bf54      	ite	pl
 8002cba:	ea0e 0506 	andpl.w	r5, lr, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8002cbe:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002cc0:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	f47f af49 	bne.w	8002b5c <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 8002cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	48000400 	.word	0x48000400
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cdc:	6903      	ldr	r3, [r0, #16]
 8002cde:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8002ce0:	bf14      	ite	ne
 8002ce2:	2001      	movne	r0, #1
 8002ce4:	2000      	moveq	r0, #0
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce8:	b10a      	cbz	r2, 8002cee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8002cea:	8301      	strh	r1, [r0, #24]
 8002cec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8002cee:	8341      	strh	r1, [r0, #26]
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002cf2:	6943      	ldr	r3, [r0, #20]
 8002cf4:	4059      	eors	r1, r3
 8002cf6:	6141      	str	r1, [r0, #20]
 8002cf8:	4770      	bx	lr

08002cfa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cfa:	4770      	bx	lr

08002cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cfc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002d00:	6959      	ldr	r1, [r3, #20]
 8002d02:	4208      	tst	r0, r1
 8002d04:	d002      	beq.n	8002d0c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d06:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d08:	f7ff fff7 	bl	8002cfa <HAL_GPIO_EXTI_Callback>
 8002d0c:	bd08      	pop	{r3, pc}
 8002d0e:	bf00      	nop
 8002d10:	40010400 	.word	0x40010400

08002d14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8002d14:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002d16:	4604      	mov	r4, r0
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d046      	beq.n	8002daa <HAL_PCD_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8002d22:	f002 f897 	bl	8004e54 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002d26:	6865      	ldr	r5, [r4, #4]
 8002d28:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	42a9      	cmp	r1, r5
 8002d30:	f102 021c 	add.w	r2, r2, #28
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	d00e      	beq.n	8002d58 <HAL_PCD_Init+0x44>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002d3a:	2001      	movs	r0, #1
   hpcd->IN_ep[i].num = i;
 8002d3c:	f802 1c1d 	strb.w	r1, [r2, #-29]

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002d40:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8002d44:	f802 3c1a 	strb.w	r3, [r2, #-26]
   hpcd->IN_ep[i].maxpacket =  0;
 8002d48:	f842 3c11 	str.w	r3, [r2, #-17]
   hpcd->IN_ep[i].xfer_buff = 0;
 8002d4c:	f842 3c0d 	str.w	r3, [r2, #-13]
   hpcd->IN_ep[i].xfer_len = 0;
 8002d50:	f842 3c09 	str.w	r3, [r2, #-9]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002d54:	4401      	add	r1, r0
 8002d56:	e7ea      	b.n	8002d2e <HAL_PCD_Init+0x1a>
 8002d58:	f104 02b5 	add.w	r2, r4, #181	; 0xb5
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002d5c:	42ab      	cmp	r3, r5
 8002d5e:	f102 021c 	add.w	r2, r2, #28
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	d00d      	beq.n	8002d84 <HAL_PCD_Init+0x70>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 8002d68:	f802 3c1d 	strb.w	r3, [r2, #-29]
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 8002d6c:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8002d70:	f802 0c1a 	strb.w	r0, [r2, #-26]
   hpcd->OUT_ep[i].maxpacket = 0;
 8002d74:	f842 0c11 	str.w	r0, [r2, #-17]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8002d78:	f842 0c0d 	str.w	r0, [r2, #-13]
   hpcd->OUT_ep[i].xfer_len = 0;
 8002d7c:	f842 0c09 	str.w	r0, [r2, #-9]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002d80:	3301      	adds	r3, #1
 8002d82:	e7eb      	b.n	8002d5c <HAL_PCD_Init+0x48>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8002d8c:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8002d90:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8002d94:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8002d98:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8002d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8002da0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 8002da4:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141

 return HAL_OK;
 8002da8:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8002daa:	2001      	movs	r0, #1
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
}
 8002dac:	bd38      	pop	{r3, r4, r5, pc}

08002dae <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8002dae:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8002db0:	2101      	movs	r1, #1
 8002db2:	f000 ff19 	bl	8003be8 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8002db6:	2000      	movs	r0, #0
 8002db8:	bd08      	pop	{r3, pc}

08002dba <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002dba:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d00f      	beq.n	8002de2 <HAL_PCD_SetAddress+0x28>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8002dc8:	b921      	cbnz	r1, 8002dd4 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8002dca:	6803      	ldr	r3, [r0, #0]
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8002dd2:	e001      	b.n	8002dd8 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8002dd4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8002dde:	4618      	mov	r0, r3
 8002de0:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002de2:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8002de4:	4770      	bx	lr

08002de6 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002de6:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002de8:	b2cc      	uxtb	r4, r1
 8002dea:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002dee:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8002df2:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002df6:	bf15      	itete	ne
 8002df8:	fb05 0106 	mlane	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002dfc:	fb05 0101 	mlaeq	r1, r5, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002e00:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002e02:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002e04:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8002e06:	700e      	strb	r6, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002e08:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8002e0a:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8002e0c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8002e10:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f000 8181 	beq.w	800311a <HAL_PCD_EP_Open+0x334>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8002e1e:	78cc      	ldrb	r4, [r1, #3]
 8002e20:	780a      	ldrb	r2, [r1, #0]
 8002e22:	6803      	ldr	r3, [r0, #0]
 8002e24:	2c03      	cmp	r4, #3
 8002e26:	d82f      	bhi.n	8002e88 <HAL_PCD_EP_Open+0xa2>
 8002e28:	e8df f004 	tbb	[pc, r4]
 8002e2c:	170d2202 	.word	0x170d2202
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8002e30:	b212      	sxth	r2, r2
 8002e32:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002e36:	b2a4      	uxth	r4, r4
 8002e38:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002e3c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002e40:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8002e44:	e01e      	b.n	8002e84 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8002e46:	b212      	sxth	r2, r2
 8002e48:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002e4c:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002e50:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002e54:	0424      	lsls	r4, r4, #16
 8002e56:	0c24      	lsrs	r4, r4, #16
 8002e58:	e014      	b.n	8002e84 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8002e5a:	b212      	sxth	r2, r2
 8002e5c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002e60:	b2a4      	uxth	r4, r4
 8002e62:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002e66:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002e6a:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8002e6e:	e009      	b.n	8002e84 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8002e70:	b212      	sxth	r2, r2
 8002e72:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002e76:	b2a4      	uxth	r4, r4
 8002e78:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002e7c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002e80:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002e84:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8002e88:	780a      	ldrb	r2, [r1, #0]
 8002e8a:	b216      	sxth	r6, r2
 8002e8c:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8002e90:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8002e94:	f024 02f0 	bic.w	r2, r4, #240	; 0xf0
 8002e98:	0512      	lsls	r2, r2, #20
 8002e9a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002e9e:	0d12      	lsrs	r2, r2, #20
 8002ea0:	432a      	orrs	r2, r5
 8002ea2:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002ea6:	7a8c      	ldrb	r4, [r1, #10]
 8002ea8:	780a      	ldrb	r2, [r1, #0]
 8002eaa:	2c00      	cmp	r4, #0
 8002eac:	d175      	bne.n	8002f9a <HAL_PCD_EP_Open+0x1b4>
  {
    if (ep->is_in)
 8002eae:	784d      	ldrb	r5, [r1, #1]
 8002eb0:	888c      	ldrh	r4, [r1, #4]
 8002eb2:	2608      	movs	r6, #8
 8002eb4:	b33d      	cbz	r5, 8002f06 <HAL_PCD_EP_Open+0x120>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002eb6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002eba:	b2ad      	uxth	r5, r5
 8002ebc:	fb16 5202 	smlabb	r2, r6, r2, r5
 8002ec0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002ec4:	0864      	lsrs	r4, r4, #1
 8002ec6:	0064      	lsls	r4, r4, #1
 8002ec8:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002ecc:	780c      	ldrb	r4, [r1, #0]
 8002ece:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ed2:	0652      	lsls	r2, r2, #25
 8002ed4:	d50b      	bpl.n	8002eee <HAL_PCD_EP_Open+0x108>
 8002ed6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002eda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ede:	0512      	lsls	r2, r2, #20
 8002ee0:	0d12      	lsrs	r2, r2, #20
 8002ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002eea:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8002eee:	7809      	ldrb	r1, [r1, #0]
 8002ef0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002ef4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efc:	0412      	lsls	r2, r2, #16
 8002efe:	0c12      	lsrs	r2, r2, #16
 8002f00:	f082 0220 	eor.w	r2, r2, #32
 8002f04:	e0fe      	b.n	8003104 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002f06:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8002f0a:	b2bf      	uxth	r7, r7
 8002f0c:	fb16 7202 	smlabb	r2, r6, r2, r7
 8002f10:	3204      	adds	r2, #4
 8002f12:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8002f16:	0864      	lsrs	r4, r4, #1
 8002f18:	0064      	lsls	r4, r4, #1
 8002f1a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8002f1e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002f22:	780c      	ldrb	r4, [r1, #0]
 8002f24:	b292      	uxth	r2, r2
 8002f26:	fb16 2204 	smlabb	r2, r6, r4, r2
 8002f2a:	68ce      	ldr	r6, [r1, #12]
 8002f2c:	2e3e      	cmp	r6, #62	; 0x3e
 8002f2e:	f102 0206 	add.w	r2, r2, #6
 8002f32:	d90b      	bls.n	8002f4c <HAL_PCD_EP_Open+0x166>
 8002f34:	f3c6 144f 	ubfx	r4, r6, #5, #16
 8002f38:	06f7      	lsls	r7, r6, #27
 8002f3a:	bf04      	itt	eq
 8002f3c:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8002f40:	b2a4      	uxtheq	r4, r4
 8002f42:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002f46:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002f4a:	e006      	b.n	8002f5a <HAL_PCD_EP_Open+0x174>
 8002f4c:	f3c6 044f 	ubfx	r4, r6, #1, #16
 8002f50:	07f6      	lsls	r6, r6, #31
 8002f52:	bf44      	itt	mi
 8002f54:	3401      	addmi	r4, #1
 8002f56:	b2a4      	uxthmi	r4, r4
 8002f58:	02a4      	lsls	r4, r4, #10
 8002f5a:	b2a4      	uxth	r4, r4
 8002f5c:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002f60:	780c      	ldrb	r4, [r1, #0]
 8002f62:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f66:	0452      	lsls	r2, r2, #17
 8002f68:	d50b      	bpl.n	8002f82 <HAL_PCD_EP_Open+0x19c>
 8002f6a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f72:	0512      	lsls	r2, r2, #20
 8002f74:	0d12      	lsrs	r2, r2, #20
 8002f76:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f7e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002f82:	7809      	ldrb	r1, [r1, #0]
 8002f84:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f90:	0412      	lsls	r2, r2, #16
 8002f92:	0c12      	lsrs	r2, r2, #16
 8002f94:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002f98:	e0b4      	b.n	8003104 <HAL_PCD_EP_Open+0x31e>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8002f9a:	b212      	sxth	r2, r2
 8002f9c:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8002fa0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002fa4:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 8002fa8:	0524      	lsls	r4, r4, #20
 8002faa:	0d24      	lsrs	r4, r4, #20
 8002fac:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8002fb0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002fb4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002fb8:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002fbc:	780c      	ldrb	r4, [r1, #0]
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	b2b6      	uxth	r6, r6
 8002fc2:	fb12 6604 	smlabb	r6, r2, r4, r6
 8002fc6:	88cc      	ldrh	r4, [r1, #6]
 8002fc8:	0864      	lsrs	r4, r4, #1
 8002fca:	0064      	lsls	r4, r4, #1
 8002fcc:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 8002fd0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002fd4:	780e      	ldrb	r6, [r1, #0]
 8002fd6:	b2a4      	uxth	r4, r4
 8002fd8:	fb12 4206 	smlabb	r2, r2, r6, r4
 8002fdc:	890c      	ldrh	r4, [r1, #8]
 8002fde:	3204      	adds	r2, #4
 8002fe0:	0864      	lsrs	r4, r4, #1
 8002fe2:	0064      	lsls	r4, r4, #1
 8002fe4:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8002fe8:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 8002fea:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002fec:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	d146      	bne.n	8003080 <HAL_PCD_EP_Open+0x29a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002ff2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ff6:	0457      	lsls	r7, r2, #17
 8002ff8:	d50b      	bpl.n	8003012 <HAL_PCD_EP_Open+0x22c>
 8002ffa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ffe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003002:	0512      	lsls	r2, r2, #20
 8003004:	0d12      	lsrs	r2, r2, #20
 8003006:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800300a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800300e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003012:	780c      	ldrb	r4, [r1, #0]
 8003014:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003018:	0656      	lsls	r6, r2, #25
 800301a:	d50b      	bpl.n	8003034 <HAL_PCD_EP_Open+0x24e>
 800301c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003020:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003024:	0512      	lsls	r2, r2, #20
 8003026:	0d12      	lsrs	r2, r2, #20
 8003028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003030:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003034:	780c      	ldrb	r4, [r1, #0]
 8003036:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800303a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800303e:	0512      	lsls	r2, r2, #20
 8003040:	0d12      	lsrs	r2, r2, #20
 8003042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003046:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800304a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800304e:	780c      	ldrb	r4, [r1, #0]
 8003050:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003058:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800305c:	0412      	lsls	r2, r2, #16
 800305e:	0c12      	lsrs	r2, r2, #16
 8003060:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800306c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003070:	7809      	ldrb	r1, [r1, #0]
 8003072:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003076:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800307a:	0512      	lsls	r2, r2, #20
 800307c:	0d12      	lsrs	r2, r2, #20
 800307e:	e041      	b.n	8003104 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003080:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003084:	0455      	lsls	r5, r2, #17
 8003086:	d50b      	bpl.n	80030a0 <HAL_PCD_EP_Open+0x2ba>
 8003088:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800308c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003090:	0512      	lsls	r2, r2, #20
 8003092:	0d12      	lsrs	r2, r2, #20
 8003094:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800309c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80030a0:	780c      	ldrb	r4, [r1, #0]
 80030a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030a6:	0652      	lsls	r2, r2, #25
 80030a8:	d50b      	bpl.n	80030c2 <HAL_PCD_EP_Open+0x2dc>
 80030aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030b2:	0512      	lsls	r2, r2, #20
 80030b4:	0d12      	lsrs	r2, r2, #20
 80030b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80030be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80030c2:	780c      	ldrb	r4, [r1, #0]
 80030c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030cc:	0512      	lsls	r2, r2, #20
 80030ce:	0d12      	lsrs	r2, r2, #20
 80030d0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80030dc:	780c      	ldrb	r4, [r1, #0]
 80030de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80030e6:	0512      	lsls	r2, r2, #20
 80030e8:	0d12      	lsrs	r2, r2, #20
 80030ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030f2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80030f6:	7809      	ldrb	r1, [r1, #0]
 80030f8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80030fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003100:	0492      	lsls	r2, r2, #18
 8003102:	0c92      	lsrs	r2, r2, #18
 8003104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800310c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003110:	2300      	movs	r3, #0
 8003112:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8003116:	4618      	mov	r0, r3
 8003118:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 800311a:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800311e <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800311e:	b2cb      	uxtb	r3, r1
 8003120:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8003124:	b530      	push	{r4, r5, lr}
 8003126:	f04f 021c 	mov.w	r2, #28
 800312a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800312e:	bf15      	itete	ne
 8003130:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003134:	fb02 0101 	mlaeq	r1, r2, r1, r0
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003138:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800313a:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800313c:	09db      	lsrs	r3, r3, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 800313e:	700c      	strb	r4, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003140:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8003142:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003146:	2b01      	cmp	r3, #1
 8003148:	f000 80bf 	beq.w	80032ca <HAL_PCD_EP_Close+0x1ac>
 800314c:	2301      	movs	r3, #1
 800314e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003152:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 8003154:	7a8d      	ldrb	r5, [r1, #10]
 8003156:	784c      	ldrb	r4, [r1, #1]
 8003158:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800315a:	b212      	sxth	r2, r2
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 

  if (ep->doublebuffer == 0) 
 800315c:	bb1d      	cbnz	r5, 80031a6 <HAL_PCD_EP_Close+0x88>
  {
    if (ep->is_in)
 800315e:	b184      	cbz	r4, 8003182 <HAL_PCD_EP_Close+0x64>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003160:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003164:	0664      	lsls	r4, r4, #25
 8003166:	d55b      	bpl.n	8003220 <HAL_PCD_EP_Close+0x102>
 8003168:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800316c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003170:	0524      	lsls	r4, r4, #20
 8003172:	0d24      	lsrs	r4, r4, #20
 8003174:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003178:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800317c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8003180:	e04e      	b.n	8003220 <HAL_PCD_EP_Close+0x102>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003182:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003186:	0465      	lsls	r5, r4, #17
 8003188:	f140 808d 	bpl.w	80032a6 <HAL_PCD_EP_Close+0x188>
 800318c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003190:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003194:	0524      	lsls	r4, r4, #20
 8003196:	0d24      	lsrs	r4, r4, #20
 8003198:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800319c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80031a0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80031a4:	e07f      	b.n	80032a6 <HAL_PCD_EP_Close+0x188>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80031a6:	2c00      	cmp	r4, #0
 80031a8:	d142      	bne.n	8003230 <HAL_PCD_EP_Close+0x112>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80031aa:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80031ae:	0464      	lsls	r4, r4, #17
 80031b0:	d50b      	bpl.n	80031ca <HAL_PCD_EP_Close+0xac>
 80031b2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80031b6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80031ba:	0524      	lsls	r4, r4, #20
 80031bc:	0d24      	lsrs	r4, r4, #20
 80031be:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80031c2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80031c6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80031ca:	780c      	ldrb	r4, [r1, #0]
 80031cc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031d0:	0655      	lsls	r5, r2, #25
 80031d2:	d50b      	bpl.n	80031ec <HAL_PCD_EP_Close+0xce>
 80031d4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031dc:	0512      	lsls	r2, r2, #20
 80031de:	0d12      	lsrs	r2, r2, #20
 80031e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80031e8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80031ec:	780c      	ldrb	r4, [r1, #0]
 80031ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031f6:	0512      	lsls	r2, r2, #20
 80031f8:	0d12      	lsrs	r2, r2, #20
 80031fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031fe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003202:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003206:	780c      	ldrb	r4, [r1, #0]
 8003208:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800320c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003210:	0492      	lsls	r2, r2, #18
 8003212:	0c92      	lsrs	r2, r2, #18
 8003214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003218:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800321c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003220:	7809      	ldrb	r1, [r1, #0]
 8003222:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003226:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800322a:	0512      	lsls	r2, r2, #20
 800322c:	0d12      	lsrs	r2, r2, #20
 800322e:	e041      	b.n	80032b4 <HAL_PCD_EP_Close+0x196>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003230:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003234:	0464      	lsls	r4, r4, #17
 8003236:	d50b      	bpl.n	8003250 <HAL_PCD_EP_Close+0x132>
 8003238:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800323c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003240:	0524      	lsls	r4, r4, #20
 8003242:	0d24      	lsrs	r4, r4, #20
 8003244:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003248:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800324c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003250:	780c      	ldrb	r4, [r1, #0]
 8003252:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003256:	0652      	lsls	r2, r2, #25
 8003258:	d50b      	bpl.n	8003272 <HAL_PCD_EP_Close+0x154>
 800325a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800325e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003262:	0512      	lsls	r2, r2, #20
 8003264:	0d12      	lsrs	r2, r2, #20
 8003266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800326e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003272:	780c      	ldrb	r4, [r1, #0]
 8003274:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003278:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800327c:	0512      	lsls	r2, r2, #20
 800327e:	0d12      	lsrs	r2, r2, #20
 8003280:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003284:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003288:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800328c:	780c      	ldrb	r4, [r1, #0]
 800328e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003292:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003296:	0512      	lsls	r2, r2, #20
 8003298:	0d12      	lsrs	r2, r2, #20
 800329a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032a2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80032a6:	7809      	ldrb	r1, [r1, #0]
 80032a8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80032ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032b0:	0492      	lsls	r2, r2, #18
 80032b2:	0c92      	lsrs	r2, r2, #18
 80032b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032bc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80032c0:	2300      	movs	r3, #0
 80032c2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 80032c6:	4618      	mov	r0, r3
 80032c8:	bd30      	pop	{r4, r5, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 80032ca:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 80032cc:	bd30      	pop	{r4, r5, pc}

080032ce <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032ce:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80032d0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80032d4:	241c      	movs	r4, #28
 80032d6:	fb04 0401 	mla	r4, r4, r1, r0
 80032da:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
 80032de:	606a      	str	r2, [r5, #4]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80032e0:	2200      	movs	r2, #0
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 80032e2:	60ab      	str	r3, [r5, #8]
  ep->xfer_count = 0;
 80032e4:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 80032e8:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 80032ec:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 80032f0:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d062      	beq.n	80033be <HAL_PCD_EP_Receive+0xf0>
 80032f8:	2301      	movs	r3, #1
 80032fa:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80032fe:	68ab      	ldr	r3, [r5, #8]
 8003300:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 8003304:	42a3      	cmp	r3, r4
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8003306:	bf98      	it	ls
 8003308:	60aa      	strls	r2, [r5, #8]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800330a:	f04f 021c 	mov.w	r2, #28
 800330e:	fb02 0201 	mla	r2, r2, r1, r0
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003312:	bf84      	itt	hi
 8003314:	1b1b      	subhi	r3, r3, r4
 8003316:	60ab      	strhi	r3, [r5, #8]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003318:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 800331c:	bf88      	it	hi
 800331e:	4623      	movhi	r3, r4
 8003320:	32b0      	adds	r2, #176	; 0xb0
 8003322:	6804      	ldr	r4, [r0, #0]
 8003324:	b10d      	cbz	r5, 800332a <HAL_PCD_EP_Receive+0x5c>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003326:	7955      	ldrb	r5, [r2, #5]
 8003328:	bb15      	cbnz	r5, 8003370 <HAL_PCD_EP_Receive+0xa2>
 800332a:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 800332e:	7912      	ldrb	r2, [r2, #4]
 8003330:	b2ad      	uxth	r5, r5
 8003332:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8003336:	2b3e      	cmp	r3, #62	; 0x3e
 8003338:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800333c:	f105 0506 	add.w	r5, r5, #6
 8003340:	d90b      	bls.n	800335a <HAL_PCD_EP_Receive+0x8c>
 8003342:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8003346:	06db      	lsls	r3, r3, #27
 8003348:	bf04      	itt	eq
 800334a:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800334e:	b292      	uxtheq	r2, r2
 8003350:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003354:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003358:	e006      	b.n	8003368 <HAL_PCD_EP_Receive+0x9a>
 800335a:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800335e:	07db      	lsls	r3, r3, #31
 8003360:	bf44      	itt	mi
 8003362:	3201      	addmi	r2, #1
 8003364:	b292      	uxthmi	r2, r2
 8003366:	0292      	lsls	r2, r2, #10
 8003368:	b292      	uxth	r2, r2
 800336a:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 800336e:	e00c      	b.n	800338a <HAL_PCD_EP_Receive+0xbc>
 8003370:	2d01      	cmp	r5, #1
 8003372:	bf01      	itttt	eq
 8003374:	f8b4 5050 	ldrheq.w	r5, [r4, #80]	; 0x50
 8003378:	7912      	ldrbeq	r2, [r2, #4]
 800337a:	b2ad      	uxtheq	r5, r5
 800337c:	eb05 02c2 	addeq.w	r2, r5, r2, lsl #3
 8003380:	bf04      	itt	eq
 8003382:	eb04 0242 	addeq.w	r2, r4, r2, lsl #1
 8003386:	f8c2 340c 	streq.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800338a:	231c      	movs	r3, #28
 800338c:	fb03 0101 	mla	r1, r3, r1, r0
 8003390:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 8003394:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80033a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b0:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 80033b4:	2300      	movs	r3, #0
 80033b6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 80033be:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80033c0:	bd70      	pop	{r4, r5, r6, pc}

080033c2 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80033c2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80033c6:	231c      	movs	r3, #28
 80033c8:	fb03 0001 	mla	r0, r3, r1, r0
}
 80033cc:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 80033d0:	4770      	bx	lr

080033d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80033d4:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80033d8:	211c      	movs	r1, #28
 80033da:	fb01 0106 	mla	r1, r1, r6, r0
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033de:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80033e0:	f101 0038 	add.w	r0, r1, #56	; 0x38
 80033e4:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 80033e6:	6043      	str	r3, [r0, #4]
  ep->xfer_count = 0;
 80033e8:	2200      	movs	r2, #0
  ep->is_in = 1;
 80033ea:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80033ec:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 80033ee:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 80033f2:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 80033f6:	f894 5140 	ldrb.w	r5, [r4, #320]	; 0x140
 80033fa:	429d      	cmp	r5, r3
 80033fc:	f000 80a8 	beq.w	8003550 <HAL_PCD_EP_Transmit+0x17e>
 8003400:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003404:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003406:	6845      	ldr	r5, [r0, #4]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003408:	271c      	movs	r7, #28
 800340a:	fb07 4706 	mla	r7, r7, r6, r4
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800340e:	429d      	cmp	r5, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003410:	bf88      	it	hi
 8003412:	1aed      	subhi	r5, r5, r3
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003414:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003418:	bf86      	itte	hi
 800341a:	6045      	strhi	r5, [r0, #4]
 800341c:	461d      	movhi	r5, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 800341e:	6042      	strls	r2, [r0, #4]
 8003420:	b2ab      	uxth	r3, r5
 8003422:	f107 0228 	add.w	r2, r7, #40	; 0x28
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003426:	b989      	cbnz	r1, 800344c <HAL_PCD_EP_Transmit+0x7a>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8003428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800342a:	8892      	ldrh	r2, [r2, #4]
 800342c:	6820      	ldr	r0, [r4, #0]
 800342e:	f000 fbb3 	bl	8003b98 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8003432:	6821      	ldr	r1, [r4, #0]
 8003434:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003438:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800343c:	b292      	uxth	r2, r2
 800343e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003442:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003446:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 800344a:	e067      	b.n	800351c <HAL_PCD_EP_Transmit+0x14a>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800344c:	7852      	ldrb	r2, [r2, #1]
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	bb1a      	cbnz	r2, 800349a <HAL_PCD_EP_Transmit+0xc8>
 8003452:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003456:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800345a:	b289      	uxth	r1, r1
 800345c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003460:	2d3e      	cmp	r5, #62	; 0x3e
 8003462:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 8003466:	f101 0106 	add.w	r1, r1, #6
 800346a:	d90b      	bls.n	8003484 <HAL_PCD_EP_Transmit+0xb2>
 800346c:	f3c5 124f 	ubfx	r2, r5, #5, #16
 8003470:	06ed      	lsls	r5, r5, #27
 8003472:	bf04      	itt	eq
 8003474:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003478:	b292      	uxtheq	r2, r2
 800347a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800347e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003482:	e006      	b.n	8003492 <HAL_PCD_EP_Transmit+0xc0>
 8003484:	f3c5 024f 	ubfx	r2, r5, #1, #16
 8003488:	07ed      	lsls	r5, r5, #31
 800348a:	bf44      	itt	mi
 800348c:	3201      	addmi	r2, #1
 800348e:	b292      	uxthmi	r2, r2
 8003490:	0292      	lsls	r2, r2, #10
 8003492:	b292      	uxth	r2, r2
 8003494:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 8003498:	e00d      	b.n	80034b6 <HAL_PCD_EP_Transmit+0xe4>
 800349a:	2a01      	cmp	r2, #1
 800349c:	bf01      	itttt	eq
 800349e:	f8b0 2050 	ldrheq.w	r2, [r0, #80]	; 0x50
 80034a2:	f897 1028 	ldrbeq.w	r1, [r7, #40]	; 0x28
 80034a6:	b292      	uxtheq	r2, r2
 80034a8:	eb02 02c1 	addeq.w	r2, r2, r1, lsl #3
 80034ac:	bf04      	itt	eq
 80034ae:	eb00 0242 	addeq.w	r2, r0, r2, lsl #1
 80034b2:	f8c2 540c 	streq.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 80034b6:	251c      	movs	r5, #28
 80034b8:	fb05 4206 	mla	r2, r5, r6, r4
 80034bc:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80034c0:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 80034c4:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80034c8:	fb05 4506 	mla	r5, r5, r6, r4
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 80034cc:	067f      	lsls	r7, r7, #25
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 80034ce:	bf54      	ite	pl
 80034d0:	88ca      	ldrhpl	r2, [r1, #6]
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
    {
      pmabuffer = ep->pmaaddr1;
 80034d2:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80034d4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80034d6:	f000 fb5f 	bl	8003b98 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 80034da:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	b963      	cbnz	r3, 80034fc <HAL_PCD_EP_Transmit+0x12a>
 80034e2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80034e6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80034ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ee:	051b      	lsls	r3, r3, #20
 80034f0:	0d1b      	lsrs	r3, r3, #20
 80034f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034fa:	e00d      	b.n	8003518 <HAL_PCD_EP_Transmit+0x146>
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10d      	bne.n	800351c <HAL_PCD_EP_Transmit+0x14a>
 8003500:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003504:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800350c:	051b      	lsls	r3, r3, #20
 800350e:	0d1b      	lsrs	r3, r3, #20
 8003510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003518:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800351c:	231c      	movs	r3, #28
 800351e:	fb03 4606 	mla	r6, r3, r6, r4
 8003522:	6822      	ldr	r2, [r4, #0]
 8003524:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8003528:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800352c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800353c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8003544:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003546:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 800354a:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 800354e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 8003550:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 8003552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003554 <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003554:	6803      	ldr	r3, [r0, #0]
 8003556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800355a:	b21b      	sxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800355e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003560:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003562:	db11      	blt.n	8003588 <HAL_PCD_IRQHandler+0x34>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800356a:	0552      	lsls	r2, r2, #21
 800356c:	f140 81e7 	bpl.w	800393e <HAL_PCD_IRQHandler+0x3ea>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003570:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8003574:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800357a:	f001 fcd5 	bl	8004f28 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 800357e:	4620      	mov	r0, r4
 8003580:	2100      	movs	r1, #0
 8003582:	f7ff fc1a 	bl	8002dba <HAL_PCD_SetAddress>
 8003586:	e1da      	b.n	800393e <HAL_PCD_IRQHandler+0x3ea>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003594:	b29b      	uxth	r3, r3
 8003596:	0419      	lsls	r1, r3, #16
 8003598:	f8ad 3004 	strh.w	r3, [sp, #4]
 800359c:	d5e2      	bpl.n	8003564 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800359e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (EPindex == 0)
 80035a2:	f015 050f 	ands.w	r5, r5, #15
 80035a6:	f040 80b7 	bne.w	8003718 <HAL_PCD_IRQHandler+0x1c4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80035aa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035ae:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80035b0:	f001 0110 	and.w	r1, r1, #16
 80035b4:	b289      	uxth	r1, r1
 80035b6:	bb59      	cbnz	r1, 8003610 <HAL_PCD_IRQHandler+0xbc>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80035ca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 80035d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035da:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 80035de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e2:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80035e4:	4413      	add	r3, r2
 80035e6:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 80035e8:	4620      	mov	r0, r4
 80035ea:	f001 fc91 	bl	8004f10 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 80035ee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0cb      	beq.n	800358e <HAL_PCD_IRQHandler+0x3a>
 80035f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d1c8      	bne.n	800358e <HAL_PCD_IRQHandler+0x3a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80035fc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003600:	6821      	ldr	r1, [r4, #0]
 8003602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003606:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800360a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800360e:	e7be      	b.n	800358e <HAL_PCD_IRQHandler+0x3a>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003610:	b29b      	uxth	r3, r3
 8003612:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8003616:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800361a:	051f      	lsls	r7, r3, #20
 800361c:	d51f      	bpl.n	800365e <HAL_PCD_IRQHandler+0x10a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800361e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003622:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8003626:	b29b      	uxth	r3, r3
 8003628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800362c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003630:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003634:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800363c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003640:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8003644:	f000 fabf 	bl	8003bc6 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003648:	6822      	ldr	r2, [r4, #0]
 800364a:	8813      	ldrh	r3, [r2, #0]
 800364c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003650:	051b      	lsls	r3, r3, #20
 8003652:	0d1b      	lsrs	r3, r3, #20
 8003654:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8003656:	4620      	mov	r0, r4
 8003658:	f001 fc4a 	bl	8004ef0 <HAL_PCD_SetupStageCallback>
 800365c:	e797      	b.n	800358e <HAL_PCD_IRQHandler+0x3a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800365e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003662:	b21b      	sxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	da92      	bge.n	800358e <HAL_PCD_IRQHandler+0x3a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003668:	8803      	ldrh	r3, [r0, #0]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	051b      	lsls	r3, r3, #20
 8003670:	0d1b      	lsrs	r3, r3, #20
 8003672:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003674:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003678:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800367c:	b29b      	uxth	r3, r3
 800367e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003682:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003686:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800368a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800368e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 8003692:	b163      	cbz	r3, 80036ae <HAL_PCD_IRQHandler+0x15a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003694:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8003698:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800369c:	f000 fa93 	bl	8003bc6 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80036a0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80036a4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80036a8:	4413      	add	r3, r2
 80036aa:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80036ae:	4620      	mov	r0, r4
 80036b0:	2100      	movs	r1, #0
 80036b2:	f001 fc24 	bl	8004efe <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 80036bc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80036c0:	2d3e      	cmp	r5, #62	; 0x3e
 80036c2:	b289      	uxth	r1, r1
 80036c4:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80036c8:	f101 0106 	add.w	r1, r1, #6
 80036cc:	d90b      	bls.n	80036e6 <HAL_PCD_IRQHandler+0x192>
 80036ce:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80036d2:	06ee      	lsls	r6, r5, #27
 80036d4:	bf04      	itt	eq
 80036d6:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 80036da:	b29b      	uxtheq	r3, r3
 80036dc:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 80036e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e4:	e006      	b.n	80036f4 <HAL_PCD_IRQHandler+0x1a0>
 80036e6:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80036ea:	07ed      	lsls	r5, r5, #31
 80036ec:	bf44      	itt	mi
 80036ee:	3301      	addmi	r3, #1
 80036f0:	b29b      	uxthmi	r3, r3
 80036f2:	029b      	lsls	r3, r3, #10
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036fa:	8813      	ldrh	r3, [r2, #0]
 80036fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800370c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003714:	8013      	strh	r3, [r2, #0]
 8003716:	e73a      	b.n	800358e <HAL_PCD_IRQHandler+0x3a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8003718:	b22f      	sxth	r7, r5
 800371a:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8003724:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003728:	b21b      	sxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	f280 8084 	bge.w	8003838 <HAL_PCD_IRQHandler+0x2e4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003730:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800373a:	221c      	movs	r2, #28
 800373c:	fb02 4205 	mla	r2, r2, r5, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003740:	0d1b      	lsrs	r3, r3, #20
 8003742:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8003746:	f102 0cb8 	add.w	ip, r2, #184	; 0xb8
 800374a:	f89c 3006 	ldrb.w	r3, [ip, #6]
 800374e:	f102 0eb0 	add.w	lr, r2, #176	; 0xb0
 8003752:	b9b3      	cbnz	r3, 8003782 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003754:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003758:	f89e 1004 	ldrb.w	r1, [lr, #4]
 800375c:	b29b      	uxth	r3, r3
 800375e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003762:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003766:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 800376a:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 800376e:	2e00      	cmp	r6, #0
 8003770:	d040      	beq.n	80037f4 <HAL_PCD_IRQHandler+0x2a0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003772:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8003776:	f8be 2008 	ldrh.w	r2, [lr, #8]
 800377a:	4633      	mov	r3, r6
 800377c:	f000 fa23 	bl	8003bc6 <PCD_ReadPMA>
 8003780:	e038      	b.n	80037f4 <HAL_PCD_IRQHandler+0x2a0>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003782:	f89e 6004 	ldrb.w	r6, [lr, #4]
 8003786:	b233      	sxth	r3, r6
 8003788:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800378c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003790:	f413 4f80 	tst.w	r3, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003794:	b289      	uxth	r1, r1
 8003796:	f04f 0308 	mov.w	r3, #8
 800379a:	fb13 1306 	smlabb	r3, r3, r6, r1
 800379e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80037a2:	d009      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x264>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037a4:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 80037a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80037ac:	b186      	cbz	r6, 80037d0 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037ae:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 80037b2:	f8be 200a 	ldrh.w	r2, [lr, #10]
 80037b6:	e008      	b.n	80037ca <HAL_PCD_IRQHandler+0x276>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037b8:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80037bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80037c0:	b136      	cbz	r6, 80037d0 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037c2:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 80037c6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80037ca:	4633      	mov	r3, r6
 80037cc:	f000 f9fb 	bl	8003bc6 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80037d0:	231c      	movs	r3, #28
 80037d2:	fb03 4305 	mla	r3, r3, r5, r4
 80037d6:	6822      	ldr	r2, [r4, #0]
 80037d8:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 80037dc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80037e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e4:	051b      	lsls	r3, r3, #20
 80037e6:	0d1b      	lsrs	r3, r3, #20
 80037e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037f0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80037f4:	211c      	movs	r1, #28
 80037f6:	fb01 4105 	mla	r1, r1, r5, r4
 80037fa:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 80037fe:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003802:	4433      	add	r3, r6
 8003804:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003808:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 800380c:	4432      	add	r2, r6
 800380e:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003812:	b11b      	cbz	r3, 800381c <HAL_PCD_IRQHandler+0x2c8>
 8003814:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8003818:	4286      	cmp	r6, r0
 800381a:	d208      	bcs.n	800382e <HAL_PCD_IRQHandler+0x2da>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800381c:	231c      	movs	r3, #28
 800381e:	fb03 4305 	mla	r3, r3, r5, r4
 8003822:	4620      	mov	r0, r4
 8003824:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8003828:	f001 fb69 	bl	8004efe <HAL_PCD_DataOutStageCallback>
 800382c:	e004      	b.n	8003838 <HAL_PCD_IRQHandler+0x2e4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800382e:	4620      	mov	r0, r4
 8003830:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8003834:	f7ff fd4b 	bl	80032ce <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8003838:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800383c:	0618      	lsls	r0, r3, #24
 800383e:	f57f aea6 	bpl.w	800358e <HAL_PCD_IRQHandler+0x3a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003848:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800384c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003850:	041b      	lsls	r3, r3, #16
 8003852:	0c1b      	lsrs	r3, r3, #16
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8003854:	221c      	movs	r2, #28
 8003856:	fb02 4205 	mla	r2, r2, r5, r4
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800385a:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 800385e:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8003862:	f102 0628 	add.w	r6, r2, #40	; 0x28
 8003866:	b9a3      	cbnz	r3, 8003892 <HAL_PCD_IRQHandler+0x33e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003868:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800386c:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8003870:	b29b      	uxth	r3, r3
 8003872:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003876:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800387a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800387e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003882:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03a      	beq.n	80038fe <HAL_PCD_IRQHandler+0x3aa>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003888:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800388a:	88b2      	ldrh	r2, [r6, #4]
 800388c:	f000 f984 	bl	8003b98 <PCD_WritePMA>
 8003890:	e035      	b.n	80038fe <HAL_PCD_IRQHandler+0x3aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003892:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8003896:	b23b      	sxth	r3, r7
 8003898:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800389c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80038a0:	f013 0f40 	tst.w	r3, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038a4:	b289      	uxth	r1, r1
 80038a6:	f04f 0308 	mov.w	r3, #8
 80038aa:	fb13 1307 	smlabb	r3, r3, r7, r1
 80038ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80038b2:	d008      	beq.n	80038c6 <HAL_PCD_IRQHandler+0x372>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80038b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 80038be:	b163      	cbz	r3, 80038da <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80038c0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80038c2:	88f2      	ldrh	r2, [r6, #6]
 80038c4:	e007      	b.n	80038d6 <HAL_PCD_IRQHandler+0x382>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80038ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ce:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 80038d0:	b11b      	cbz	r3, 80038da <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80038d2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80038d4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80038d6:	f000 f95f 	bl	8003b98 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80038da:	231c      	movs	r3, #28
 80038dc:	fb03 4305 	mla	r3, r3, r5, r4
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80038e6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80038ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ee:	051b      	lsls	r3, r3, #20
 80038f0:	0d1b      	lsrs	r3, r3, #20
 80038f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	231c      	movs	r3, #28
 8003902:	fb03 4505 	mla	r5, r3, r5, r4
 8003906:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800390a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800390e:	b292      	uxth	r2, r2
 8003910:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003914:	eb01 0343 	add.w	r3, r1, r3, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003918:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800391a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 800391e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003920:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003924:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003928:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800392a:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800392c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 800392e:	63aa      	str	r2, [r5, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8003930:	b913      	cbnz	r3, 8003938 <HAL_PCD_IRQHandler+0x3e4>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003932:	f001 faed 	bl	8004f10 <HAL_PCD_DataInStageCallback>
 8003936:	e62a      	b.n	800358e <HAL_PCD_IRQHandler+0x3a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003938:	f7ff fd4b 	bl	80033d2 <HAL_PCD_EP_Transmit>
 800393c:	e627      	b.n	800358e <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003944:	0452      	lsls	r2, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8003946:	bf44      	itt	mi
 8003948:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 800394c:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8003950:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003954:	0497      	lsls	r7, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8003956:	bf44      	itt	mi
 8003958:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800395c:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8003960:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003964:	04d6      	lsls	r6, r2, #19
 8003966:	d513      	bpl.n	8003990 <HAL_PCD_IRQHandler+0x43c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8003968:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800396c:	f022 0204 	bic.w	r2, r2, #4
 8003970:	0412      	lsls	r2, r2, #16
 8003972:	0c12      	lsrs	r2, r2, #16
 8003974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8003978:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 800397c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8003980:	4620      	mov	r0, r4
 8003982:	f001 fadf 	bl	8004f44 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800398c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003996:	0515      	lsls	r5, r2, #20
 8003998:	d518      	bpl.n	80039cc <HAL_PCD_IRQHandler+0x478>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800399a:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 800399e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80039a2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80039a6:	b292      	uxth	r2, r2
 80039a8:	f042 0208 	orr.w	r2, r2, #8
 80039ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80039b0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80039b4:	b292      	uxth	r2, r2
 80039b6:	f042 0204 	orr.w	r2, r2, #4
 80039ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80039be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039c2:	04d8      	lsls	r0, r3, #19
 80039c4:	d402      	bmi.n	80039cc <HAL_PCD_IRQHandler+0x478>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80039c6:	4620      	mov	r0, r4
 80039c8:	f001 fabb 	bl	8004f42 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80039d2:	0591      	lsls	r1, r2, #22
 80039d4:	d506      	bpl.n	80039e4 <HAL_PCD_IRQHandler+0x490>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80039d6:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 80039da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80039de:	4620      	mov	r0, r4
 80039e0:	f001 fa9e 	bl	8004f20 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80039ea:	05d2      	lsls	r2, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80039ec:	bf44      	itt	mi
 80039ee:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 80039f2:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 80039f6:	b003      	add	sp, #12
 80039f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039fa <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 80039fa:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80039fe:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a00:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003a02:	d049      	beq.n	8003a98 <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8003a04:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003a06:	2301      	movs	r3, #1
 8003a08:	221c      	movs	r2, #28
 8003a0a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  if ((0x80 & ep_addr) == 0x80)
 8003a0e:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003a12:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003a16:	bf15      	itete	ne
 8003a18:	fb02 0203 	mlane	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a1c:	fb02 0201 	mlaeq	r2, r2, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003a20:	3228      	addne	r2, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a22:	32b4      	addeq	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8003a24:	2101      	movs	r1, #1
 8003a26:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8003a28:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003a2a:	09e3      	lsrs	r3, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8003a2c:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003a2e:	7053      	strb	r3, [r2, #1]
 8003a30:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8003a32:	b979      	cbnz	r1, 8003a54 <HAL_PCD_EP_SetStall+0x5a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003a34:	8813      	ldrh	r3, [r2, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a44:	f083 0310 	eor.w	r3, r3, #16
 8003a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a50:	8013      	strh	r3, [r2, #0]
 8003a52:	e01c      	b.n	8003a8e <HAL_PCD_EP_SetStall+0x94>
 8003a54:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 8003a56:	b153      	cbz	r3, 8003a6e <HAL_PCD_EP_SetStall+0x74>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8003a58:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	f083 0310 	eor.w	r3, r3, #16
 8003a6c:	e009      	b.n	8003a82 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8003a6e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003a98:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8003a9a:	bd10      	pop	{r4, pc}

08003a9c <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8003a9c:	b2cb      	uxtb	r3, r1
 8003a9e:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	f04f 021c 	mov.w	r2, #28
 8003aa8:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003aac:	bf15      	itete	ne
 8003aae:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ab2:	fb02 0101 	mlaeq	r1, r2, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003ab6:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ab8:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003aba:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8003abc:	2200      	movs	r2, #0
 8003abe:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8003ac0:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003ac2:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8003ac4:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d049      	beq.n	8003b60 <HAL_PCD_EP_ClrStall+0xc4>
 8003acc:	2301      	movs	r3, #1
 8003ace:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003ad2:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8003ad4:	784b      	ldrb	r3, [r1, #1]
 8003ad6:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003ad8:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 8003ada:	b1db      	cbz	r3, 8003b14 <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003adc:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003ae0:	065b      	lsls	r3, r3, #25
 8003ae2:	d50b      	bpl.n	8003afc <HAL_PCD_EP_ClrStall+0x60>
 8003ae4:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aec:	051b      	lsls	r3, r3, #20
 8003aee:	0d1b      	lsrs	r3, r3, #20
 8003af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003af8:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003afc:	7809      	ldrb	r1, [r1, #0]
 8003afe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003b12:	e01a      	b.n	8003b4a <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003b14:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003b18:	045b      	lsls	r3, r3, #17
 8003b1a:	d50b      	bpl.n	8003b34 <HAL_PCD_EP_ClrStall+0x98>
 8003b1c:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b24:	051b      	lsls	r3, r3, #20
 8003b26:	0d1b      	lsrs	r3, r3, #20
 8003b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b30:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003b34:	7809      	ldrb	r1, [r1, #0]
 8003b36:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b52:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8003b56:	2300      	movs	r3, #0
 8003b58:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8003b60:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8003b62:	bd10      	pop	{r4, pc}

08003b64 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8003b64:	f011 0f80 	tst.w	r1, #128	; 0x80
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8003b68:	b530      	push	{r4, r5, lr}
 8003b6a:	f04f 051c 	mov.w	r5, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003b6e:	bf1b      	ittet	ne
 8003b70:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
 8003b74:	fb05 0004 	mlane	r0, r5, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b78:	fb05 0001 	mlaeq	r0, r5, r1, r0
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003b7c:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b7e:	bf08      	it	eq
 8003b80:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b82:	b912      	cbnz	r2, 8003b8a <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8003b84:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003b86:	8083      	strh	r3, [r0, #4]
 8003b88:	e004      	b.n	8003b94 <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003b8a:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8003b8c:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8003b8e:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003b90:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8003b92:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8003b94:	2000      	movs	r0, #0
 8003b96:	bd30      	pop	{r4, r5, pc}

08003b98 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003b9e:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003ba0:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003ba2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003ba6:	2400      	movs	r4, #0
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	f101 0102 	add.w	r1, r1, #2
 8003bae:	d009      	beq.n	8003bc4 <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003bb0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003bb4:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003bb8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 8003bbc:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8003bc0:	3401      	adds	r4, #1
 8003bc2:	e7f1      	b.n	8003ba8 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8003bc4:	bd30      	pop	{r4, r5, pc}

08003bc6 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003bcc:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003bce:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003bd0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003bd4:	2400      	movs	r4, #0
 8003bd6:	429c      	cmp	r4, r3
 8003bd8:	d005      	beq.n	8003be6 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003bda:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003bde:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8003be2:	3401      	adds	r4, #1
 8003be4:	e7f7      	b.n	8003bd6 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8003be6:	bd10      	pop	{r4, pc}

08003be8 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003be8:	4770      	bx	lr

08003bea <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003bea:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003bec:	6804      	ldr	r4, [r0, #0]
 8003bee:	9d03      	ldr	r5, [sp, #12]
 8003bf0:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003bf2:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8003bf6:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8003bfa:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8003bfe:	f020 0003 	bic.w	r0, r0, #3
 8003c02:	4328      	orrs	r0, r5
 8003c04:	4303      	orrs	r3, r0
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003c06:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8003c10:	6062      	str	r2, [r4, #4]
 8003c12:	bd30      	pop	{r4, r5, pc}

08003c14 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	4604      	mov	r4, r0
 8003c18:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003c1a:	f7fe ff23 	bl	8002a64 <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c1e:	6823      	ldr	r3, [r4, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003c20:	4606      	mov	r6, r0

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c22:	6998      	ldr	r0, [r3, #24]
 8003c24:	f010 0010 	ands.w	r0, r0, #16
 8003c28:	d039      	beq.n	8003c9e <I2C_IsAcknowledgeFailed+0x8a>
  {
    /* Generate stop if necessary only in case of I2C peripheral in MASTER mode */
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8003c2a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003c2e:	2a12      	cmp	r2, #18
 8003c30:	d007      	beq.n	8003c42 <I2C_IsAcknowledgeFailed+0x2e>
 8003c32:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003c36:	2a52      	cmp	r2, #82	; 0x52
 8003c38:	d003      	beq.n	8003c42 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8003c3a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003c3e:	2a62      	cmp	r2, #98	; 0x62
 8003c40:	d112      	bne.n	8003c68 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* No need to generate the STOP condition if AUTOEND mode is enabled */
      /* Generate the STOP condition only in case of SOFTEND mode is enabled */
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	0190      	lsls	r0, r2, #6
 8003c46:	d40f      	bmi.n	8003c68 <I2C_IsAcknowledgeFailed+0x54>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	e00a      	b.n	8003c68 <I2C_IsAcknowledgeFailed+0x54>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	0692      	lsls	r2, r2, #26
 8003c56:	d411      	bmi.n	8003c7c <I2C_IsAcknowledgeFailed+0x68>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c58:	1c69      	adds	r1, r5, #1
 8003c5a:	d0fa      	beq.n	8003c52 <I2C_IsAcknowledgeFailed+0x3e>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003c5c:	b135      	cbz	r5, 8003c6c <I2C_IsAcknowledgeFailed+0x58>
 8003c5e:	f7fe ff01 	bl	8002a64 <HAL_GetTick>
 8003c62:	1b80      	subs	r0, r0, r6
 8003c64:	42a8      	cmp	r0, r5
 8003c66:	d801      	bhi.n	8003c6c <I2C_IsAcknowledgeFailed+0x58>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	e7f2      	b.n	8003c52 <I2C_IsAcknowledgeFailed+0x3e>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c72:	2300      	movs	r3, #0
 8003c74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003c78:	2003      	movs	r0, #3
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c80:	2220      	movs	r2, #32
 8003c82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	4a06      	ldr	r2, [pc, #24]	; (8003ca0 <I2C_IsAcknowledgeFailed+0x8c>)
 8003c88:	400a      	ands	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 8003c92:	2001      	movs	r0, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c94:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 8003c96:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	fe00e800 	.word	0xfe00e800

08003ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 8003ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca8:	4604      	mov	r4, r0
 8003caa:	460e      	mov	r6, r1
 8003cac:	4690      	mov	r8, r2
 8003cae:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7fe fed8 	bl	8002a64 <HAL_GetTick>
 8003cb4:	4607      	mov	r7, r0
     
  /* Wait until flag is set */
  if(Status == RESET)
 8003cb6:	f1b8 0f00 	cmp.w	r8, #0
 8003cba:	d125      	bne.n	8003d08 <I2C_WaitOnFlagUntilTimeout+0x64>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	6993      	ldr	r3, [r2, #24]
 8003cc0:	4033      	ands	r3, r6
 8003cc2:	42b3      	cmp	r3, r6
 8003cc4:	d00e      	beq.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003cc6:	1c69      	adds	r1, r5, #1
 8003cc8:	d0f9      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cca:	b17d      	cbz	r5, 8003cec <I2C_WaitOnFlagUntilTimeout+0x48>
 8003ccc:	f7fe feca 	bl	8002a64 <HAL_GetTick>
 8003cd0:	1bc0      	subs	r0, r0, r7
 8003cd2:	42a8      	cmp	r0, r5
 8003cd4:	d9f2      	bls.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0x18>
 8003cd6:	e009      	b.n	8003cec <I2C_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003cd8:	1c6b      	adds	r3, r5, #1
 8003cda:	d106      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8003cdc:	6993      	ldr	r3, [r2, #24]
 8003cde:	4033      	ands	r3, r6
 8003ce0:	42b3      	cmp	r3, r6
 8003ce2:	d0f9      	beq.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cea:	b945      	cbnz	r5, 8003cfe <I2C_WaitOnFlagUntilTimeout+0x5a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cfe:	f7fe feb1 	bl	8002a64 <HAL_GetTick>
 8003d02:	1bc0      	subs	r0, r0, r7
 8003d04:	42a8      	cmp	r0, r5
 8003d06:	d8f1      	bhi.n	8003cec <I2C_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8003d08:	6822      	ldr	r2, [r4, #0]
 8003d0a:	e7e7      	b.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x38>

08003d0c <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4604      	mov	r4, r0
 8003d10:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8003d12:	f7fe fea7 	bl	8002a64 <HAL_GetTick>
 8003d16:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	079b      	lsls	r3, r3, #30
 8003d1e:	d41b      	bmi.n	8003d58 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7ff ff76 	bl	8003c14 <I2C_IsAcknowledgeFailed>
 8003d28:	b9c0      	cbnz	r0, 8003d5c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003d2a:	1c6a      	adds	r2, r5, #1
 8003d2c:	d0f4      	beq.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d2e:	b96d      	cbnz	r5, 8003d4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d30:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003d34:	f043 0320 	orr.w	r3, r3, #32
 8003d38:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d42:	2300      	movs	r3, #0
 8003d44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003d48:	2003      	movs	r0, #3
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d4c:	f7fe fe8a 	bl	8002a64 <HAL_GetTick>
 8003d50:	1b80      	subs	r0, r0, r6
 8003d52:	42a8      	cmp	r0, r5
 8003d54:	d9e0      	bls.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 8003d56:	e7eb      	b.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8003d58:	2000      	movs	r0, #0
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8003d5c:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}

08003d60 <I2C_RequestMemoryWrite>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003d60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d62:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003d68:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d6a:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003d6c:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d72:	b2f2      	uxtb	r2, r6
 8003d74:	f7ff ff39 	bl	8003bea <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003d78:	4620      	mov	r0, r4
 8003d7a:	9906      	ldr	r1, [sp, #24]
 8003d7c:	f7ff ffc6 	bl	8003d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d80:	b130      	cbz	r0, 8003d90 <I2C_RequestMemoryWrite+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d82:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003d86:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8003d88:	bf0c      	ite	eq
 8003d8a:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 8003d8c:	2003      	movne	r0, #3
 8003d8e:	e017      	b.n	8003dc0 <I2C_RequestMemoryWrite+0x60>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d90:	2e01      	cmp	r6, #1
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	d008      	beq.n	8003da8 <I2C_RequestMemoryWrite+0x48>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8003d96:	0a2a      	lsrs	r2, r5, #8
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	9906      	ldr	r1, [sp, #24]
 8003d9e:	f7ff ffb5 	bl	8003d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d1ed      	bne.n	8003d82 <I2C_RequestMemoryWrite+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	b2ed      	uxtb	r5, r5
 8003daa:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8003dac:	4620      	mov	r0, r4
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	2200      	movs	r2, #0
 8003db2:	9b06      	ldr	r3, [sp, #24]
 8003db4:	f7ff ff76 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8003db8:	2800      	cmp	r0, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2003      	movne	r0, #3
 8003dbe:	2000      	moveq	r0, #0
  }

return HAL_OK;
}
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}

08003dc4 <I2C_RequestMemoryRead>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8003dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003dc6:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8003dcc:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003dce:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8003dd0:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	b2f2      	uxtb	r2, r6
 8003dd6:	f7ff ff08 	bl	8003bea <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003dda:	4620      	mov	r0, r4
 8003ddc:	9906      	ldr	r1, [sp, #24]
 8003dde:	f7ff ff95 	bl	8003d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8003de2:	b130      	cbz	r0, 8003df2 <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003de8:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8003dea:	bf0c      	ite	eq
 8003dec:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 8003dee:	2003      	movne	r0, #3
 8003df0:	e017      	b.n	8003e22 <I2C_RequestMemoryRead+0x5e>
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003df2:	2e01      	cmp	r6, #1
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	d008      	beq.n	8003e0a <I2C_RequestMemoryRead+0x46>
  }      
  /* If Mememory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8003df8:	0a2a      	lsrs	r2, r5, #8
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	9906      	ldr	r1, [sp, #24]
 8003e00:	f7ff ff84 	bl	8003d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	d1ed      	bne.n	8003de4 <I2C_RequestMemoryRead+0x20>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	b2ed      	uxtb	r5, r5
 8003e0c:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8003e0e:	4620      	mov	r0, r4
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	2200      	movs	r2, #0
 8003e14:	9b06      	ldr	r3, [sp, #24]
 8003e16:	f7ff ff45 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	bf14      	ite	ne
 8003e1e:	2003      	movne	r0, #3
 8003e20:	2000      	moveq	r0, #0
  }
  
  return HAL_OK;
}
 8003e22:	b002      	add	sp, #8
 8003e24:	bd70      	pop	{r4, r5, r6, pc}

08003e26 <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 8003e26:	b570      	push	{r4, r5, r6, lr}
 8003e28:	4604      	mov	r4, r0
 8003e2a:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003e2c:	f7fe fe1a 	bl	8002a64 <HAL_GetTick>
 8003e30:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	069b      	lsls	r3, r3, #26
 8003e38:	d419      	bmi.n	8003e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	f7ff fee9 	bl	8003c14 <I2C_IsAcknowledgeFailed>
 8003e42:	b9b0      	cbnz	r0, 8003e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e44:	b96d      	cbnz	r5, 8003e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e46:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003e4a:	f043 0320 	orr.w	r3, r3, #32
 8003e4e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003e5e:	2003      	movs	r0, #3
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e62:	f7fe fdff 	bl	8002a64 <HAL_GetTick>
 8003e66:	1b80      	subs	r0, r0, r6
 8003e68:	42a8      	cmp	r0, r5
 8003e6a:	d9e2      	bls.n	8003e32 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8003e6c:	e7eb      	b.n	8003e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003e6e:	2000      	movs	r0, #0
 8003e70:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8003e72:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8003e74:	bd70      	pop	{r4, r5, r6, pc}

08003e76 <HAL_I2C_MspInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003e76:	4770      	bx	lr

08003e78 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8003e78:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d041      	beq.n	8003f04 <HAL_I2C_Init+0x8c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003e80:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003e84:	b90b      	cbnz	r3, 8003e8a <HAL_I2C_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e86:	f7ff fff6 	bl	8003e76 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	68e1      	ldr	r1, [r4, #12]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e9c:	6862      	ldr	r2, [r4, #4]
 8003e9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ea2:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eaa:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8003eac:	68a2      	ldr	r2, [r4, #8]
 8003eae:	b142      	cbz	r2, 8003ec2 <HAL_I2C_Init+0x4a>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eb0:	2901      	cmp	r1, #1
 8003eb2:	d103      	bne.n	8003ebc <HAL_I2C_Init+0x44>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	e007      	b.n	8003ecc <HAL_I2C_Init+0x54>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ebc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ec0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ec2:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ec4:	bf04      	itt	eq
 8003ec6:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003eca:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ecc:	685a      	ldr	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ece:	6961      	ldr	r1, [r4, #20]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ed0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed8:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003eda:	6922      	ldr	r2, [r4, #16]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	69a1      	ldr	r1, [r4, #24]
 8003ee0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ee4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ee6:	6a21      	ldr	r1, [r4, #32]
 8003ee8:	69e2      	ldr	r2, [r4, #28]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efa:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 8003f02:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003f04:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 8003f06:	bd10      	pop	{r4, pc}

08003f08 <HAL_I2C_MspDeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003f08:	4770      	bx	lr

08003f0a <HAL_I2C_DeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003f0a:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	b188      	cbz	r0, 8003f34 <HAL_I2C_DeInit+0x2a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003f10:	6802      	ldr	r2, [r0, #0]
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f12:	2302      	movs	r3, #2
 8003f14:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003f18:	6813      	ldr	r3, [r2, #0]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003f20:	f7ff fff2 	bl	8003f08 <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f24:	2000      	movs	r0, #0
 8003f26:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_RESET;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003f2a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 8003f2e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 8003f32:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003f34:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 8003f36:	bd10      	pop	{r4, pc}

08003f38 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003f3c:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8003f44:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8003f48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003f4c:	b2ed      	uxtb	r5, r5
 8003f4e:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	4604      	mov	r4, r0
 8003f52:	4688      	mov	r8, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003f54:	d164      	bne.n	8004020 <HAL_I2C_Mem_Write+0xe8>
  { 
    if((pData == NULL) || (Size == 0)) 
 8003f56:	f1b9 0f00 	cmp.w	r9, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;                                    
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	e062      	b.n	8004026 <HAL_I2C_Mem_Write+0xee>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  { 
    if((pData == NULL) || (Size == 0)) 
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	d0fb      	beq.n	8003f5c <HAL_I2C_Mem_Write+0x24>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f64:	6807      	ldr	r7, [r0, #0]
 8003f66:	69bf      	ldr	r7, [r7, #24]
 8003f68:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 8003f6c:	d158      	bne.n	8004020 <HAL_I2C_Mem_Write+0xe8>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6e:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 8003f72:	f1be 0f01 	cmp.w	lr, #1
 8003f76:	d053      	beq.n	8004020 <HAL_I2C_Mem_Write+0xe8>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8003f78:	f04f 0e52 	mov.w	lr, #82	; 0x52
 8003f7c:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f80:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8003f88:	f8cd a000 	str.w	sl, [sp]
 8003f8c:	f7ff fee8 	bl	8003d60 <I2C_RequestMemoryWrite>
 8003f90:	b120      	cbz	r0, 8003f9c <HAL_I2C_Mem_Write+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f92:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f96:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8003f9a:	e031      	b.n	8004000 <HAL_I2C_Mem_Write+0xc8>

    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f9c:	9000      	str	r0, [sp, #0]
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 8003f9e:	2eff      	cmp	r6, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	4641      	mov	r1, r8
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 8003fa4:	d81c      	bhi.n	8003fe0 <HAL_I2C_Mem_Write+0xa8>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fa6:	b2f2      	uxtb	r2, r6
 8003fa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fac:	f7ff fe1d 	bl	8003bea <I2C_TransferConfig>
      Sizetmp = Size;
 8003fb0:	4635      	mov	r5, r6
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	f7ff fea9 	bl	8003d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8003fba:	b9f8      	cbnz	r0, 8003ffc <HAL_I2C_Mem_Write+0xc4>
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	f819 2b01 	ldrb.w	r2, [r9], #1
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
      Size--;
 8003fc4:	3e01      	subs	r6, #1

      if((Sizetmp == 0)&&(Size!=0))
 8003fc6:	3d01      	subs	r5, #1
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
      Sizetmp--;
      Size--;
 8003fc8:	b2b6      	uxth	r6, r6

      if((Sizetmp == 0)&&(Size!=0))
 8003fca:	d110      	bne.n	8003fee <HAL_I2C_Mem_Write+0xb6>
 8003fcc:	b18e      	cbz	r6, 8003ff2 <HAL_I2C_Mem_Write+0xba>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8003fce:	4620      	mov	r0, r4
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	4653      	mov	r3, sl
 8003fd6:	f7ff fe65 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003fda:	bb18      	cbnz	r0, 8004024 <HAL_I2C_Mem_Write+0xec>
        }

        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fdc:	9500      	str	r5, [sp, #0]
 8003fde:	e7de      	b.n	8003f9e <HAL_I2C_Mem_Write+0x66>
 8003fe0:	22ff      	movs	r2, #255	; 0xff
 8003fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fe6:	f7ff fe00 	bl	8003bea <I2C_TransferConfig>
          Sizetmp = 255;
 8003fea:	25ff      	movs	r5, #255	; 0xff
 8003fec:	e7e1      	b.n	8003fb2 <HAL_I2C_Mem_Write+0x7a>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }
      
    }while(Size > 0);
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d1df      	bne.n	8003fb2 <HAL_I2C_Mem_Write+0x7a>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	2119      	movs	r1, #25
 8003ff6:	f7ff ff16 	bl	8003e26 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ffa:	b120      	cbz	r0, 8004006 <HAL_I2C_Mem_Write+0xce>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004000:	2b04      	cmp	r3, #4
 8004002:	d10f      	bne.n	8004024 <HAL_I2C_Mem_Write+0xec>
 8004004:	e7aa      	b.n	8003f5c <HAL_I2C_Mem_Write+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	2220      	movs	r2, #32
 800400a:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 800400c:	6859      	ldr	r1, [r3, #4]
 800400e:	4a07      	ldr	r2, [pc, #28]	; (800402c <HAL_I2C_Mem_Write+0xf4>)
 8004010:	400a      	ands	r2, r1
 8004012:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY; 	  
 8004014:	2301      	movs	r3, #1
 8004016:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 800401e:	e002      	b.n	8004026 <HAL_I2C_Mem_Write+0xee>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2002      	movs	r0, #2
 8004022:	e000      	b.n	8004026 <HAL_I2C_Mem_Write+0xee>
      if((Sizetmp == 0)&&(Size!=0))
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
 8004024:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004026:	b002      	add	sp, #8
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	fe00e800 	.word	0xfe00e800

08004030 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004034:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004038:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800403c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8004040:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004044:	b2ed      	uxtb	r5, r5
 8004046:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	4604      	mov	r4, r0
 800404a:	4688      	mov	r8, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800404c:	d16c      	bne.n	8004128 <HAL_I2C_Mem_Read+0xf8>
  {    
    if((pData == NULL) || (Size == 0)) 
 800404e:	f1b9 0f00 	cmp.w	r9, #0
 8004052:	d101      	bne.n	8004058 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;                                    
 8004054:	2001      	movs	r0, #1
 8004056:	e068      	b.n	800412a <HAL_I2C_Mem_Read+0xfa>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL) || (Size == 0)) 
 8004058:	2e00      	cmp	r6, #0
 800405a:	d0fb      	beq.n	8004054 <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800405c:	6807      	ldr	r7, [r0, #0]
 800405e:	69bf      	ldr	r7, [r7, #24]
 8004060:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 8004064:	d160      	bne.n	8004128 <HAL_I2C_Mem_Read+0xf8>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004066:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 800406a:	f1be 0f01 	cmp.w	lr, #1
 800406e:	d05b      	beq.n	8004128 <HAL_I2C_Mem_Read+0xf8>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8004070:	f04f 0e62 	mov.w	lr, #98	; 0x62
 8004074:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004078:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800407c:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8004080:	f8cd a000 	str.w	sl, [sp]
 8004084:	f7ff fe9e 	bl	8003dc4 <I2C_RequestMemoryRead>
 8004088:	b120      	cbz	r0, 8004094 <HAL_I2C_Mem_Read+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408e:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8004092:	e038      	b.n	8004106 <HAL_I2C_Mem_Read+0xd6>
 8004094:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 8004098:	2eff      	cmp	r6, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4620      	mov	r0, r4
 800409e:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 80040a0:	d821      	bhi.n	80040e6 <HAL_I2C_Mem_Read+0xb6>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80040a2:	b2f2      	uxtb	r2, r6
 80040a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a8:	f7ff fd9f 	bl	8003bea <I2C_TransferConfig>
      Sizetmp = Size;
 80040ac:	4635      	mov	r5, r6
    }
    
    do
    {  
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 80040ae:	4620      	mov	r0, r4
 80040b0:	2104      	movs	r1, #4
 80040b2:	2200      	movs	r2, #0
 80040b4:	4653      	mov	r3, sl
 80040b6:	f7ff fdf5 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 80040ba:	bb30      	cbnz	r0, 800410a <HAL_I2C_Mem_Read+0xda>
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 80040bc:	6823      	ldr	r3, [r4, #0]

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 80040be:	3e01      	subs	r6, #1
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f809 3b01 	strb.w	r3, [r9], #1

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   

      if((Sizetmp == 0)&&(Size!=0))
 80040c6:	3d01      	subs	r5, #1
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 80040c8:	b2b6      	uxth	r6, r6

      if((Sizetmp == 0)&&(Size!=0))
 80040ca:	d113      	bne.n	80040f4 <HAL_I2C_Mem_Read+0xc4>
 80040cc:	b1a6      	cbz	r6, 80040f8 <HAL_I2C_Mem_Read+0xc8>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80040ce:	4620      	mov	r0, r4
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	462a      	mov	r2, r5
 80040d4:	4653      	mov	r3, sl
 80040d6:	f7ff fde5 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 80040da:	b9b0      	cbnz	r0, 800410a <HAL_I2C_Mem_Read+0xda>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040dc:	9500      	str	r5, [sp, #0]
 80040de:	4620      	mov	r0, r4
 80040e0:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 80040e2:	2eff      	cmp	r6, #255	; 0xff
 80040e4:	e7dc      	b.n	80040a0 <HAL_I2C_Mem_Read+0x70>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040e6:	22ff      	movs	r2, #255	; 0xff
 80040e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ec:	f7ff fd7d 	bl	8003bea <I2C_TransferConfig>
          Sizetmp = 255;
 80040f0:	25ff      	movs	r5, #255	; 0xff
 80040f2:	e7dc      	b.n	80040ae <HAL_I2C_Mem_Read+0x7e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }

    }while(Size > 0);
 80040f4:	2e00      	cmp	r6, #0
 80040f6:	d1da      	bne.n	80040ae <HAL_I2C_Mem_Read+0x7e>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 80040f8:	4620      	mov	r0, r4
 80040fa:	2119      	movs	r1, #25
 80040fc:	f7ff fe93 	bl	8003e26 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004100:	b128      	cbz	r0, 800410e <HAL_I2C_Mem_Read+0xde>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004102:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004106:	2b04      	cmp	r3, #4
 8004108:	d0a4      	beq.n	8004054 <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 800410a:	2003      	movs	r0, #3
 800410c:	e00d      	b.n	800412a <HAL_I2C_Mem_Read+0xfa>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	2220      	movs	r2, #32
 8004112:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	4a06      	ldr	r2, [pc, #24]	; (8004130 <HAL_I2C_Mem_Read+0x100>)
 8004118:	400a      	ands	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 800411c:	2301      	movs	r3, #1
 800411e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004122:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 8004126:	e000      	b.n	800412a <HAL_I2C_Mem_Read+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2002      	movs	r0, #2
  }
}
 800412a:	b002      	add	sp, #8
 800412c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004130:	fe00e800 	.word	0xfe00e800

08004134 <HAL_I2C_GetState>:
  * @param  hi2c : I2C handle
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 8004134:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8004138:	4770      	bx	lr

0800413a <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800413a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413e:	4604      	mov	r4, r0
 8004140:	460f      	mov	r7, r1
 8004142:	4616      	mov	r6, r2
 8004144:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8004146:	f7fe fc8d 	bl	8002a64 <HAL_GetTick>
 800414a:	4680      	mov	r8, r0
     
  while((hspi->Instance->SR & Flag) != State)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	403a      	ands	r2, r7
 8004152:	42b2      	cmp	r2, r6
 8004154:	d034      	beq.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004156:	1c6a      	adds	r2, r5, #1
 8004158:	d0f9      	beq.n	800414e <SPI_WaitFlagStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800415a:	b94d      	cbnz	r5, 8004170 <SPI_WaitFlagStateUntilTimeout+0x36>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004164:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004166:	6862      	ldr	r2, [r4, #4]
 8004168:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800416c:	d112      	bne.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x5a>
 800416e:	e006      	b.n	800417e <SPI_WaitFlagStateUntilTimeout+0x44>
     
  while((hspi->Instance->SR & Flag) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004170:	f7fe fc78 	bl	8002a64 <HAL_GetTick>
 8004174:	ebc8 0000 	rsb	r0, r8, r0
 8004178:	42a8      	cmp	r0, r5
 800417a:	d9e7      	bls.n	800414c <SPI_WaitFlagStateUntilTimeout+0x12>
 800417c:	e7ee      	b.n	800415c <SPI_WaitFlagStateUntilTimeout+0x22>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800417e:	68a2      	ldr	r2, [r4, #8]
 8004180:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004184:	d002      	beq.n	800418c <SPI_WaitFlagStateUntilTimeout+0x52>
 8004186:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800418a:	d103      	bne.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004192:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8004194:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004196:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        {
          __HAL_SPI_RESET_CRC(hspi);
 800419a:	bf01      	itttt	eq
 800419c:	681a      	ldreq	r2, [r3, #0]
 800419e:	f422 5200 	biceq.w	r2, r2, #8192	; 0x2000
 80041a2:	601a      	streq	r2, [r3, #0]
 80041a4:	681a      	ldreq	r2, [r3, #0]
 80041a6:	bf04      	itt	eq
 80041a8:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 80041ac:	601a      	streq	r2, [r3, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041b4:	2300      	movs	r3, #0
 80041b6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80041ba:	2003      	movs	r0, #3
 80041bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 80041c0:	2000      	movs	r0, #0
}
 80041c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080041c6 <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 80041c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80041ca:	4604      	mov	r4, r0
 80041cc:	460f      	mov	r7, r1
 80041ce:	4616      	mov	r6, r2
 80041d0:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 80041d2:	f7fe fc47 	bl	8002a64 <HAL_GetTick>
 80041d6:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 80041d8:	6821      	ldr	r1, [r4, #0]
 80041da:	688a      	ldr	r2, [r1, #8]
 80041dc:	403a      	ands	r2, r7
 80041de:	42b2      	cmp	r2, r6
 80041e0:	d03b      	beq.n	800425a <SPI_WaitFifoStateUntilTimeout+0x94>
  {
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041e2:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 80041e6:	d104      	bne.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80041e8:	b91e      	cbnz	r6, 80041f2 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 80041ea:	7b0b      	ldrb	r3, [r1, #12]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f88d 3007 	strb.w	r3, [sp, #7]
    }
    if(Timeout != HAL_MAX_DELAY)
 80041f2:	1c6b      	adds	r3, r5, #1
 80041f4:	d0f1      	beq.n	80041da <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80041f6:	b94d      	cbnz	r5, 800420c <SPI_WaitFifoStateUntilTimeout+0x46>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004200:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004208:	d112      	bne.n	8004230 <SPI_WaitFifoStateUntilTimeout+0x6a>
 800420a:	e006      	b.n	800421a <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
    }
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800420c:	f7fe fc2a 	bl	8002a64 <HAL_GetTick>
 8004210:	ebc8 0000 	rsb	r0, r8, r0
 8004214:	42a8      	cmp	r0, r5
 8004216:	d9df      	bls.n	80041d8 <SPI_WaitFifoStateUntilTimeout+0x12>
 8004218:	e7ee      	b.n	80041f8 <SPI_WaitFifoStateUntilTimeout+0x32>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800421a:	68a2      	ldr	r2, [r4, #8]
 800421c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004220:	d002      	beq.n	8004228 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004222:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004226:	d103      	bne.n	8004230 <SPI_WaitFifoStateUntilTimeout+0x6a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422e:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8004230:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004232:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        {
          __HAL_SPI_RESET_CRC(hspi);
 8004236:	bf01      	itttt	eq
 8004238:	681a      	ldreq	r2, [r3, #0]
 800423a:	f422 5200 	biceq.w	r2, r2, #8192	; 0x2000
 800423e:	601a      	streq	r2, [r3, #0]
 8004240:	681a      	ldreq	r2, [r3, #0]
 8004242:	bf04      	itt	eq
 8004244:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8004248:	601a      	streq	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 800424a:	2301      	movs	r3, #1
 800424c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004250:	2300      	movs	r3, #0
 8004252:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8004256:	2003      	movs	r0, #3
 8004258:	e000      	b.n	800425c <SPI_WaitFifoStateUntilTimeout+0x96>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 800425a:	2000      	movs	r0, #0
}
 800425c:	b002      	add	sp, #8
 800425e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004262 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 8004262:	b538      	push	{r3, r4, r5, lr}
 8004264:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8004266:	2200      	movs	r2, #0
 8004268:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800426c:	462b      	mov	r3, r5
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800426e:	4604      	mov	r4, r0
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8004270:	f7ff ffa9 	bl	80041c6 <SPI_WaitFifoStateUntilTimeout>
 8004274:	4602      	mov	r2, r0
 8004276:	b968      	cbnz	r0, 8004294 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004278:	4620      	mov	r0, r4
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	462b      	mov	r3, r5
 800427e:	f7ff ff5c 	bl	800413a <SPI_WaitFlagStateUntilTimeout>
 8004282:	4602      	mov	r2, r0
 8004284:	b930      	cbnz	r0, 8004294 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 8004286:	4620      	mov	r0, r4
 8004288:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800428c:	462b      	mov	r3, r5
 800428e:	f7ff ff9a 	bl	80041c6 <SPI_WaitFifoStateUntilTimeout>
 8004292:	b130      	cbz	r0, 80042a2 <SPI_EndRxTxTransaction+0x40>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 8004294:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004298:	f043 0320 	orr.w	r3, r3, #32
 800429c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 80042a0:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 80042a2:	bd38      	pop	{r3, r4, r5, pc}

080042a4 <HAL_SPI_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80042a4:	4770      	bx	lr

080042a6 <HAL_SPI_Init>:
  *         in the SPI_InitTypeDef and create the associated handle.
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042a6:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80042a8:	4604      	mov	r4, r0
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d04c      	beq.n	8004348 <HAL_SPI_Init+0xa2>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
 80042b4:	f7ff fff6 	bl	80042a4 <HAL_SPI_MspInit>
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b8:	6821      	ldr	r1, [r4, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ba:	68e2      	ldr	r2, [r4, #12]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042bc:	680b      	ldr	r3, [r1, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042be:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c6:	600b      	str	r3, [r1, #0]
 80042c8:	f04f 0300 	mov.w	r3, #0
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042cc:	d903      	bls.n	80042d6 <HAL_SPI_Init+0x30>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042ce:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 80042d0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80042d4:	e001      	b.n	80042da <HAL_SPI_Init+0x34>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80042da:	bf18      	it	ne
 80042dc:	62a3      	strne	r3, [r4, #40]	; 0x28
  }
  
  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80042de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042e0:	b92b      	cbnz	r3, 80042ee <HAL_SPI_Init+0x48>
  {
    /* CRC Lengtht aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80042e6:	bf8c      	ite	hi
 80042e8:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80042ea:	2301      	movls	r3, #1
 80042ec:	6323      	str	r3, [r4, #48]	; 0x30
 80042ee:	6865      	ldr	r5, [r4, #4]
 80042f0:	68a6      	ldr	r6, [r4, #8]
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 80042f2:	69a3      	ldr	r3, [r4, #24]
 80042f4:	432e      	orrs	r6, r5
 80042f6:	6925      	ldr	r5, [r4, #16]
 80042f8:	432e      	orrs	r6, r5
 80042fa:	6965      	ldr	r5, [r4, #20]
 80042fc:	432e      	orrs	r6, r5
 80042fe:	69e5      	ldr	r5, [r4, #28]
 8004300:	432e      	orrs	r6, r5
 8004302:	6a25      	ldr	r5, [r4, #32]
 8004304:	432e      	orrs	r6, r5
 8004306:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004308:	432e      	orrs	r6, r5
 800430a:	f403 7500 	and.w	r5, r3, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800430e:	4335      	orrs	r5, r6
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 8004310:	600d      	str	r5, [r1, #0]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
  
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004312:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004314:	2d02      	cmp	r5, #2
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 8004316:	bf02      	ittt	eq
 8004318:	680d      	ldreq	r5, [r1, #0]
 800431a:	f445 6500 	orreq.w	r5, r5, #2048	; 0x800
 800431e:	600d      	streq	r5, [r1, #0]
 8004320:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004322:	432a      	orrs	r2, r5
 8004324:	6b65      	ldr	r5, [r4, #52]	; 0x34
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	4315      	orrs	r5, r2
 800432a:	f003 0204 	and.w	r2, r3, #4
 800432e:	ea45 0302 	orr.w	r3, r5, r2
                         hspi->Init.DataSize ) | frxth;
 8004332:	4303      	orrs	r3, r0
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8004334:	604b      	str	r3, [r1, #4]
                         hspi->Init.DataSize ) | frxth;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8004336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004338:	610b      	str	r3, [r1, #16]
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800433a:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800433c:	2301      	movs	r3, #1
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800433e:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 8004342:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  
  return HAL_OK;
 8004346:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  { 
    return HAL_ERROR;
 8004348:	2001      	movs	r0, #1
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 800434a:	bd70      	pop	{r4, r5, r6, pc}

0800434c <HAL_SPI_MspDeInit>:
  * @brief SPI MSP DeInit
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800434c:	4770      	bx	lr

0800434e <HAL_SPI_DeInit>:
  * @brief  DeInitializes the SPI peripheral 
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800434e:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004350:	4604      	mov	r4, r0
 8004352:	b188      	cbz	r0, 8004378 <HAL_SPI_DeInit+0x2a>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004354:	6802      	ldr	r2, [r0, #0]
  if(hspi == NULL)
  {
     return HAL_ERROR;
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004356:	2302      	movs	r3, #2
 8004358:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800435c:	6813      	ldr	r3, [r2, #0]
 800435e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004362:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004364:	f7ff fff2 	bl	800434c <HAL_SPI_MspDeInit>
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004368:	2000      	movs	r0, #0
 800436a:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 800436e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  
  __HAL_UNLOCK(hspi);
 8004372:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
  return HAL_OK;
 8004376:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
     return HAL_ERROR;
 8004378:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_RESET;
  
  __HAL_UNLOCK(hspi);
    
  return HAL_OK;
}
 800437a:	bd10      	pop	{r4, pc}

0800437c <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800437c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint16_t tmpreg __attribute((unused)) = 0;
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8004380:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8004384:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 8004386:	f04f 0b00 	mov.w	fp, #0
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 800438a:	2d01      	cmp	r5, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800438c:	4604      	mov	r4, r0
 800438e:	4689      	mov	r9, r1
 8004390:	4692      	mov	sl, r2
 8004392:	4698      	mov	r8, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 8004394:	f8ad b006 	strh.w	fp, [sp, #6]
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8004398:	d001      	beq.n	800439e <HAL_SPI_TransmitReceive+0x22>
  {
    return HAL_BUSY;
 800439a:	2002      	movs	r0, #2
 800439c:	e138      	b.n	8004610 <HAL_SPI_TransmitReceive+0x294>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800439e:	2900      	cmp	r1, #0
 80043a0:	f000 8133 	beq.w	800460a <HAL_SPI_TransmitReceive+0x28e>
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	f000 8130 	beq.w	800460a <HAL_SPI_TransmitReceive+0x28e>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 812d 	beq.w	800460a <HAL_SPI_TransmitReceive+0x28e>
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 80043b0:	f7fe fb58 	bl	8002a64 <HAL_GetTick>
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 80043b4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80043b8:	2b01      	cmp	r3, #1
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 80043ba:	4607      	mov	r7, r0
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 80043bc:	d0ed      	beq.n	800439a <HAL_SPI_TransmitReceive+0x1e>
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80043be:	2305      	movs	r3, #5
 80043c0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80043c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043c6:	6822      	ldr	r2, [r4, #0]
  }

  tickstart = HAL_GetTick();
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 80043c8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  {
    __HAL_SPI_RESET_CRC(hspi);
 80043d0:	bf08      	it	eq
 80043d2:	6813      	ldreq	r3, [r2, #0]
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d4:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 80043d8:	bf08      	it	eq
 80043da:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = pRxData;
 80043de:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80043e2:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80043e6:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 80043ea:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80043ee:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 80043f2:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 80043f6:	bf04      	itt	eq
 80043f8:	6013      	streq	r3, [r2, #0]
 80043fa:	6813      	ldreq	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 80043fc:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 80043fe:	bf04      	itt	eq
 8004400:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8004404:	6013      	streq	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8004406:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800440a:	6853      	ldr	r3, [r2, #4]
  {
    __HAL_SPI_RESET_CRC(hspi);
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800440c:	d802      	bhi.n	8004414 <HAL_SPI_TransmitReceive+0x98>
 800440e:	f1b8 0f01 	cmp.w	r8, #1
 8004412:	d902      	bls.n	800441a <HAL_SPI_TransmitReceive+0x9e>
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004418:	e001      	b.n	800441e <HAL_SPI_TransmitReceive+0xa2>
  }
  else
  {
    /* set fiforxthreshold according the reception data lenght: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800441a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800441e:	6053      	str	r3, [r2, #4]
  }
  
  /* Check if the SPI is already enabled */ 
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	0658      	lsls	r0, r3, #25
  {
    /* Enable SPI peripheral */    
    __HAL_SPI_ENABLE(hspi);
 8004424:	bf5e      	ittt	pl
 8004426:	6813      	ldrpl	r3, [r2, #0]
 8004428:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800442c:	6013      	strpl	r3, [r2, #0]
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800442e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004432:	d94b      	bls.n	80044cc <HAL_SPI_TransmitReceive+0x150>
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 8004434:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004436:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 800443a:	2b00      	cmp	r3, #0
 800443c:	d034      	beq.n	80044a8 <HAL_SPI_TransmitReceive+0x12c>
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	6891      	ldr	r1, [r2, #8]
 8004442:	0789      	lsls	r1, r1, #30
 8004444:	d511      	bpl.n	800446a <HAL_SPI_TransmitReceive+0xee>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004446:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004448:	8809      	ldrh	r1, [r1, #0]
 800444a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800444e:	3b01      	subs	r3, #1
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004450:	3102      	adds	r1, #2
        hspi->TxXferCount--;
 8004452:	b29b      	uxth	r3, r3
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004454:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004456:	87e3      	strh	r3, [r4, #62]	; 0x3e
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 8004458:	b93b      	cbnz	r3, 800446a <HAL_SPI_TransmitReceive+0xee>
 800445a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004460:	bf02      	ittt	eq
 8004462:	6813      	ldreq	r3, [r2, #0]
 8004464:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004468:	6013      	streq	r3, [r2, #0]
        } 
      }
      
      /* Wait until RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800446a:	b168      	cbz	r0, 8004488 <HAL_SPI_TransmitReceive+0x10c>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	07d2      	lsls	r2, r2, #31
 8004472:	d509      	bpl.n	8004488 <HAL_SPI_TransmitReceive+0x10c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004478:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800447c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800447e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004482:	3b01      	subs	r3, #1
 8004484:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      }
      if(Timeout != HAL_MAX_DELAY)
 8004488:	1c75      	adds	r5, r6, #1
 800448a:	d0d3      	beq.n	8004434 <HAL_SPI_TransmitReceive+0xb8>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800448c:	b936      	cbnz	r6, 800449c <HAL_SPI_TransmitReceive+0x120>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800448e:	2301      	movs	r3, #1
 8004490:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 8004494:	2300      	movs	r3, #0
 8004496:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800449a:	e0b8      	b.n	800460e <HAL_SPI_TransmitReceive+0x292>
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800449c:	f7fe fae2 	bl	8002a64 <HAL_GetTick>
 80044a0:	1bc0      	subs	r0, r0, r7
 80044a2:	42b0      	cmp	r0, r6
 80044a4:	d9c6      	bls.n	8004434 <HAL_SPI_TransmitReceive+0xb8>
 80044a6:	e7f2      	b.n	800448e <HAL_SPI_TransmitReceive+0x112>
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d1de      	bne.n	800446a <HAL_SPI_TransmitReceive+0xee>
      }
    }
  }
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80044ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b2:	f040 808a 	bne.w	80045ca <HAL_SPI_TransmitReceive+0x24e>
 80044b6:	e05d      	b.n	8004574 <HAL_SPI_TransmitReceive+0x1f8>
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	6891      	ldr	r1, [r2, #8]
 80044bc:	0788      	lsls	r0, r1, #30
 80044be:	d409      	bmi.n	80044d4 <HAL_SPI_TransmitReceive+0x158>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 80044c0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d126      	bne.n	8004516 <HAL_SPI_TransmitReceive+0x19a>
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
      }
      if(Timeout != HAL_MAX_DELAY)
 80044c8:	1c73      	adds	r3, r6, #1
 80044ca:	d146      	bne.n	800455a <HAL_SPI_TransmitReceive+0x1de>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 80044cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f2      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x13c>
 80044d2:	e04a      	b.n	800456a <HAL_SPI_TransmitReceive+0x1ee>
 80044d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
 80044d6:	2b02      	cmp	r3, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80044d8:	bf9f      	itttt	ls
 80044da:	1c4b      	addls	r3, r1, #1
 80044dc:	63a3      	strls	r3, [r4, #56]	; 0x38
 80044de:	780b      	ldrbls	r3, [r1, #0]
 80044e0:	7313      	strbls	r3, [r2, #12]
          hspi->TxXferCount--;
 80044e2:	bf91      	iteee	ls
 80044e4:	8fe3      	ldrhls	r3, [r4, #62]	; 0x3e
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80044e6:	8809      	ldrhhi	r1, [r1, #0]
 80044e8:	60d1      	strhi	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
 80044ea:	3b02      	subhi	r3, #2
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
 80044ec:	bf94      	ite	ls
 80044ee:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f2:	6ba2      	ldrhi	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
 80044f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 80044f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f8:	bf84      	itt	hi
 80044fa:	3202      	addhi	r2, #2
 80044fc:	63a2      	strhi	r2, [r4, #56]	; 0x38
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1de      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x144>
 8004502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004508:	bf01      	itttt	eq
 800450a:	6822      	ldreq	r2, [r4, #0]
 800450c:	6813      	ldreq	r3, [r2, #0]
 800450e:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004512:	6013      	streq	r3, [r2, #0]
 8004514:	e7d4      	b.n	80044c0 <HAL_SPI_TransmitReceive+0x144>
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8004516:	6822      	ldr	r2, [r4, #0]
 8004518:	6891      	ldr	r1, [r2, #8]
 800451a:	07c9      	lsls	r1, r1, #31
 800451c:	d5d4      	bpl.n	80044c8 <HAL_SPI_TransmitReceive+0x14c>
      {
        if(hspi->RxXferCount > 1)
 800451e:	2b01      	cmp	r3, #1
 8004520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004522:	d910      	bls.n	8004546 <HAL_SPI_TransmitReceive+0x1ca>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004524:	68d1      	ldr	r1, [r2, #12]
 8004526:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800452a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800452c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004530:	3b02      	subs	r3, #2
 8004532:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 8004534:	2b01      	cmp	r3, #1
      {
        if(hspi->RxXferCount > 1)
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
          hspi->pRxBuffPtr += sizeof(uint16_t);
          hspi->RxXferCount -= 2;
 8004536:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800453a:	d8c5      	bhi.n	80044c8 <HAL_SPI_TransmitReceive+0x14c>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800453c:	6853      	ldr	r3, [r2, #4]
 800453e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004542:	6053      	str	r3, [r2, #4]
 8004544:	e7c0      	b.n	80044c8 <HAL_SPI_TransmitReceive+0x14c>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 8004546:	1c59      	adds	r1, r3, #1
 8004548:	6421      	str	r1, [r4, #64]	; 0x40
 800454a:	7b12      	ldrb	r2, [r2, #12]
 800454c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800454e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004552:	3b01      	subs	r3, #1
 8004554:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004558:	e7b6      	b.n	80044c8 <HAL_SPI_TransmitReceive+0x14c>
        }
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800455a:	2e00      	cmp	r6, #0
 800455c:	d097      	beq.n	800448e <HAL_SPI_TransmitReceive+0x112>
 800455e:	f7fe fa81 	bl	8002a64 <HAL_GetTick>
 8004562:	1bc0      	subs	r0, r0, r7
 8004564:	42b0      	cmp	r0, r6
 8004566:	d9b1      	bls.n	80044cc <HAL_SPI_TransmitReceive+0x150>
 8004568:	e791      	b.n	800448e <HAL_SPI_TransmitReceive+0x112>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800456a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1a6      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x144>
 8004572:	e79b      	b.n	80044ac <HAL_SPI_TransmitReceive+0x130>
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 8004574:	2102      	movs	r1, #2
 8004576:	4620      	mov	r0, r4
 8004578:	460a      	mov	r2, r1
 800457a:	4633      	mov	r3, r6
 800457c:	f7ff fddd 	bl	800413a <SPI_WaitFlagStateUntilTimeout>
 8004580:	b128      	cbz	r0, 800458e <HAL_SPI_TransmitReceive+0x212>
    {  
      /* Erreur on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8004582:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004586:	f043 0302 	orr.w	r3, r3, #2
 800458a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    }
    
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	d102      	bne.n	800459e <HAL_SPI_TransmitReceive+0x222>
    {
      tmpreg = hspi->Instance->DR;
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	b29b      	uxth	r3, r3
 800459c:	e013      	b.n	80045c6 <HAL_SPI_TransmitReceive+0x24a>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800459e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    {
      tmpreg = hspi->Instance->DR;
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80045a0:	7b1b      	ldrb	r3, [r3, #12]
 80045a2:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80045a6:	2902      	cmp	r1, #2
 80045a8:	d10f      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x24e>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 80045aa:	4620      	mov	r0, r4
 80045ac:	460a      	mov	r2, r1
 80045ae:	4633      	mov	r3, r6
 80045b0:	f7ff fdc3 	bl	800413a <SPI_WaitFlagStateUntilTimeout>
 80045b4:	b128      	cbz	r0, 80045c2 <HAL_SPI_TransmitReceive+0x246>
        {  
          /* Erreur on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 80045b6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80045ba:	f043 0302 	orr.w	r3, r3, #2
 80045be:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        }    
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	7b1b      	ldrb	r3, [r3, #12]
 80045c6:	f8ad 3006 	strh.w	r3, [sp, #6]
      }
    }
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 80045ca:	4620      	mov	r0, r4
 80045cc:	4631      	mov	r1, r6
 80045ce:	f7ff fe48 	bl	8004262 <SPI_EndRxTxTransaction>
 80045d2:	b9e0      	cbnz	r0, 800460e <HAL_SPI_TransmitReceive+0x292>
  }

  hspi->State = HAL_SPI_STATE_READY;
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80045d4:	6825      	ldr	r5, [r4, #0]
 80045d6:	68aa      	ldr	r2, [r5, #8]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045d8:	2301      	movs	r3, #1
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80045da:	f012 0110 	ands.w	r1, r2, #16
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80045e2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80045e6:	d00a      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x282>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 80045e8:	f042 0202 	orr.w	r2, r2, #2
 80045ec:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80045f0:	f06f 0210 	mvn.w	r2, #16
 80045f4:	60aa      	str	r2, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80045f6:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
    return HAL_ERROR;
 80045fa:	4618      	mov	r0, r3
 80045fc:	e008      	b.n	8004610 <HAL_SPI_TransmitReceive+0x294>
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 80045fe:	1c10      	adds	r0, r2, #0
    
    return HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004600:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 8004604:	bf18      	it	ne
 8004606:	2001      	movne	r0, #1
 8004608:	e002      	b.n	8004610 <HAL_SPI_TransmitReceive+0x294>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
 800460a:	4628      	mov	r0, r5
 800460c:	e000      	b.n	8004610 <HAL_SPI_TransmitReceive+0x294>
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 800460e:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8004610:	b003      	add	sp, #12
 8004612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004616 <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 8004616:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800461a:	4770      	bx	lr

0800461c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800461c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800461e:	b180      	cbz	r0, 8004642 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004620:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004624:	b113      	cbz	r3, 800462c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800462c:	b109      	cbz	r1, 8004632 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800462e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004632:	2301      	movs	r3, #1
 8004634:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8004638:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800463a:	f000 fc85 	bl	8004f48 <USBD_LL_Init>
  
  return USBD_OK; 
 800463e:	2000      	movs	r0, #0
 8004640:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004642:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 8004644:	bd08      	pop	{r3, pc}

08004646 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004646:	b119      	cbz	r1, 8004650 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 8004648:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800464c:	2000      	movs	r0, #0
 800464e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004650:	2002      	movs	r0, #2
  }
  
  return status;
}
 8004652:	4770      	bx	lr

08004654 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004654:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004656:	f000 fcb5 	bl	8004fc4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800465a:	2000      	movs	r0, #0
 800465c:	bd08      	pop	{r3, pc}

0800465e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800465e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8004660:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004664:	b90b      	cbnz	r3, 800466a <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004666:	2002      	movs	r0, #2
 8004668:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4798      	blx	r3
 800466e:	2800      	cmp	r0, #0
 8004670:	d1f9      	bne.n	8004666 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8004672:	bd08      	pop	{r3, pc}

08004674 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004674:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004676:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4798      	blx	r3
  return USBD_OK;
}
 800467e:	2000      	movs	r0, #0
 8004680:	bd08      	pop	{r3, pc}

08004682 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004682:	b538      	push	{r3, r4, r5, lr}
 8004684:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004686:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800468a:	4628      	mov	r0, r5
 800468c:	f000 f8c8 	bl	8004820 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004690:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004692:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004696:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800469a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800469e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80046a2:	f001 031f 	and.w	r3, r1, #31
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d00c      	beq.n	80046c4 <USBD_LL_SetupStage+0x42>
 80046aa:	d306      	bcc.n	80046ba <USBD_LL_SetupStage+0x38>
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d10e      	bne.n	80046ce <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80046b0:	4620      	mov	r0, r4
 80046b2:	4629      	mov	r1, r5
 80046b4:	f000 f9f8 	bl	8004aa8 <USBD_StdEPReq>
    break;
 80046b8:	e00e      	b.n	80046d8 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80046ba:	4620      	mov	r0, r4
 80046bc:	4629      	mov	r1, r5
 80046be:	f000 f8cf 	bl	8004860 <USBD_StdDevReq>
    break;
 80046c2:	e009      	b.n	80046d8 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80046c4:	4620      	mov	r0, r4
 80046c6:	4629      	mov	r1, r5
 80046c8:	f000 f9d6 	bl	8004a78 <USBD_StdItfReq>
    break;
 80046cc:	e004      	b.n	80046d8 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80046ce:	4620      	mov	r0, r4
 80046d0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80046d4:	f000 fc8e 	bl	8004ff4 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80046d8:	2000      	movs	r0, #0
 80046da:	bd38      	pop	{r3, r4, r5, pc}

080046dc <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80046dc:	b510      	push	{r4, lr}
 80046de:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80046e0:	bb09      	cbnz	r1, 8004726 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046e2:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d126      	bne.n	8004738 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 80046ea:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80046ee:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80046f2:	4299      	cmp	r1, r3
 80046f4:	d90a      	bls.n	800470c <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 80046f6:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80046f8:	428b      	cmp	r3, r1
 80046fa:	bf28      	it	cs
 80046fc:	460b      	movcs	r3, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 80046fe:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8004702:	4611      	mov	r1, r2
 8004704:	b29a      	uxth	r2, r3
 8004706:	f000 fa6c 	bl	8004be2 <USBD_CtlContinueRx>
 800470a:	e015      	b.n	8004738 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800470c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	b123      	cbz	r3, 800471e <USBD_LL_DataOutStage+0x42>
 8004714:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004718:	2a03      	cmp	r2, #3
 800471a:	d100      	bne.n	800471e <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800471c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800471e:	4620      	mov	r0, r4
 8004720:	f000 fa68 	bl	8004bf4 <USBD_CtlSendStatus>
 8004724:	e008      	b.n	8004738 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004726:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	b123      	cbz	r3, 8004738 <USBD_LL_DataOutStage+0x5c>
 800472e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004732:	2a03      	cmp	r2, #3
 8004734:	d100      	bne.n	8004738 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004736:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004738:	2000      	movs	r0, #0
 800473a:	bd10      	pop	{r4, pc}

0800473c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004740:	bba9      	cbnz	r1, 80047ae <USBD_LL_DataInStage+0x72>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004742:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8004746:	2b02      	cmp	r3, #2
 8004748:	d129      	bne.n	800479e <USBD_LL_DataInStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 800474a:	69c5      	ldr	r5, [r0, #28]
 800474c:	6a03      	ldr	r3, [r0, #32]
 800474e:	429d      	cmp	r5, r3
 8004750:	d906      	bls.n	8004760 <USBD_LL_DataInStage+0x24>
      {
        pep->rem_length -=  pep->maxpacket;
 8004752:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 8004754:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8004756:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8004758:	b29a      	uxth	r2, r3
 800475a:	f000 fa29 	bl	8004bb0 <USBD_CtlContinueSendData>
 800475e:	e01e      	b.n	800479e <USBD_LL_DataInStage+0x62>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004760:	6982      	ldr	r2, [r0, #24]
 8004762:	fbb2 f5f3 	udiv	r5, r2, r3
 8004766:	fb03 2515 	mls	r5, r3, r5, r2
 800476a:	b95d      	cbnz	r5, 8004784 <USBD_LL_DataInStage+0x48>
 800476c:	429a      	cmp	r2, r3
 800476e:	d309      	bcc.n	8004784 <USBD_LL_DataInStage+0x48>
           (pep->total_length >= pep->maxpacket) &&
 8004770:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 8004774:	429a      	cmp	r2, r3
 8004776:	d205      	bcs.n	8004784 <USBD_LL_DataInStage+0x48>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004778:	462a      	mov	r2, r5
 800477a:	f000 fa19 	bl	8004bb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800477e:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 8004782:	e00c      	b.n	800479e <USBD_LL_DataInStage+0x62>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004784:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	b12b      	cbz	r3, 8004798 <USBD_LL_DataInStage+0x5c>
 800478c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8004790:	2a03      	cmp	r2, #3
 8004792:	d101      	bne.n	8004798 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004794:	4620      	mov	r0, r4
 8004796:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fa36 	bl	8004c0a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800479e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10c      	bne.n	80047c0 <USBD_LL_DataInStage+0x84>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80047ac:	e008      	b.n	80047c0 <USBD_LL_DataInStage+0x84>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80047ae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	b123      	cbz	r3, 80047c0 <USBD_LL_DataInStage+0x84>
 80047b6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80047ba:	2a03      	cmp	r2, #3
 80047bc:	d100      	bne.n	80047c0 <USBD_LL_DataInStage+0x84>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80047be:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80047c0:	2000      	movs	r0, #0
 80047c2:	bd38      	pop	{r3, r4, r5, pc}

080047c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80047c4:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80047c6:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80047c8:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80047ca:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047cc:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80047ce:	2340      	movs	r3, #64	; 0x40
 80047d0:	f000 fbff 	bl	8004fd2 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80047d4:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047d6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80047da:	4620      	mov	r0, r4
 80047dc:	2180      	movs	r1, #128	; 0x80
 80047de:	2200      	movs	r2, #0
 80047e0:	f000 fbf7 	bl	8004fd2 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80047ea:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80047ee:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 80047f0:	b12b      	cbz	r3, 80047fe <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80047f2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80047f6:	7921      	ldrb	r1, [r4, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4620      	mov	r0, r4
 80047fc:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80047fe:	2000      	movs	r0, #0
 8004800:	bd38      	pop	{r3, r4, r5, pc}

08004802 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004802:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004804:	2000      	movs	r0, #0
 8004806:	4770      	bx	lr

08004808 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004808:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800480a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800480e:	2a03      	cmp	r2, #3
 8004810:	d104      	bne.n	800481c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004812:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	b103      	cbz	r3, 800481c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800481a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800481c:	2000      	movs	r0, #0
 800481e:	bd08      	pop	{r3, pc}

08004820 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004820:	780b      	ldrb	r3, [r1, #0]
 8004822:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004824:	784b      	ldrb	r3, [r1, #1]
 8004826:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004828:	78ca      	ldrb	r2, [r1, #3]
 800482a:	788b      	ldrb	r3, [r1, #2]
 800482c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004830:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004832:	794a      	ldrb	r2, [r1, #5]
 8004834:	790b      	ldrb	r3, [r1, #4]
 8004836:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800483a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800483c:	79ca      	ldrb	r2, [r1, #7]
 800483e:	798b      	ldrb	r3, [r1, #6]
 8004840:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004844:	80c3      	strh	r3, [r0, #6]
 8004846:	4770      	bx	lr

08004848 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004848:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 800484a:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800484c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800484e:	f000 fbd1 	bl	8004ff4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004852:	4620      	mov	r0, r4
 8004854:	2100      	movs	r1, #0
}
 8004856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 800485a:	f000 bbcb 	b.w	8004ff4 <USBD_LL_StallEP>
	...

08004860 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004860:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8004862:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004864:	4604      	mov	r4, r0
 8004866:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8004868:	2b09      	cmp	r3, #9
 800486a:	f200 80fc 	bhi.w	8004a66 <USBD_StdDevReq+0x206>
 800486e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004872:	00ce      	.short	0x00ce
 8004874:	00fa00e5 	.word	0x00fa00e5
 8004878:	00fa00e1 	.word	0x00fa00e1
 800487c:	000a0077 	.word	0x000a0077
 8004880:	00bd00fa 	.word	0x00bd00fa
 8004884:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004886:	884b      	ldrh	r3, [r1, #2]
 8004888:	0a1a      	lsrs	r2, r3, #8
 800488a:	3a01      	subs	r2, #1
 800488c:	2a06      	cmp	r2, #6
 800488e:	f200 80ea 	bhi.w	8004a66 <USBD_StdDevReq+0x206>
 8004892:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004896:	0007      	.short	0x0007
 8004898:	0018000b 	.word	0x0018000b
 800489c:	00e800e8 	.word	0x00e800e8
 80048a0:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80048a4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	e02c      	b.n	8004906 <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80048ac:	7c02      	ldrb	r2, [r0, #16]
 80048ae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80048b2:	b90a      	cbnz	r2, 80048b8 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	e000      	b.n	80048ba <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	f10d 0006 	add.w	r0, sp, #6
 80048be:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80048c0:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80048c2:	4601      	mov	r1, r0
 80048c4:	e03c      	b.n	8004940 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b05      	cmp	r3, #5
 80048ca:	f200 80cc 	bhi.w	8004a66 <USBD_StdDevReq+0x206>
 80048ce:	e8df f003 	tbb	[pc, r3]
 80048d2:	0703      	.short	0x0703
 80048d4:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80048d8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	e012      	b.n	8004906 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80048e0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	e00e      	b.n	8004906 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80048e8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	e00a      	b.n	8004906 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80048f0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	e006      	b.n	8004906 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80048f8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	e002      	b.n	8004906 <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004900:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	7c20      	ldrb	r0, [r4, #16]
 8004908:	f10d 0106 	add.w	r1, sp, #6
 800490c:	4798      	blx	r3
 800490e:	e009      	b.n	8004924 <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004910:	7c03      	ldrb	r3, [r0, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f040 80a7 	bne.w	8004a66 <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004918:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800491c:	f10d 0006 	add.w	r0, sp, #6
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	4798      	blx	r3
 8004924:	4601      	mov	r1, r0
 8004926:	e00c      	b.n	8004942 <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004928:	7c03      	ldrb	r3, [r0, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 809b 	bne.w	8004a66 <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004930:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004934:	f10d 0006 	add.w	r0, sp, #6
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800493c:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800493e:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004940:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004942:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8091 	beq.w	8004a6e <USBD_StdDevReq+0x20e>
 800494c:	88ea      	ldrh	r2, [r5, #6]
 800494e:	2a00      	cmp	r2, #0
 8004950:	f000 808d 	beq.w	8004a6e <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 8004954:	429a      	cmp	r2, r3
 8004956:	bf28      	it	cs
 8004958:	461a      	movcs	r2, r3
 800495a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800495e:	e054      	b.n	8004a0a <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004960:	888b      	ldrh	r3, [r1, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d17f      	bne.n	8004a66 <USBD_StdDevReq+0x206>
 8004966:	88cb      	ldrh	r3, [r1, #6]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d17c      	bne.n	8004a66 <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800496c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004970:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004972:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004974:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004978:	d075      	beq.n	8004a66 <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800497a:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800497e:	4631      	mov	r1, r6
 8004980:	f000 fb59 	bl	8005036 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004984:	4620      	mov	r0, r4
 8004986:	f000 f935 	bl	8004bf4 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800498a:	b10e      	cbz	r6, 8004990 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800498c:	2302      	movs	r3, #2
 800498e:	e000      	b.n	8004992 <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004990:	2301      	movs	r3, #1
 8004992:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8004996:	e06a      	b.n	8004a6e <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004998:	7889      	ldrb	r1, [r1, #2]
 800499a:	4e36      	ldr	r6, [pc, #216]	; (8004a74 <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800499c:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800499e:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80049a0:	d861      	bhi.n	8004a66 <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 80049a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d002      	beq.n	80049b0 <USBD_StdDevReq+0x150>
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d008      	beq.n	80049c0 <USBD_StdDevReq+0x160>
 80049ae:	e05a      	b.n	8004a66 <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d054      	beq.n	8004a5e <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80049b4:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80049b6:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80049b8:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80049ba:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 80049be:	e00f      	b.n	80049e0 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80049c0:	b931      	cbnz	r1, 80049d0 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80049c2:	2302      	movs	r3, #2
 80049c4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80049c8:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80049ca:	f7ff fe53 	bl	8004674 <USBD_ClrClassConfig>
 80049ce:	e046      	b.n	8004a5e <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 80049d0:	6841      	ldr	r1, [r0, #4]
 80049d2:	2901      	cmp	r1, #1
 80049d4:	d043      	beq.n	8004a5e <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80049d6:	b2c9      	uxtb	r1, r1
 80049d8:	f7ff fe4c 	bl	8004674 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80049dc:	7831      	ldrb	r1, [r6, #0]
 80049de:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff fe3c 	bl	800465e <USBD_SetClassConfig>
 80049e6:	2802      	cmp	r0, #2
 80049e8:	d139      	bne.n	8004a5e <USBD_StdDevReq+0x1fe>
 80049ea:	e03c      	b.n	8004a66 <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 80049ec:	88ca      	ldrh	r2, [r1, #6]
 80049ee:	2a01      	cmp	r2, #1
 80049f0:	d139      	bne.n	8004a66 <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 80049f2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d003      	beq.n	8004a02 <USBD_StdDevReq+0x1a2>
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d133      	bne.n	8004a66 <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 80049fe:	1d01      	adds	r1, r0, #4
 8004a00:	e015      	b.n	8004a2e <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8004a02:	4601      	mov	r1, r0
 8004a04:	2300      	movs	r3, #0
 8004a06:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	e00f      	b.n	8004a2e <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8004a0e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004a12:	3b02      	subs	r3, #2
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d826      	bhi.n	8004a66 <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004a18:	2301      	movs	r3, #1
 8004a1a:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004a1c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004a20:	b10b      	cbz	r3, 8004a26 <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004a22:	2303      	movs	r3, #3
 8004a24:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8004a26:	4620      	mov	r0, r4
 8004a28:	f104 010c 	add.w	r1, r4, #12
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f000 f8b1 	bl	8004b94 <USBD_CtlSendData>
 8004a32:	e01c      	b.n	8004a6e <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004a34:	884b      	ldrh	r3, [r1, #2]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d119      	bne.n	8004a6e <USBD_StdDevReq+0x20e>
 8004a3a:	e008      	b.n	8004a4e <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8004a3c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004a40:	3b02      	subs	r3, #2
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d80f      	bhi.n	8004a66 <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004a46:	884b      	ldrh	r3, [r1, #2]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d110      	bne.n	8004a6e <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004a52:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004a56:	4620      	mov	r0, r4
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f000 f8c8 	bl	8004bf4 <USBD_CtlSendStatus>
 8004a64:	e003      	b.n	8004a6e <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7ff feed 	bl	8004848 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8004a6e:	2000      	movs	r0, #0
 8004a70:	b002      	add	sp, #8
 8004a72:	bd70      	pop	{r4, r5, r6, pc}
 8004a74:	20000bf0 	.word	0x20000bf0

08004a78 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004a78:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8004a7a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004a7e:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004a80:	4604      	mov	r4, r0
 8004a82:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8004a84:	d10c      	bne.n	8004aa0 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004a86:	790b      	ldrb	r3, [r1, #4]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d809      	bhi.n	8004aa0 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8004a8c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004a94:	88eb      	ldrh	r3, [r5, #6]
 8004a96:	b92b      	cbnz	r3, 8004aa4 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f8ab 	bl	8004bf4 <USBD_CtlSendStatus>
 8004a9e:	e001      	b.n	8004aa4 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8004aa0:	f7ff fed2 	bl	8004848 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}

08004aa8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004aa8:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 8004aaa:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004aac:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 8004aae:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004ab4:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 8004ab6:	d010      	beq.n	8004ada <USBD_StdEPReq+0x32>
 8004ab8:	d326      	bcc.n	8004b08 <USBD_StdEPReq+0x60>
 8004aba:	2e03      	cmp	r6, #3
 8004abc:	d14b      	bne.n	8004b56 <USBD_StdEPReq+0xae>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8004abe:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004ac2:	2a02      	cmp	r2, #2
 8004ac4:	d027      	beq.n	8004b16 <USBD_StdEPReq+0x6e>
 8004ac6:	2a03      	cmp	r2, #3
 8004ac8:	d143      	bne.n	8004b52 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004aca:	884a      	ldrh	r2, [r1, #2]
 8004acc:	b992      	cbnz	r2, 8004af4 <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004ace:	065e      	lsls	r6, r3, #25
 8004ad0:	d010      	beq.n	8004af4 <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f000 fa8e 	bl	8004ff4 <USBD_LL_StallEP>
 8004ad8:	e00c      	b.n	8004af4 <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8004ada:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004ade:	2a02      	cmp	r2, #2
 8004ae0:	d019      	beq.n	8004b16 <USBD_StdEPReq+0x6e>
 8004ae2:	2a03      	cmp	r2, #3
 8004ae4:	d135      	bne.n	8004b52 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004ae6:	884a      	ldrh	r2, [r1, #2]
 8004ae8:	bbaa      	cbnz	r2, 8004b56 <USBD_StdEPReq+0xae>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8004aea:	0659      	lsls	r1, r3, #25
 8004aec:	d008      	beq.n	8004b00 <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004aee:	4619      	mov	r1, r3
 8004af0:	f000 fa87 	bl	8005002 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004af4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004af8:	4620      	mov	r0, r4
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4629      	mov	r1, r5
 8004afe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 f877 	bl	8004bf4 <USBD_CtlSendStatus>
 8004b06:	e026      	b.n	8004b56 <USBD_StdEPReq+0xae>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8004b08:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 8004b0c:	2d02      	cmp	r5, #2
 8004b0e:	d002      	beq.n	8004b16 <USBD_StdEPReq+0x6e>
 8004b10:	2d03      	cmp	r5, #3
 8004b12:	d006      	beq.n	8004b22 <USBD_StdEPReq+0x7a>
 8004b14:	e01d      	b.n	8004b52 <USBD_StdEPReq+0xaa>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8004b16:	065a      	lsls	r2, r3, #25
 8004b18:	d01d      	beq.n	8004b56 <USBD_StdEPReq+0xae>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f000 fa6a 	bl	8004ff4 <USBD_LL_StallEP>
 8004b20:	e019      	b.n	8004b56 <USBD_StdEPReq+0xae>
 8004b22:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004b26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b2a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004b2e:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004b30:	bf14      	ite	ne
 8004b32:	3514      	addne	r5, #20
 8004b34:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004b38:	f000 fa6a 	bl	8005010 <USBD_LL_IsStallEP>
 8004b3c:	b110      	cbz	r0, 8004b44 <USBD_StdEPReq+0x9c>
      {
        pep->status = 0x0001;     
 8004b3e:	2301      	movs	r3, #1
 8004b40:	602b      	str	r3, [r5, #0]
 8004b42:	e000      	b.n	8004b46 <USBD_StdEPReq+0x9e>
      }
      else
      {
        pep->status = 0x0000;  
 8004b44:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f000 f822 	bl	8004b94 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8004b50:	e001      	b.n	8004b56 <USBD_StdEPReq+0xae>
      
    default:                         
      USBD_CtlError(pdev , req);
 8004b52:	f7ff fe79 	bl	8004848 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8004b56:	2000      	movs	r0, #0
 8004b58:	bd70      	pop	{r4, r5, r6, pc}

08004b5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004b5a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004b5c:	b1c8      	cbz	r0, 8004b92 <USBD_GetString+0x38>
 8004b5e:	4604      	mov	r4, r0
 8004b60:	1a23      	subs	r3, r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8004b62:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2d00      	cmp	r5, #0
 8004b6a:	d1f9      	bne.n	8004b60 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	3302      	adds	r3, #2
 8004b70:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8004b72:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004b74:	2303      	movs	r3, #3
 8004b76:	704b      	strb	r3, [r1, #1]
 8004b78:	3801      	subs	r0, #1
 8004b7a:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8004b7c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004b80:	b13c      	cbz	r4, 8004b92 <USBD_GetString+0x38>
    {
      unicode[idx++] = *desc++;
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 8004b88:	3302      	adds	r3, #2
 8004b8a:	2400      	movs	r4, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	548c      	strb	r4, [r1, r2]
 8004b90:	e7f4      	b.n	8004b7c <USBD_GetString+0x22>
 8004b92:	bd30      	pop	{r4, r5, pc}

08004b94 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4613      	mov	r3, r2
 8004b98:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004ba0:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8004ba2:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	462a      	mov	r2, r5
 8004ba8:	f000 fa4c 	bl	8005044 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004bac:	2000      	movs	r0, #0
 8004bae:	bd38      	pop	{r3, r4, r5, pc}

08004bb0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4622      	mov	r2, r4
 8004bba:	f000 fa43 	bl	8005044 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	bd10      	pop	{r4, pc}

08004bc2 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004bc2:	b538      	push	{r3, r4, r5, lr}
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004bc8:	2203      	movs	r2, #3
 8004bca:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8004bce:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8004bd2:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	462a      	mov	r2, r5
 8004bda:	f000 fa3a 	bl	8005052 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8004bde:	2000      	movs	r0, #0
 8004be0:	bd38      	pop	{r3, r4, r5, pc}

08004be2 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004be2:	b510      	push	{r4, lr}
 8004be4:	460c      	mov	r4, r1
 8004be6:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8004be8:	2100      	movs	r1, #0
 8004bea:	4622      	mov	r2, r4
 8004bec:	f000 fa31 	bl	8005052 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	bd10      	pop	{r4, pc}

08004bf4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004bf4:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004bf6:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004bfe:	460a      	mov	r2, r1
 8004c00:	460b      	mov	r3, r1
 8004c02:	f000 fa1f 	bl	8005044 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004c06:	2000      	movs	r0, #0
 8004c08:	bd08      	pop	{r3, pc}

08004c0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004c0a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004c0c:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004c0e:	2305      	movs	r3, #5
 8004c10:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004c14:	460a      	mov	r2, r1
 8004c16:	460b      	mov	r3, r1
 8004c18:	f000 fa1b 	bl	8005052 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	bd08      	pop	{r3, pc}

08004c20 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004c20:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004c24:	b11b      	cbz	r3, 8004c2e <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8004c26:	2000      	movs	r0, #0
 8004c28:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004c2c:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8004c2e:	2002      	movs	r0, #2
  }
}
 8004c30:	4770      	bx	lr

08004c32 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004c32:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004c36:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004c38:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004c3c:	b15b      	cbz	r3, 8004c56 <USBD_CDC_EP0_RxReady+0x24>
 8004c3e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004c42:	28ff      	cmp	r0, #255	; 0xff
 8004c44:	d007      	beq.n	8004c56 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8004c50:	23ff      	movs	r3, #255	; 0xff
 8004c52:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8004c56:	2000      	movs	r0, #0
 8004c58:	bd10      	pop	{r4, pc}
	...

08004c5c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004c5c:	2343      	movs	r3, #67	; 0x43
 8004c5e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004c60:	4800      	ldr	r0, [pc, #0]	; (8004c64 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004c62:	4770      	bx	lr
 8004c64:	20000018 	.word	0x20000018

08004c68 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004c68:	2343      	movs	r3, #67	; 0x43
 8004c6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004c6c:	4800      	ldr	r0, [pc, #0]	; (8004c70 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004c6e:	4770      	bx	lr
 8004c70:	200000e4 	.word	0x200000e4

08004c74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004c74:	2343      	movs	r3, #67	; 0x43
 8004c76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004c78:	4800      	ldr	r0, [pc, #0]	; (8004c7c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004c7a:	4770      	bx	lr
 8004c7c:	200000a0 	.word	0x200000a0

08004c80 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004c80:	230a      	movs	r3, #10
 8004c82:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004c84:	4800      	ldr	r0, [pc, #0]	; (8004c88 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004c86:	4770      	bx	lr
 8004c88:	20000094 	.word	0x20000094

08004c8c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004c90:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004c94:	f000 f9e4 	bl	8005060 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004c98:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004c9c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004ca0:	b14b      	cbz	r3, 8004cb6 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ca2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004ca6:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004cb0:	4798      	blx	r3

    return USBD_OK;
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8004cb6:	2002      	movs	r0, #2
  }
}
 8004cb8:	bd38      	pop	{r3, r4, r5, pc}

08004cba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbc:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cbe:	7809      	ldrb	r1, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004cc0:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cc4:	f001 0360 	and.w	r3, r1, #96	; 0x60
 8004cc8:	2b20      	cmp	r3, #32
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004cca:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ccc:	d120      	bne.n	8004d10 <USBD_CDC_Setup+0x56>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8004cce:	88e2      	ldrh	r2, [r4, #6]
 8004cd0:	7863      	ldrb	r3, [r4, #1]
 8004cd2:	b1ba      	cbz	r2, 8004d04 <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 8004cd4:	0609      	lsls	r1, r1, #24
 8004cd6:	d50b      	bpl.n	8004cf0 <USBD_CDC_Setup+0x36>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cd8:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004cdc:	4618      	mov	r0, r3
 8004cde:	688f      	ldr	r7, [r1, #8]
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	88e2      	ldrh	r2, [r4, #6]
 8004cea:	f7ff ff53 	bl	8004b94 <USBD_CtlSendData>
 8004cee:	e00f      	b.n	8004d10 <USBD_CDC_Setup+0x56>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8004cf0:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004cf4:	88e3      	ldrh	r3, [r4, #6]
 8004cf6:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	88e2      	ldrh	r2, [r4, #6]
 8004cfe:	f7ff ff60 	bl	8004bc2 <USBD_CtlPrepareRx>
 8004d02:	e005      	b.n	8004d10 <USBD_CDC_Setup+0x56>
      }
      
    }
    else
    {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d04:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004d08:	4618      	mov	r0, r3
 8004d0a:	688c      	ldr	r4, [r1, #8]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	47a0      	blx	r4
 
  default: 
    break;
  }
  return USBD_OK;
}
 8004d10:	2000      	movs	r0, #0
 8004d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d14 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004d14:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004d16:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004d18:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004d1a:	f000 f964 	bl	8004fe6 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4620      	mov	r0, r4
 8004d22:	f000 f960 	bl	8004fe6 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8004d26:	4620      	mov	r0, r4
 8004d28:	2182      	movs	r1, #130	; 0x82
 8004d2a:	f000 f95c 	bl	8004fe6 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004d2e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004d32:	b153      	cbz	r3, 8004d4a <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004d34:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004d3c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004d40:	f000 f998 	bl	8005074 <USBD_static_free>
    pdev->pClassData = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	bd10      	pop	{r4, pc}

08004d4e <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004d50:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004d52:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004d54:	2181      	movs	r1, #129	; 0x81
 8004d56:	2202      	movs	r2, #2
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004d58:	b94b      	cbnz	r3, 8004d6e <USBD_CDC_Init+0x20>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d5e:	f000 f938 	bl	8004fd2 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004d62:	4620      	mov	r0, r4
 8004d64:	2101      	movs	r1, #1
 8004d66:	2202      	movs	r2, #2
 8004d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d6c:	e006      	b.n	8004d7c <USBD_CDC_Init+0x2e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004d6e:	2340      	movs	r3, #64	; 0x40
 8004d70:	f000 f92f 	bl	8004fd2 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004d74:	4620      	mov	r0, r4
 8004d76:	2101      	movs	r1, #1
 8004d78:	2202      	movs	r2, #2
 8004d7a:	2340      	movs	r3, #64	; 0x40
 8004d7c:	f000 f929 	bl	8004fd2 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004d80:	2182      	movs	r1, #130	; 0x82
 8004d82:	2203      	movs	r2, #3
 8004d84:	2308      	movs	r3, #8
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 f923 	bl	8004fd2 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004d8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d90:	f000 f96c 	bl	800506c <USBD_static_malloc>
 8004d94:	4606      	mov	r6, r0
 8004d96:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8004d9a:	b1c8      	cbz	r0, 8004dd0 <USBD_CDC_Init+0x82>
  else
  {
    hcdc = pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d9c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004da4:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004da6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004daa:	2500      	movs	r5, #0
 8004dac:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004db0:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 8004db2:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004db6:	2101      	movs	r1, #1
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004db8:	b92f      	cbnz	r7, 8004dc6 <USBD_CDC_Init+0x78>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dbe:	f000 f948 	bl	8005052 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004dc6:	2340      	movs	r3, #64	; 0x40
 8004dc8:	f000 f943 	bl	8005052 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004dcc:	4628      	mov	r0, r5
 8004dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8004dd0:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8004dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dd4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8004dd4:	b119      	cbz	r1, 8004dde <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8004dd6:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8004dda:	2000      	movs	r0, #0
 8004ddc:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8004dde:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 8004de0:	4770      	bx	lr

08004de2 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004de2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8004de6:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8004de8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004dec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8004df0:	4770      	bx	lr

08004df2 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004df2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8004df6:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004df8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8004dfc:	4770      	bx	lr

08004dfe <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004dfe:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004e00:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004e04:	b175      	cbz	r5, 8004e24 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8004e06:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 8004e0a:	b96c      	cbnz	r4, 8004e28 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004e0c:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 8004e10:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8004e14:	2181      	movs	r1, #129	; 0x81
 8004e16:	f000 f915 	bl	8005044 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 8004e20:	4620      	mov	r0, r4
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004e24:	2002      	movs	r0, #2
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004e28:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}

08004e2c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004e2c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004e30:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004e32:	b163      	cbz	r3, 8004e4e <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004e34:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e3a:	2101      	movs	r1, #1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004e3c:	b914      	cbnz	r4, 8004e44 <USBD_CDC_ReceivePacket+0x18>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e42:	e000      	b.n	8004e46 <USBD_CDC_ReceivePacket+0x1a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e44:	2340      	movs	r3, #64	; 0x40
 8004e46:	f000 f904 	bl	8005052 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8004e4e:	2002      	movs	r0, #2
  }
}
 8004e50:	bd10      	pop	{r4, pc}
	...

08004e54 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 8004e58:	4c24      	ldr	r4, [pc, #144]	; (8004eec <HAL_PCD_MspInit+0x98>)
 8004e5a:	6963      	ldr	r3, [r4, #20]
 8004e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e60:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 8004e62:	6963      	ldr	r3, [r4, #20]
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004e64:	b086      	sub	sp, #24
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 8004e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e6a:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004e6c:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004e70:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004e74:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004e78:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004e7a:	a901      	add	r1, sp, #4
 8004e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004e80:	9302      	str	r3, [sp, #8]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004e82:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e84:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004e86:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004e8a:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004e8c:	f7fd fe62 	bl	8002b54 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 8004e90:	4631      	mov	r1, r6
 8004e92:	462a      	mov	r2, r5
 8004e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e98:	f7fd ff26 	bl	8002ce8 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	f7fd fde7 	bl	8002a70 <HAL_Delay>
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eaa:	f7fd ff1d 	bl	8002ce8 <HAL_GPIO_WritePin>

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004eb0:	a901      	add	r1, sp, #4
 8004eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb6:	9302      	str	r3, [sp, #8]
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004eb8:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eba:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004ebc:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004ec0:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004ec2:	f7fd fe47 	bl	8002b54 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStruct); 
#endif  

  /* Enable USB FS Clock */
  __USB_CLK_ENABLE();
 8004ec6:	69e3      	ldr	r3, [r4, #28]
 8004ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ecc:	61e3      	str	r3, [r4, #28]
  
  /* Enable SYSCFG Clock */
  __SYSCFG_CLK_ENABLE();
 8004ece:	69a3      	ldr	r3, [r4, #24]
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	61a3      	str	r3, [r4, #24]
#endif
  
#if defined (USE_USB_INTERRUPT_DEFAULT)
  
  /* Set USB Default FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8004ed6:	2105      	movs	r1, #5
 8004ed8:	462a      	mov	r2, r5
 8004eda:	2014      	movs	r0, #20
 8004edc:	f7fd fde8 	bl	8002ab0 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 8004ee0:	2014      	movs	r0, #20
 8004ee2:	f7fd fe15 	bl	8002b10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn); 
#endif
}
 8004ee6:	b006      	add	sp, #24
 8004ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eec:	40021000 	.word	0x40021000

08004ef0 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004ef0:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8004ef2:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 8004ef6:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004efa:	f7ff bbc2 	b.w	8004682 <USBD_LL_SetupStage>

08004efe <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004efe:	231c      	movs	r3, #28
 8004f00:	fb03 0301 	mla	r3, r3, r1, r0
 8004f04:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004f08:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004f0c:	f7ff bbe6 	b.w	80046dc <USBD_LL_DataOutStage>

08004f10 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004f10:	231c      	movs	r3, #28
 8004f12:	fb03 0301 	mla	r3, r3, r1, r0
 8004f16:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1c:	f7ff bc0e 	b.w	800473c <USBD_LL_DataInStage>

08004f20 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8004f20:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004f24:	f7ff bc70 	b.w	8004808 <USBD_LL_SOF>

08004f28 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004f32:	f7ff fc66 	bl	8004802 <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004f36:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 8004f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004f3e:	f7ff bc41 	b.w	80047c4 <USBD_LL_Reset>

08004f42 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004f42:	4770      	bx	lr

08004f44 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004f44:	4770      	bx	lr
	...

08004f48 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004f48:	b538      	push	{r3, r4, r5, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004f4a:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <USBD_LL_Init+0x74>)
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004f4c:	4605      	mov	r5, r0
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 8004f4e:	481c      	ldr	r0, [pc, #112]	; (8004fc0 <USBD_LL_Init+0x78>)
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.speed = PCD_SPEED_FULL;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
  pdev->pData = &hpcd;
 8004f50:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004f54:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 8004f56:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004f58:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004f5c:	2302      	movs	r3, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 8004f5e:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004f60:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8004f62:	6083      	str	r3, [r0, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8004f64:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  pdev->pData = &hpcd;
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 8004f68:	f7fd fed4 	bl	8002d14 <HAL_PCD_Init>
  
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4622      	mov	r2, r4
 8004f70:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004f74:	2340      	movs	r3, #64	; 0x40
 8004f76:	f7fe fdf5 	bl	8003b64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	460b      	mov	r3, r1
 8004f80:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004f84:	f7fe fdee 	bl	8003b64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 8004f88:	4622      	mov	r2, r4
 8004f8a:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004f8e:	2181      	movs	r1, #129	; 0x81
 8004f90:	23c0      	movs	r3, #192	; 0xc0
 8004f92:	f7fe fde7 	bl	8003b64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 8004f96:	4622      	mov	r2, r4
 8004f98:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004fa2:	f7fe fddf 	bl	8003b64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 8004fa6:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004faa:	2182      	movs	r1, #130	; 0x82
 8004fac:	4622      	mov	r2, r4
 8004fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fb2:	f7fe fdd7 	bl	8003b64 <HAL_PCDEx_PMAConfig>
    
  return USBD_OK;
}
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	bd38      	pop	{r3, r4, r5, pc}
 8004fba:	bf00      	nop
 8004fbc:	40005c00 	.word	0x40005c00
 8004fc0:	200011c0 	.word	0x200011c0

08004fc4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004fc4:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8004fc6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fca:	f7fd fef0 	bl	8002dae <HAL_PCD_Start>
  return USBD_OK;
}
 8004fce:	2000      	movs	r0, #0
 8004fd0:	bd08      	pop	{r3, pc}

08004fd2 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 8004fd6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4623      	mov	r3, r4
 8004fde:	f7fd ff02 	bl	8002de6 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	bd10      	pop	{r4, pc}

08004fe6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004fe6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004fe8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fec:	f7fe f897 	bl	800311e <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	bd08      	pop	{r3, pc}

08004ff4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ff4:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004ff6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004ffa:	f7fe fcfe 	bl	80039fa <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8004ffe:	2000      	movs	r0, #0
 8005000:	bd08      	pop	{r3, pc}

08005002 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005002:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005004:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005008:	f7fe fd48 	bl	8003a9c <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 800500c:	2000      	movs	r0, #0
 800500e:	bd08      	pop	{r3, pc}

08005010 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005010:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005014:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005018:	bf18      	it	ne
 800501a:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 800501e:	f04f 001c 	mov.w	r0, #28
 8005022:	bf15      	itete	ne
 8005024:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005028:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800502c:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005030:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
  }
}
 8005034:	4770      	bx	lr

08005036 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005036:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005038:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800503c:	f7fd febd 	bl	8002dba <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8005040:	2000      	movs	r0, #0
 8005042:	bd08      	pop	{r3, pc}

08005044 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8005044:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005046:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800504a:	f7fe f9c2 	bl	80033d2 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800504e:	2000      	movs	r0, #0
 8005050:	bd08      	pop	{r3, pc}

08005052 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8005052:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005054:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005058:	f7fe f939 	bl	80032ce <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800505c:	2000      	movs	r0, #0
 800505e:	bd08      	pop	{r3, pc}

08005060 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005060:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8005062:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005066:	f7fe f9ac 	bl	80033c2 <HAL_PCD_EP_GetRxCount>
}
 800506a:	bd08      	pop	{r3, pc}

0800506c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800506c:	4800      	ldr	r0, [pc, #0]	; (8005070 <USBD_static_malloc+0x4>)
 800506e:	4770      	bx	lr
 8005070:	20000bf4 	.word	0x20000bf4

08005074 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005074:	4770      	bx	lr
	...

08005078 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8005078:	2312      	movs	r3, #18
 800507a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 800507c:	4800      	ldr	r0, [pc, #0]	; (8005080 <USBD_VCP_DeviceDescriptor+0x8>)
 800507e:	4770      	bx	lr
 8005080:	0801abb5 	.word	0x0801abb5

08005084 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8005084:	2304      	movs	r3, #4
 8005086:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8005088:	4800      	ldr	r0, [pc, #0]	; (800508c <USBD_VCP_LangIDStrDescriptor+0x8>)
 800508a:	4770      	bx	lr
 800508c:	0801ab64 	.word	0x0801ab64

08005090 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8005090:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8005092:	2400      	movs	r4, #0
 8005094:	b2e3      	uxtb	r3, r4
 8005096:	4293      	cmp	r3, r2
 8005098:	d20d      	bcs.n	80050b6 <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 800509a:	0f03      	lsrs	r3, r0, #28
 800509c:	2b09      	cmp	r3, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800509e:	bf94      	ite	ls
 80050a0:	3330      	addls	r3, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80050a2:	3337      	addhi	r3, #55	; 0x37
 80050a4:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
 80050a8:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80050ac:	2500      	movs	r5, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80050ae:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 80050b0:	705d      	strb	r5, [r3, #1]
 80050b2:	3401      	adds	r4, #1
 80050b4:	e7ee      	b.n	8005094 <IntToUnicode+0x4>
  }
}
 80050b6:	bd30      	pop	{r4, r5, pc}

080050b8 <USBD_VCP_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 80050b8:	231a      	movs	r3, #26
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80050ba:	b510      	push	{r4, lr}
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80050bc:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <USBD_VCP_SerialStrDescriptor+0x2c>)
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 80050be:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80050c0:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <USBD_VCP_SerialStrDescriptor+0x30>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
 80050c2:	6850      	ldr	r0, [r2, #4]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80050c4:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80050c6:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
  
  if (deviceserial0 != 0)
 80050c8:	1818      	adds	r0, r3, r0
 80050ca:	d008      	beq.n	80050de <USBD_VCP_SerialStrDescriptor+0x26>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80050cc:	4907      	ldr	r1, [pc, #28]	; (80050ec <USBD_VCP_SerialStrDescriptor+0x34>)
 80050ce:	2208      	movs	r2, #8
 80050d0:	f7ff ffde 	bl	8005090 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80050d4:	4620      	mov	r0, r4
 80050d6:	4906      	ldr	r1, [pc, #24]	; (80050f0 <USBD_VCP_SerialStrDescriptor+0x38>)
 80050d8:	2204      	movs	r2, #4
 80050da:	f7ff ffd9 	bl	8005090 <IntToUnicode>
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
  
  return USBD_StringSerial;
}
 80050de:	4805      	ldr	r0, [pc, #20]	; (80050f4 <USBD_VCP_SerialStrDescriptor+0x3c>)
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	bf00      	nop
 80050e4:	1ffff7b0 	.word	0x1ffff7b0
 80050e8:	1ffff7ac 	.word	0x1ffff7ac
 80050ec:	20000146 	.word	0x20000146
 80050f0:	20000156 	.word	0x20000156
 80050f4:	20000144 	.word	0x20000144

080050f8 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80050f8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80050fa:	4c04      	ldr	r4, [pc, #16]	; (800510c <USBD_VCP_ProductStrDescriptor+0x14>)
 80050fc:	4804      	ldr	r0, [pc, #16]	; (8005110 <USBD_VCP_ProductStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80050fe:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8005100:	4621      	mov	r1, r4
 8005102:	f7ff fd2a 	bl	8004b5a <USBD_GetString>
  return USBD_StrDesc;
}
 8005106:	4620      	mov	r0, r4
 8005108:	bd10      	pop	{r4, pc}
 800510a:	bf00      	nop
 800510c:	20001338 	.word	0x20001338
 8005110:	0801ab68 	.word	0x0801ab68

08005114 <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005114:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005116:	4c04      	ldr	r4, [pc, #16]	; (8005128 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <USBD_VCP_ManufacturerStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800511a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800511c:	4621      	mov	r1, r4
 800511e:	f7ff fd1c 	bl	8004b5a <USBD_GetString>
  return USBD_StrDesc;
}
 8005122:	4620      	mov	r0, r4
 8005124:	bd10      	pop	{r4, pc}
 8005126:	bf00      	nop
 8005128:	20001338 	.word	0x20001338
 800512c:	0801ab89 	.word	0x0801ab89

08005130 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005130:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8005132:	4c04      	ldr	r4, [pc, #16]	; (8005144 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8005134:	4804      	ldr	r0, [pc, #16]	; (8005148 <USBD_VCP_ConfigStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005136:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8005138:	4621      	mov	r1, r4
 800513a:	f7ff fd0e 	bl	8004b5a <USBD_GetString>
  return USBD_StrDesc;  
}
 800513e:	4620      	mov	r0, r4
 8005140:	bd10      	pop	{r4, pc}
 8005142:	bf00      	nop
 8005144:	20001338 	.word	0x20001338
 8005148:	0801ab9c 	.word	0x0801ab9c

0800514c <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800514c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800514e:	4c04      	ldr	r4, [pc, #16]	; (8005160 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8005150:	4804      	ldr	r0, [pc, #16]	; (8005164 <USBD_VCP_InterfaceStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005152:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8005154:	4621      	mov	r1, r4
 8005156:	f7ff fd00 	bl	8004b5a <USBD_GetString>
  return USBD_StrDesc;  
}
 800515a:	4620      	mov	r0, r4
 800515c:	bd10      	pop	{r4, pc}
 800515e:	bf00      	nop
 8005160:	20001338 	.word	0x20001338
 8005164:	0801aba7 	.word	0x0801aba7

08005168 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 8005168:	2000      	movs	r0, #0
 800516a:	4770      	bx	lr

0800516c <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800516c:	b508      	push	{r3, lr}
 800516e:	460b      	mov	r3, r1
 8005170:	4602      	mov	r2, r0
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 8005172:	4611      	mov	r1, r2
 8005174:	2000      	movs	r0, #0
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	f7fc fd58 	bl	8001c2c <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800517c:	4802      	ldr	r0, [pc, #8]	; (8005188 <CDC_Itf_Receive+0x1c>)
 800517e:	f7ff fe55 	bl	8004e2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 8005182:	2000      	movs	r0, #0
 8005184:	bd08      	pop	{r3, pc}
 8005186:	bf00      	nop
 8005188:	20000f98 	.word	0x20000f98

0800518c <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 800518c:	b508      	push	{r3, lr}
  //  USBD_CDC_SetTxBuffer(&hUSBDDevice, NULL, 0);
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800518e:	4903      	ldr	r1, [pc, #12]	; (800519c <CDC_Itf_Init+0x10>)
 8005190:	4803      	ldr	r0, [pc, #12]	; (80051a0 <CDC_Itf_Init+0x14>)
 8005192:	f7ff fe2e 	bl	8004df2 <USBD_CDC_SetRxBuffer>


  return (USBD_OK);
}
 8005196:	2000      	movs	r0, #0
 8005198:	bd08      	pop	{r3, pc}
 800519a:	bf00      	nop
 800519c:	200014a8 	.word	0x200014a8
 80051a0:	20000f98 	.word	0x20000f98

080051a4 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 80051a4:	2820      	cmp	r0, #32
 80051a6:	d012      	beq.n	80051ce <CDC_Itf_Control+0x2a>
 80051a8:	2821      	cmp	r0, #33	; 0x21
 80051aa:	d122      	bne.n	80051f2 <CDC_Itf_Control+0x4e>
    /* Set the new configuration */

    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80051ac:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <CDC_Itf_Control+0x54>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	0a12      	lsrs	r2, r2, #8
 80051b6:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80051b8:	885a      	ldrh	r2, [r3, #2]
 80051ba:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80051bc:	78da      	ldrb	r2, [r3, #3]
 80051be:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 80051c0:	791a      	ldrb	r2, [r3, #4]
 80051c2:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 80051c4:	795a      	ldrb	r2, [r3, #5]
 80051c6:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 80051c8:	799b      	ldrb	r3, [r3, #6]
 80051ca:	718b      	strb	r3, [r1, #6]
    
    /* Add your code here */
    break;
 80051cc:	e011      	b.n	80051f2 <CDC_Itf_Control+0x4e>
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80051ce:	788b      	ldrb	r3, [r1, #2]
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80051d0:	784a      	ldrb	r2, [r1, #1]
 80051d2:	4809      	ldr	r0, [pc, #36]	; (80051f8 <CDC_Itf_Control+0x54>)
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80051da:	780a      	ldrb	r2, [r1, #0]
 80051dc:	4313      	orrs	r3, r2
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80051de:	78ca      	ldrb	r2, [r1, #3]
 80051e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80051e4:	6003      	str	r3, [r0, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 80051e6:	790b      	ldrb	r3, [r1, #4]
 80051e8:	7103      	strb	r3, [r0, #4]
    LineCoding.paritytype = pbuf[5];
 80051ea:	794b      	ldrb	r3, [r1, #5]
 80051ec:	7143      	strb	r3, [r0, #5]
    LineCoding.datatype   = pbuf[6];
 80051ee:	798b      	ldrb	r3, [r1, #6]
 80051f0:	7183      	strb	r3, [r0, #6]
  default:
    break;
  }
  
  return (USBD_OK);
}
 80051f2:	2000      	movs	r0, #0
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000160 	.word	0x20000160

080051fc <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 80051fc:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80051fe:	4c1c      	ldr	r4, [pc, #112]	; (8005270 <SPIx_Init+0x74>)
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 8005200:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8005202:	4620      	mov	r0, r4
 8005204:	f7ff fa07 	bl	8004616 <HAL_SPI_GetState>
 8005208:	2800      	cmp	r0, #0
 800520a:	d12e      	bne.n	800526a <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <SPIx_Init+0x78>)
 800520e:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005210:	2318      	movs	r3, #24
 8005212:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 8005214:	2307      	movs	r3, #7
 8005216:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8005218:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800521c:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800521e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005222:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8005224:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005228:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <SPIx_Init+0x7c>)
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800522c:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800522e:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005230:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8005232:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005234:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8005236:	6260      	str	r0, [r4, #36]	; 0x24
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800523e:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005246:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8005248:	23e0      	movs	r3, #224	; 0xe0
 800524a:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800524c:	2302      	movs	r3, #2
 800524e:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005250:	2303      	movs	r3, #3
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8005252:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005254:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800525a:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800525c:	a901      	add	r1, sp, #4
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800525e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005260:	f7fd fc78 	bl	8002b54 <HAL_GPIO_Init>
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;

    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 8005264:	4620      	mov	r0, r4
 8005266:	f7ff f81e 	bl	80042a6 <HAL_SPI_Init>
  }
}
 800526a:	b006      	add	sp, #24
 800526c:	bd10      	pop	{r4, pc}
 800526e:	bf00      	nop
 8005270:	20000e24 	.word	0x20000e24
 8005274:	40013000 	.word	0x40013000
 8005278:	40021000 	.word	0x40021000

0800527c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800527c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  uint8_t receivedbyte = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	f88d 3017 	strb.w	r3, [sp, #23]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <SPIx_WriteRead+0x38>)
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8005286:	f88d 000f 	strb.w	r0, [sp, #15]

  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	480a      	ldr	r0, [pc, #40]	; (80052b8 <SPIx_WriteRead+0x3c>)
 8005290:	f10d 010f 	add.w	r1, sp, #15
 8005294:	f10d 0217 	add.w	r2, sp, #23
 8005298:	2301      	movs	r3, #1
 800529a:	f7ff f86f 	bl	800437c <HAL_SPI_TransmitReceive>
 800529e:	b120      	cbz	r0, 80052aa <SPIx_WriteRead+0x2e>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80052a0:	4805      	ldr	r0, [pc, #20]	; (80052b8 <SPIx_WriteRead+0x3c>)
 80052a2:	f7ff f854 	bl	800434e <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 80052a6:	f7ff ffa9 	bl	80051fc <SPIx_Init>
  {
    SPIx_Error();
  }
  
  return receivedbyte;
}
 80052aa:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80052ae:	b007      	add	sp, #28
 80052b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80052b4:	20000178 	.word	0x20000178
 80052b8:	20000e24 	.word	0x20000e24

080052bc <I2Cx_Init>:
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 80052bc:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80052be:	4c16      	ldr	r4, [pc, #88]	; (8005318 <I2Cx_Init+0x5c>)
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 80052c0:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7fe ff36 	bl	8004134 <HAL_I2C_GetState>
 80052c8:	bb18      	cbnz	r0, 8005312 <I2Cx_Init+0x56>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80052ca:	4b14      	ldr	r3, [pc, #80]	; (800531c <I2Cx_Init+0x60>)
 80052cc:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 80052ce:	2332      	movs	r3, #50	; 0x32
 80052d0:	60a3      	str	r3, [r4, #8]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80052d2:	4d13      	ldr	r5, [pc, #76]	; (8005320 <I2Cx_Init+0x64>)
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80052d4:	6120      	str	r0, [r4, #16]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052d6:	2301      	movs	r3, #1
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2 = 0;
 80052d8:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80052da:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80052dc:	6220      	str	r0, [r4, #32]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052de:	60e3      	str	r3, [r4, #12]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80052e0:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80052e2:	4810      	ldr	r0, [pc, #64]	; (8005324 <I2Cx_Init+0x68>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80052e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e8:	616b      	str	r3, [r5, #20]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 80052ea:	23c0      	movs	r3, #192	; 0xc0
 80052ec:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80052ee:	2302      	movs	r3, #2
 80052f0:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80052f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80052f4:	2303      	movs	r3, #3
 80052f6:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80052f8:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80052fa:	eb0d 0103 	add.w	r1, sp, r3
  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80052fe:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8005300:	f7fd fc28 	bl	8002b54 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8005304:	69eb      	ldr	r3, [r5, #28]
 8005306:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800530a:	61eb      	str	r3, [r5, #28]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 800530c:	4620      	mov	r0, r4
 800530e:	f7fe fdb3 	bl	8003e78 <HAL_I2C_Init>
  }
}
 8005312:	b007      	add	sp, #28
 8005314:	bd30      	pop	{r4, r5, pc}
 8005316:	bf00      	nop
 8005318:	20000e84 	.word	0x20000e84
 800531c:	40005400 	.word	0x40005400
 8005320:	40021000 	.word	0x40021000
 8005324:	48000400 	.word	0x48000400

08005328 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005328:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800532a:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800532c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800532e:	b168      	cbz	r0, 800534c <BSP_LED_Init+0x24>
 8005330:	2801      	cmp	r0, #1
 8005332:	d00b      	beq.n	800534c <BSP_LED_Init+0x24>
 8005334:	2802      	cmp	r0, #2
 8005336:	d009      	beq.n	800534c <BSP_LED_Init+0x24>
 8005338:	2803      	cmp	r0, #3
 800533a:	d007      	beq.n	800534c <BSP_LED_Init+0x24>
 800533c:	2804      	cmp	r0, #4
 800533e:	d005      	beq.n	800534c <BSP_LED_Init+0x24>
 8005340:	2805      	cmp	r0, #5
 8005342:	d003      	beq.n	800534c <BSP_LED_Init+0x24>
 8005344:	2806      	cmp	r0, #6
 8005346:	d001      	beq.n	800534c <BSP_LED_Init+0x24>
 8005348:	2807      	cmp	r0, #7
 800534a:	d104      	bne.n	8005356 <BSP_LED_Init+0x2e>
 800534c:	4a0d      	ldr	r2, [pc, #52]	; (8005384 <BSP_LED_Init+0x5c>)
 800534e:	6953      	ldr	r3, [r2, #20]
 8005350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005354:	6153      	str	r3, [r2, #20]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005356:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <BSP_LED_Init+0x60>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005358:	4e0c      	ldr	r6, [pc, #48]	; (800538c <BSP_LED_Init+0x64>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800535a:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800535e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005362:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005364:	2301      	movs	r3, #1
 8005366:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005368:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800536a:	a901      	add	r1, sp, #4

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800536c:	2303      	movs	r3, #3
 800536e:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005370:	f7fd fbf0 	bl	8002b54 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005374:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005378:	4629      	mov	r1, r5
 800537a:	2200      	movs	r2, #0
 800537c:	f7fd fcb4 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 8005380:	b006      	add	sp, #24
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	40021000 	.word	0x40021000
 8005388:	0801abc8 	.word	0x0801abc8
 800538c:	20000184 	.word	0x20000184

08005390 <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005392:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8005394:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005398:	4a03      	ldr	r2, [pc, #12]	; (80053a8 <BSP_LED_On+0x18>)
 800539a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800539e:	2201      	movs	r2, #1
 80053a0:	f7fd bca2 	b.w	8002ce8 <HAL_GPIO_WritePin>
 80053a4:	20000184 	.word	0x20000184
 80053a8:	0801abc8 	.word	0x0801abc8

080053ac <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80053ac:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80053ae:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80053b0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80053b4:	4a03      	ldr	r2, [pc, #12]	; (80053c4 <BSP_LED_Off+0x18>)
 80053b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f7fd bc94 	b.w	8002ce8 <HAL_GPIO_WritePin>
 80053c0:	20000184 	.word	0x20000184
 80053c4:	0801abc8 	.word	0x0801abc8

080053c8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80053c8:	b510      	push	{r4, lr}
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <BSP_PB_Init+0x68>)
 80053cc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80053ce:	b918      	cbnz	r0, 80053d8 <BSP_PB_Init+0x10>
 80053d0:	695a      	ldr	r2, [r3, #20]
 80053d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80053d6:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	619a      	str	r2, [r3, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80053e0:	b969      	cbnz	r1, 80053fe <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80053e2:	2301      	movs	r3, #1
 80053e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80053e6:	2302      	movs	r3, #2
 80053e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80053ea:	2303      	movs	r3, #3
 80053ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053f0:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80053f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80053f6:	a901      	add	r1, sp, #4
 80053f8:	f7fd fbac 	bl	8002b54 <HAL_GPIO_Init>
 80053fc:	e016      	b.n	800542c <BSP_PB_Init+0x64>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 80053fe:	2901      	cmp	r1, #1
 8005400:	d114      	bne.n	800542c <BSP_PB_Init+0x64>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005402:	2303      	movs	r3, #3
 8005404:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <BSP_PB_Init+0x70>)
 8005408:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <BSP_PB_Init+0x6c>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800540c:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800540e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005412:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005414:	a901      	add	r1, sp, #4

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005416:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005418:	f7fd fb9c 	bl	8002b54 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800541c:	2006      	movs	r0, #6
 800541e:	210f      	movs	r1, #15
 8005420:	4622      	mov	r2, r4
 8005422:	f7fd fb45 	bl	8002ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005426:	2006      	movs	r0, #6
 8005428:	f7fd fb72 	bl	8002b10 <HAL_NVIC_EnableIRQ>
  }
}
 800542c:	b006      	add	sp, #24
 800542e:	bd10      	pop	{r4, pc}
 8005430:	40021000 	.word	0x40021000
 8005434:	2000017c 	.word	0x2000017c
 8005438:	10110000 	.word	0x10110000

0800543c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800543c:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800543e:	4b03      	ldr	r3, [pc, #12]	; (800544c <BSP_PB_GetState+0x10>)
 8005440:	2101      	movs	r1, #1
 8005442:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005446:	f7fd fc49 	bl	8002cdc <HAL_GPIO_ReadPin>
}
 800544a:	bd08      	pop	{r3, pc}
 800544c:	2000017c 	.word	0x2000017c

08005450 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8005450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8005454:	4c16      	ldr	r4, [pc, #88]	; (80054b0 <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8005456:	4d17      	ldr	r5, [pc, #92]	; (80054b4 <GYRO_IO_Init+0x64>)
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8005458:	6963      	ldr	r3, [r4, #20]
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800545a:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800545c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005460:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005462:	2600      	movs	r6, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8005464:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005468:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800546c:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800546e:	4628      	mov	r0, r5
 8005470:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8005472:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005476:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800547a:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800547c:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800547e:	f7fd fb69 	bl	8002b54 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8005482:	4642      	mov	r2, r8
 8005484:	4628      	mov	r0, r5
 8005486:	4649      	mov	r1, r9
 8005488:	f7fd fc2e 	bl	8002ce8 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800548c:	6963      	ldr	r3, [r4, #20]
 800548e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005492:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005494:	4628      	mov	r0, r5
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8005496:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005498:	a901      	add	r1, sp, #4
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800549a:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800549c:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800549e:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80054a0:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80054a2:	f7fd fb57 	bl	8002b54 <HAL_GPIO_Init>
  
  SPIx_Init();
 80054a6:	f7ff fea9 	bl	80051fc <SPIx_Init>
}
 80054aa:	b007      	add	sp, #28
 80054ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054b0:	40021000 	.word	0x40021000
 80054b4:	48001000 	.word	0x48001000

080054b8 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80054b8:	2a01      	cmp	r2, #1
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80054ba:	b570      	push	{r4, r5, r6, lr}
 80054bc:	460d      	mov	r5, r1
 80054be:	4606      	mov	r6, r0
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80054c0:	bf88      	it	hi
 80054c2:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80054c6:	480c      	ldr	r0, [pc, #48]	; (80054f8 <GYRO_IO_Write+0x40>)
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80054c8:	4614      	mov	r4, r2
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80054ca:	2108      	movs	r1, #8
 80054cc:	2200      	movs	r2, #0
 80054ce:	f7fd fc0b 	bl	8002ce8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80054d2:	4628      	mov	r0, r5
 80054d4:	f7ff fed2 	bl	800527c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80054d8:	b134      	cbz	r4, 80054e8 <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 80054da:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 80054de:	3c01      	subs	r4, #1
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
  {
    SPIx_WriteRead(*pBuffer);
 80054e0:	f7ff fecc 	bl	800527c <SPIx_WriteRead>
    NumByteToWrite--;
 80054e4:	b2a4      	uxth	r4, r4
 80054e6:	e7f7      	b.n	80054d8 <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80054e8:	4803      	ldr	r0, [pc, #12]	; (80054f8 <GYRO_IO_Write+0x40>)
 80054ea:	2108      	movs	r1, #8
 80054ec:	2201      	movs	r2, #1
}
 80054ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80054f2:	f7fd bbf9 	b.w	8002ce8 <HAL_GPIO_WritePin>
 80054f6:	bf00      	nop
 80054f8:	48001000 	.word	0x48001000

080054fc <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 80054fc:	2a01      	cmp	r2, #1
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80054fe:	b570      	push	{r4, r5, r6, lr}
  if(NumByteToRead > 0x01)
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8005500:	bf8c      	ite	hi
 8005502:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8005506:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800550a:	4606      	mov	r6, r0
 800550c:	4614      	mov	r4, r2
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800550e:	480c      	ldr	r0, [pc, #48]	; (8005540 <GYRO_IO_Read+0x44>)
 8005510:	2108      	movs	r1, #8
 8005512:	2200      	movs	r2, #0
 8005514:	f7fd fbe8 	bl	8002ce8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8005518:	4628      	mov	r0, r5
 800551a:	f7ff feaf 	bl	800527c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800551e:	b13c      	cbz	r4, 8005530 <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8005520:	2000      	movs	r0, #0
 8005522:	f7ff feab 	bl	800527c <SPIx_WriteRead>
    NumByteToRead--;
 8005526:	3c01      	subs	r4, #1
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8005528:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 800552c:	b2a4      	uxth	r4, r4
 800552e:	e7f6      	b.n	800551e <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005530:	4803      	ldr	r0, [pc, #12]	; (8005540 <GYRO_IO_Read+0x44>)
 8005532:	2108      	movs	r1, #8
 8005534:	2201      	movs	r2, #1
}  
 8005536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800553a:	f7fd bbd5 	b.w	8002ce8 <HAL_GPIO_WritePin>
 800553e:	bf00      	nop
 8005540:	48001000 	.word	0x48001000

08005544 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8005544:	4b16      	ldr	r3, [pc, #88]	; (80055a0 <COMPASSACCELERO_IO_Init+0x5c>)
 8005546:	695a      	ldr	r2, [r3, #20]
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8005548:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800554a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800554e:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005550:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005552:	4d14      	ldr	r5, [pc, #80]	; (80055a4 <COMPASSACCELERO_IO_Init+0x60>)
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005554:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8005558:	b086      	sub	sp, #24
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800555a:	615a      	str	r2, [r3, #20]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800555c:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800555e:	2400      	movs	r4, #0
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005560:	eb0d 0103 	add.w	r1, sp, r3
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8005564:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005566:	4628      	mov	r0, r5
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8005568:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800556a:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800556c:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800556e:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8005570:	f7fd faf0 	bl	8002b54 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 8005574:	4622      	mov	r2, r4
 8005576:	4621      	mov	r1, r4
 8005578:	2008      	movs	r0, #8
 800557a:	f7fd fa99 	bl	8002ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800557e:	2008      	movs	r0, #8
 8005580:	f7fd fac6 	bl	8002b10 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8005584:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005586:	4628      	mov	r0, r5
 8005588:	a901      	add	r1, sp, #4
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800558a:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800558c:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800558e:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005590:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005592:	f7fd fadf 	bl	8002b54 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8005596:	f7ff fe91 	bl	80052bc <I2Cx_Init>
}
 800559a:	b006      	add	sp, #24
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	bf00      	nop
 80055a0:	40021000 	.word	0x40021000
 80055a4:	48001000 	.word	0x48001000

080055a8 <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80055a8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80055aa:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80055ac:	480e      	ldr	r0, [pc, #56]	; (80055e8 <COMPASSACCELERO_IO_ITConfig+0x40>)
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80055ae:	6953      	ldr	r3, [r2, #20]
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80055b0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80055b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055b6:	6153      	str	r3, [r2, #20]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80055b8:	2330      	movs	r3, #48	; 0x30
 80055ba:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <COMPASSACCELERO_IO_ITConfig+0x44>)
 80055be:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80055c0:	2400      	movs	r4, #0
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80055c2:	2303      	movs	r3, #3
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80055c4:	a901      	add	r1, sp, #4
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80055c6:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80055c8:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80055ca:	f7fd fac3 	bl	8002b54 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 80055ce:	4621      	mov	r1, r4
 80055d0:	4622      	mov	r2, r4
 80055d2:	200a      	movs	r0, #10
 80055d4:	f7fd fa6c 	bl	8002ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80055d8:	200a      	movs	r0, #10
 80055da:	f7fd fa99 	bl	8002b10 <HAL_NVIC_EnableIRQ>
  
}
 80055de:	b006      	add	sp, #24
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	48001000 	.word	0x48001000
 80055ec:	10110000 	.word	0x10110000

080055f0 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80055f0:	b510      	push	{r4, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	ab06      	add	r3, sp, #24
 80055f6:	4604      	mov	r4, r0
 80055f8:	f803 2d01 	strb.w	r2, [r3, #-1]!
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80055fc:	460a      	mov	r2, r1
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	4908      	ldr	r1, [pc, #32]	; (8005624 <COMPASSACCELERO_IO_Write+0x34>)
 8005602:	4809      	ldr	r0, [pc, #36]	; (8005628 <COMPASSACCELERO_IO_Write+0x38>)
 8005604:	2301      	movs	r3, #1
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	6809      	ldr	r1, [r1, #0]
 800560a:	9102      	str	r1, [sp, #8]
 800560c:	4621      	mov	r1, r4
 800560e:	f7fe fc93 	bl	8003f38 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005612:	b120      	cbz	r0, 800561e <COMPASSACCELERO_IO_Write+0x2e>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8005614:	4804      	ldr	r0, [pc, #16]	; (8005628 <COMPASSACCELERO_IO_Write+0x38>)
 8005616:	f7fe fc78 	bl	8003f0a <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800561a:	f7ff fe4f 	bl	80052bc <I2Cx_Init>
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800561e:	b006      	add	sp, #24
 8005620:	bd10      	pop	{r4, pc}
 8005622:	bf00      	nop
 8005624:	20000180 	.word	0x20000180
 8005628:	20000e84 	.word	0x20000e84

0800562c <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800562c:	b510      	push	{r4, lr}
 800562e:	b086      	sub	sp, #24
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 8005630:	ab06      	add	r3, sp, #24
 8005632:	2200      	movs	r2, #0
 8005634:	f803 2d01 	strb.w	r2, [r3, #-1]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8005638:	460a      	mov	r2, r1
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	4909      	ldr	r1, [pc, #36]	; (8005664 <COMPASSACCELERO_IO_Read+0x38>)
 800563e:	2301      	movs	r3, #1
 8005640:	9301      	str	r3, [sp, #4]
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8005642:	4604      	mov	r4, r0
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8005644:	6809      	ldr	r1, [r1, #0]
 8005646:	9102      	str	r1, [sp, #8]
 8005648:	4807      	ldr	r0, [pc, #28]	; (8005668 <COMPASSACCELERO_IO_Read+0x3c>)
 800564a:	4621      	mov	r1, r4
 800564c:	f7fe fcf0 	bl	8004030 <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 8005650:	b120      	cbz	r0, 800565c <COMPASSACCELERO_IO_Read+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8005652:	4805      	ldr	r0, [pc, #20]	; (8005668 <COMPASSACCELERO_IO_Read+0x3c>)
 8005654:	f7fe fc59 	bl	8003f0a <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8005658:	f7ff fe30 	bl	80052bc <I2Cx_Init>
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800565c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8005660:	b006      	add	sp, #24
 8005662:	bd10      	pop	{r4, pc}
 8005664:	20000180 	.word	0x20000180
 8005668:	20000e84 	.word	0x20000e84

0800566c <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 800566c:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800566e:	4c09      	ldr	r4, [pc, #36]	; (8005694 <BSP_ACCELERO_Init+0x28>)
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	4798      	blx	r3
 8005674:	2833      	cmp	r0, #51	; 0x33
 8005676:	d10b      	bne.n	8005690 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8005678:	4d07      	ldr	r5, [pc, #28]	; (8005698 <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800567a:	6823      	ldr	r3, [r4, #0]
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800567c:	602c      	str	r4, [r5, #0]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800567e:	f640 0047 	movw	r0, #2119	; 0x847
 8005682:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	2090      	movs	r0, #144	; 0x90
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800568c:	2000      	movs	r0, #0
 800568e:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 8005690:	2001      	movs	r0, #1
  }

  return ret;
}
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	200001a4 	.word	0x200001a4
 8005698:	20000ebc 	.word	0x20000ebc

0800569c <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800569c:	4b02      	ldr	r3, [pc, #8]	; (80056a8 <BSP_ACCELERO_GetXYZ+0xc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	b103      	cbz	r3, 80056a6 <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80056a4:	4718      	bx	r3
 80056a6:	4770      	bx	lr
 80056a8:	20000ebc 	.word	0x20000ebc

080056ac <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80056ac:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80056ae:	4c0e      	ldr	r4, [pc, #56]	; (80056e8 <BSP_GYRO_Init+0x3c>)
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	4798      	blx	r3
 80056b4:	28d4      	cmp	r0, #212	; 0xd4
 80056b6:	4625      	mov	r5, r4
 80056b8:	d10f      	bne.n	80056da <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80056ba:	4c0c      	ldr	r4, [pc, #48]	; (80056ec <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 80056bc:	682b      	ldr	r3, [r5, #0]
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80056be:	6025      	str	r5, [r4, #0]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 80056c0:	f241 003f 	movw	r0, #4159	; 0x103f
 80056c4:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	2000      	movs	r0, #0
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	2010      	movs	r0, #16
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	4798      	blx	r3
	
    ret = GYRO_OK;
 80056d6:	2000      	movs	r0, #0
 80056d8:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80056da:	6863      	ldr	r3, [r4, #4]
 80056dc:	4798      	blx	r3
 80056de:	28d5      	cmp	r0, #213	; 0xd5
 80056e0:	d0eb      	beq.n	80056ba <BSP_GYRO_Init+0xe>
	
    ret = GYRO_OK;
  }
  else
  {
    ret = GYRO_ERROR;
 80056e2:	2001      	movs	r0, #1
  }
  
  return ret;
}
 80056e4:	bd38      	pop	{r3, r4, r5, pc}
 80056e6:	bf00      	nop
 80056e8:	200001d0 	.word	0x200001d0
 80056ec:	20000ec0 	.word	0x20000ec0

080056f0 <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <BSP_GYRO_GetXYZ+0xc>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	b103      	cbz	r3, 80056fa <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 80056f8:	4718      	bx	r3
 80056fa:	4770      	bx	lr
 80056fc:	20000ec0 	.word	0x20000ec0

08005700 <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8005700:	b510      	push	{r4, lr}
 8005702:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8005704:	f7ff ff1e 	bl	8005544 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8005708:	b2e2      	uxtb	r2, r4
 800570a:	2032      	movs	r0, #50	; 0x32
 800570c:	2120      	movs	r1, #32
 800570e:	f7ff ff6f 	bl	80055f0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8005712:	2032      	movs	r0, #50	; 0x32
 8005714:	2123      	movs	r1, #35	; 0x23
 8005716:	2200      	movs	r2, #0
}
 8005718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800571c:	f7ff bf68 	b.w	80055f0 <COMPASSACCELERO_IO_Write>

08005720 <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8005720:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8005722:	f7ff ff0f 	bl	8005544 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8005726:	2032      	movs	r0, #50	; 0x32
 8005728:	210f      	movs	r1, #15

  return ctrl;
}
 800572a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800572e:	f7ff bf7d 	b.w	800562c <COMPASSACCELERO_IO_Read>

08005732 <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8005732:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8005734:	2124      	movs	r1, #36	; 0x24
 8005736:	2032      	movs	r0, #50	; 0x32
 8005738:	f7ff ff78 	bl	800562c <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800573c:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8005740:	2124      	movs	r1, #36	; 0x24
 8005742:	2032      	movs	r0, #50	; 0x32
 8005744:	b2d2      	uxtb	r2, r2
}
 8005746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800574a:	f7ff bf51 	b.w	80055f0 <COMPASSACCELERO_IO_Write>

0800574e <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800574e:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005750:	2121      	movs	r1, #33	; 0x21
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8005752:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005754:	2032      	movs	r0, #50	; 0x32
 8005756:	f7ff ff69 	bl	800562c <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800575a:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800575e:	4322      	orrs	r2, r4
 8005760:	2032      	movs	r0, #50	; 0x32
 8005762:	2121      	movs	r1, #33	; 0x21
}
 8005764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  tmpreg &= 0x0C;
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005768:	f7ff bf42 	b.w	80055f0 <COMPASSACCELERO_IO_Write>

0800576c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 800576c:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800576e:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8005770:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005772:	2032      	movs	r0, #50	; 0x32
 8005774:	f7ff ff5a 	bl	800562c <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 8005778:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800577c:	4322      	orrs	r2, r4
 800577e:	2032      	movs	r0, #50	; 0x32
 8005780:	2121      	movs	r1, #33	; 0x21
}
 8005782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= 0xF7;

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005786:	f7ff bf33 	b.w	80055f0 <COMPASSACCELERO_IO_Write>

0800578a <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800578a:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800578c:	2123      	movs	r1, #35	; 0x23
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800578e:	b085      	sub	sp, #20
 8005790:	4605      	mov	r5, r0
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8005792:	2032      	movs	r0, #50	; 0x32
 8005794:	f7ff ff4a 	bl	800562c <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8005798:	2124      	movs	r1, #36	; 0x24
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800579a:	4604      	mov	r4, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800579c:	2032      	movs	r0, #50	; 0x32
 800579e:	f7ff ff45 	bl	800562c <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80057a2:	2128      	movs	r1, #40	; 0x28
 80057a4:	2032      	movs	r0, #50	; 0x32
 80057a6:	f7ff ff41 	bl	800562c <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80057aa:	2129      	movs	r1, #41	; 0x29
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80057ac:	f88d 0008 	strb.w	r0, [sp, #8]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80057b0:	2032      	movs	r0, #50	; 0x32
 80057b2:	f7ff ff3b 	bl	800562c <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80057b6:	212a      	movs	r1, #42	; 0x2a
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80057b8:	f88d 0009 	strb.w	r0, [sp, #9]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80057bc:	2032      	movs	r0, #50	; 0x32
 80057be:	f7ff ff35 	bl	800562c <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80057c2:	212b      	movs	r1, #43	; 0x2b
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80057c4:	f88d 000a 	strb.w	r0, [sp, #10]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80057c8:	2032      	movs	r0, #50	; 0x32
 80057ca:	f7ff ff2f 	bl	800562c <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80057ce:	212c      	movs	r1, #44	; 0x2c

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80057d0:	f88d 000b 	strb.w	r0, [sp, #11]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80057d4:	2032      	movs	r0, #50	; 0x32
 80057d6:	f7ff ff29 	bl	800562c <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80057da:	212d      	movs	r1, #45	; 0x2d
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80057dc:	f88d 000c 	strb.w	r0, [sp, #12]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80057e0:	2032      	movs	r0, #50	; 0x32
 80057e2:	f7ff ff23 	bl	800562c <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80057e6:	f014 0f40 	tst.w	r4, #64	; 0x40
 80057ea:	f99d 6009 	ldrsb.w	r6, [sp, #9]
 80057ee:	f99d 7008 	ldrsb.w	r7, [sp, #8]
 80057f2:	f99d 200b 	ldrsb.w	r2, [sp, #11]
 80057f6:	f99d 100a 	ldrsb.w	r1, [sp, #10]
 80057fa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 80057fe:	b240      	sxtb	r0, r0
 8005800:	d116      	bne.n	8005830 <LSM303DLHC_AccReadXYZ+0xa6>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8005802:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8005806:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800580a:	f8ad 6000 	strh.w	r6, [sp]
 800580e:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005812:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8005816:	f004 0430 	and.w	r4, r4, #48	; 0x30
 800581a:	2c20      	cmp	r4, #32
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800581c:	f8ad 0004 	strh.w	r0, [sp, #4]
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8005820:	d011      	beq.n	8005846 <LSM303DLHC_AccReadXYZ+0xbc>
 8005822:	2c30      	cmp	r4, #48	; 0x30
 8005824:	d011      	beq.n	800584a <LSM303DLHC_AccReadXYZ+0xc0>
 8005826:	2c10      	cmp	r4, #16
{
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8005828:	bf0c      	ite	eq
 800582a:	2302      	moveq	r3, #2
 800582c:	2301      	movne	r3, #1
 800582e:	e00d      	b.n	800584c <LSM303DLHC_AccReadXYZ+0xc2>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8005830:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8005834:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8005838:	f8ad 6000 	strh.w	r6, [sp]
 800583c:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005840:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8005844:	e7e7      	b.n	8005816 <LSM303DLHC_AccReadXYZ+0x8c>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8005846:	2304      	movs	r3, #4
    break;
 8005848:	e000      	b.n	800584c <LSM303DLHC_AccReadXYZ+0xc2>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800584a:	230c      	movs	r3, #12
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800584c:	f8bd 2000 	ldrh.w	r2, [sp]
 8005850:	b29b      	uxth	r3, r3
 8005852:	fb12 f203 	smulbb	r2, r2, r3
 8005856:	802a      	strh	r2, [r5, #0]
 8005858:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800585c:	fb12 f203 	smulbb	r2, r2, r3
 8005860:	806a      	strh	r2, [r5, #2]
 8005862:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005866:	fb12 f303 	smulbb	r3, r2, r3
 800586a:	80ab      	strh	r3, [r5, #4]
  }

}
 800586c:	b005      	add	sp, #20
 800586e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005870 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8005870:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005872:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8005874:	4604      	mov	r4, r0
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005876:	2032      	movs	r0, #50	; 0x32
 8005878:	f7ff fed8 	bl	800562c <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800587c:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005880:	4322      	orrs	r2, r4
 8005882:	2032      	movs	r0, #50	; 0x32
 8005884:	2121      	movs	r1, #33	; 0x21
}
 8005886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800588a:	f7ff beb1 	b.w	80055f0 <COMPASSACCELERO_IO_Write>

0800588e <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800588e:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8005890:	2122      	movs	r1, #34	; 0x22
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8005892:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8005894:	2032      	movs	r0, #50	; 0x32
 8005896:	f7ff fec9 	bl	800562c <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800589a:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800589e:	2122      	movs	r1, #34	; 0x22
 80058a0:	2032      	movs	r0, #50	; 0x32
 80058a2:	b2d2      	uxtb	r2, r2
}
 80058a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80058a8:	f7ff bea2 	b.w	80055f0 <COMPASSACCELERO_IO_Write>

080058ac <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80058ac:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80058ae:	2138      	movs	r1, #56	; 0x38
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80058b0:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80058b2:	2032      	movs	r0, #50	; 0x32
 80058b4:	f7ff feba 	bl	800562c <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80058b8:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80058bc:	2138      	movs	r1, #56	; 0x38
 80058be:	2032      	movs	r0, #50	; 0x32
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	f7ff fe95 	bl	80055f0 <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80058c6:	2032      	movs	r0, #50	; 0x32
 80058c8:	213a      	movs	r1, #58	; 0x3a
 80058ca:	220a      	movs	r2, #10
 80058cc:	f7ff fe90 	bl	80055f0 <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80058d0:	2032      	movs	r0, #50	; 0x32
 80058d2:	213b      	movs	r1, #59	; 0x3b
 80058d4:	2205      	movs	r2, #5
 80058d6:	f7ff fe8b 	bl	80055f0 <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80058da:	2032      	movs	r0, #50	; 0x32
 80058dc:	213c      	movs	r1, #60	; 0x3c
 80058de:	2205      	movs	r2, #5
 80058e0:	f7ff fe86 	bl	80055f0 <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80058e4:	2032      	movs	r0, #50	; 0x32
 80058e6:	213d      	movs	r1, #61	; 0x3d
 80058e8:	4602      	mov	r2, r0

}
 80058ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80058ee:	f7ff be7f 	b.w	80055f0 <COMPASSACCELERO_IO_Write>

080058f2 <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80058f2:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80058f4:	f7ff fe58 	bl	80055a8 <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80058f8:	2080      	movs	r0, #128	; 0x80
 80058fa:	f7ff ffc8 	bl	800588e <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80058fe:	2004      	movs	r0, #4
 8005900:	f7ff ffb6 	bl	8005870 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8005904:	2010      	movs	r0, #16
  
}
 8005906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800590a:	f7ff bfcf 	b.w	80058ac <LSM303DLHC_AccClickITEnable>

0800590e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800590e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8005910:	ac02      	add	r4, sp, #8
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
  uint8_t ctrl = 0x00;
 8005912:	2300      	movs	r3, #0
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8005914:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 8005916:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 800591a:	f7ff fd99 	bl	8005450 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 800591e:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8005922:	2120      	movs	r1, #32
 8005924:	4620      	mov	r0, r4
 8005926:	2201      	movs	r2, #1
 8005928:	f7ff fdc6 	bl	80054b8 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800592c:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800592e:	4620      	mov	r0, r4
 8005930:	2123      	movs	r1, #35	; 0x23
 8005932:	2201      	movs	r2, #1
  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8005934:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8005938:	f7ff fdbe 	bl	80054b8 <GYRO_IO_Write>
}
 800593c:	b003      	add	sp, #12
 800593e:	bd30      	pop	{r4, r5, pc}

08005940 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8005940:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 8005942:	f7ff fd85 	bl	8005450 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8005946:	f10d 0007 	add.w	r0, sp, #7
 800594a:	210f      	movs	r1, #15
 800594c:	2201      	movs	r2, #1
 800594e:	f7ff fdd5 	bl	80054fc <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 8005952:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005956:	b003      	add	sp, #12
 8005958:	f85d fb04 	ldr.w	pc, [sp], #4

0800595c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800595c:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800595e:	2124      	movs	r1, #36	; 0x24
 8005960:	f10d 0007 	add.w	r0, sp, #7
 8005964:	2201      	movs	r2, #1
 8005966:	f7ff fdc9 	bl	80054fc <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800596a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800596e:	f10d 0007 	add.w	r0, sp, #7
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8005972:	f063 037f 	orn	r3, r3, #127	; 0x7f
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005976:	2124      	movs	r1, #36	; 0x24
 8005978:	2201      	movs	r2, #1
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800597a:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800597e:	f7ff fd9b 	bl	80054b8 <GYRO_IO_Write>
}
 8005982:	b003      	add	sp, #12
 8005984:	f85d fb04 	ldr.w	pc, [sp], #4

08005988 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8005988:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800598a:	2300      	movs	r3, #0
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800598c:	4604      	mov	r4, r0
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800598e:	2130      	movs	r1, #48	; 0x30
 8005990:	f10d 0006 	add.w	r0, sp, #6
 8005994:	2201      	movs	r2, #1
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005996:	f88d 3006 	strb.w	r3, [sp, #6]
 800599a:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800599e:	f7ff fdad 	bl	80054fc <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80059a2:	f10d 0007 	add.w	r0, sp, #7
 80059a6:	2122      	movs	r1, #34	; 0x22
 80059a8:	2201      	movs	r2, #1
 80059aa:	f7ff fda7 	bl	80054fc <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 80059ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
 80059b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 80059b6:	f020 0020 	bic.w	r0, r0, #32
  ctrl3 |= ((uint8_t) Int1Config);
 80059ba:	4320      	orrs	r0, r4
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
 80059bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);
 80059c0:	f88d 0007 	strb.w	r0, [sp, #7]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80059c4:	2130      	movs	r1, #48	; 0x30
 80059c6:	f10d 0006 	add.w	r0, sp, #6
 80059ca:	2201      	movs	r2, #1
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80059cc:	f88d 3006 	strb.w	r3, [sp, #6]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80059d0:	f7ff fd72 	bl	80054b8 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80059d4:	f10d 0007 	add.w	r0, sp, #7
 80059d8:	2122      	movs	r1, #34	; 0x22
 80059da:	2201      	movs	r2, #1
 80059dc:	f7ff fd6c 	bl	80054b8 <GYRO_IO_Write>
}
 80059e0:	b002      	add	sp, #8
 80059e2:	bd10      	pop	{r4, pc}

080059e4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80059e4:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80059e6:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80059e8:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80059ea:	2122      	movs	r1, #34	; 0x22
 80059ec:	f10d 0007 	add.w	r0, sp, #7
 80059f0:	f7ff fd84 	bl	80054fc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80059f4:	b924      	cbnz	r4, 8005a00 <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 80059f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80059fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059fe:	e007      	b.n	8005a10 <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 8005a00:	2c01      	cmp	r4, #1
 8005a02:	d107      	bne.n	8005a14 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
 8005a04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a08:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8005a0c:	f043 0308 	orr.w	r3, r3, #8
 8005a10:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005a14:	f10d 0007 	add.w	r0, sp, #7
 8005a18:	2122      	movs	r1, #34	; 0x22
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f7ff fd4c 	bl	80054b8 <GYRO_IO_Write>
}
 8005a20:	b002      	add	sp, #8
 8005a22:	bd10      	pop	{r4, pc}

08005a24 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8005a24:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005a26:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8005a28:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005a2a:	2122      	movs	r1, #34	; 0x22
 8005a2c:	f10d 0007 	add.w	r0, sp, #7
 8005a30:	f7ff fd64 	bl	80054fc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005a34:	b924      	cbnz	r4, 8005a40 <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 8005a36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a3e:	e005      	b.n	8005a4c <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 8005a40:	2c01      	cmp	r4, #1
 8005a42:	d105      	bne.n	8005a50 <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 8005a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a48:	f023 0308 	bic.w	r3, r3, #8
 8005a4c:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005a50:	f10d 0007 	add.w	r0, sp, #7
 8005a54:	2122      	movs	r1, #34	; 0x22
 8005a56:	2201      	movs	r2, #1
 8005a58:	f7ff fd2e 	bl	80054b8 <GYRO_IO_Write>
}
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005a60:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005a62:	2201      	movs	r2, #1
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005a64:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005a66:	2121      	movs	r1, #33	; 0x21
 8005a68:	f10d 0007 	add.w	r0, sp, #7
 8005a6c:	f7ff fd46 	bl	80054fc <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8005a70:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005a74:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 8005a78:	4320      	orrs	r0, r4
 8005a7a:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005a7e:	2121      	movs	r1, #33	; 0x21
 8005a80:	f10d 0007 	add.w	r0, sp, #7
 8005a84:	2201      	movs	r2, #1
 8005a86:	f7ff fd17 	bl	80054b8 <GYRO_IO_Write>
}
 8005a8a:	b002      	add	sp, #8
 8005a8c:	bd10      	pop	{r4, pc}

08005a8e <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8005a8e:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005a90:	2201      	movs	r2, #1
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8005a92:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005a94:	2124      	movs	r1, #36	; 0x24
 8005a96:	f10d 0007 	add.w	r0, sp, #7
 8005a9a:	f7ff fd2f 	bl	80054fc <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8005a9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005aa2:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 8005aa6:	4320      	orrs	r0, r4
 8005aa8:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005aac:	2124      	movs	r1, #36	; 0x24
 8005aae:	f10d 0007 	add.w	r0, sp, #7
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f7ff fd00 	bl	80054b8 <GYRO_IO_Write>
}
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd10      	pop	{r4, pc}

08005abc <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 8005abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	4604      	mov	r4, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8005ac2:	a806      	add	r0, sp, #24
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8005ac4:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8005ac6:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8005aca:	2123      	movs	r1, #35	; 0x23
 8005acc:	2201      	movs	r2, #1
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8005ace:	9302      	str	r3, [sp, #8]
 8005ad0:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	f8ad 3014 	strh.w	r3, [sp, #20]
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8005ada:	f7ff fd0f 	bl	80054fc <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8005ade:	a802      	add	r0, sp, #8
 8005ae0:	2128      	movs	r1, #40	; 0x28
 8005ae2:	2206      	movs	r2, #6
 8005ae4:	f7ff fd0a 	bl	80054fc <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8005ae8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005aec:	f89d 6009 	ldrb.w	r6, [sp, #9]
 8005af0:	f89d 7008 	ldrb.w	r7, [sp, #8]
 8005af4:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8005af8:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8005afc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8005b00:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005b04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b08:	d11a      	bne.n	8005b40 <L3GD20_ReadXYZAngRate+0x84>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005b0a:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8005b0e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8005b12:	f8ad 6010 	strh.w	r6, [sp, #16]
 8005b16:	f8ad 0012 	strh.w	r0, [sp, #18]
 8005b1a:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8005b1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b22:	2b10      	cmp	r3, #16
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005b24:	f8ad 2014 	strh.w	r2, [sp, #20]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8005b28:	d015      	beq.n	8005b56 <L3GD20_ReadXYZAngRate+0x9a>
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d016      	beq.n	8005b5c <L3GD20_ReadXYZAngRate+0xa0>
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
 8005b2e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005b84 <L3GD20_ReadXYZAngRate+0xc8>
 8005b32:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005b88 <L3GD20_ReadXYZAngRate+0xcc>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf08      	it	eq
 8005b3a:	eeb0 7a67 	vmoveq.f32	s14, s15
 8005b3e:	e00f      	b.n	8005b60 <L3GD20_ReadXYZAngRate+0xa4>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8005b40:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8005b44:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8005b48:	f8ad 6010 	strh.w	r6, [sp, #16]
 8005b4c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8005b50:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8005b54:	e7e3      	b.n	8005b1e <L3GD20_ReadXYZAngRate+0x62>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8005b56:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005b8c <L3GD20_ReadXYZAngRate+0xd0>
    break;
 8005b5a:	e001      	b.n	8005b60 <L3GD20_ReadXYZAngRate+0xa4>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8005b5c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005b90 <L3GD20_ReadXYZAngRate+0xd4>
 8005b60:	4620      	mov	r0, r4
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8005b62:	2300      	movs	r3, #0
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005b64:	aa04      	add	r2, sp, #16
 8005b66:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8005b6a:	ee07 2a90 	vmov	s15, r2
 8005b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8005b72:	3301      	adds	r3, #1
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005b74:	ee67 7a87 	vmul.f32	s15, s15, s14
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8005b78:	2b03      	cmp	r3, #3
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005b7a:	ece0 7a01 	vstmia	r0!, {s15}
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8005b7e:	d1f1      	bne.n	8005b64 <L3GD20_ReadXYZAngRate+0xa8>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
  }
}
 8005b80:	b007      	add	sp, #28
 8005b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b84:	00000000 	.word	0x00000000
 8005b88:	410c0000 	.word	0x410c0000
 8005b8c:	418c0000 	.word	0x418c0000
 8005b90:	428c0000 	.word	0x428c0000

08005b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bcc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005b98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005b9a:	e003      	b.n	8005ba4 <LoopCopyDataInit>

08005b9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005b9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005ba0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005ba2:	3104      	adds	r1, #4

08005ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005ba4:	480b      	ldr	r0, [pc, #44]	; (8005bd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005ba8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005baa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005bac:	d3f6      	bcc.n	8005b9c <CopyDataInit>
	ldr	r2, =_sbss
 8005bae:	4a0b      	ldr	r2, [pc, #44]	; (8005bdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8005bb0:	e002      	b.n	8005bb8 <LoopFillZerobss>

08005bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005bb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005bb4:	f842 3b04 	str.w	r3, [r2], #4

08005bb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <LoopForever+0x16>)
	cmp	r2, r3
 8005bba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005bbc:	d3f9      	bcc.n	8005bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005bbe:	f7fc fa4d 	bl	800205c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bc2:	f000 f817 	bl	8005bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bc6:	f7fb fb8f 	bl	80012e8 <main>

08005bca <LoopForever>:

LoopForever:
    b LoopForever
 8005bca:	e7fe      	b.n	8005bca <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005bcc:	20007fff 	.word	0x20007fff
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8005bd0:	0801ae7c 	.word	0x0801ae7c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005bd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005bd8:	20000a9c 	.word	0x20000a9c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8005bdc:	20000a9c 	.word	0x20000a9c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8005be0:	20001ce4 	.word	0x20001ce4

08005be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005be4:	e7fe      	b.n	8005be4 <ADC1_2_IRQHandler>
	...

08005be8 <__errno>:
 8005be8:	4b01      	ldr	r3, [pc, #4]	; (8005bf0 <__errno+0x8>)
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000628 	.word	0x20000628

08005bf4 <__libc_init_array>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	4e0f      	ldr	r6, [pc, #60]	; (8005c34 <__libc_init_array+0x40>)
 8005bf8:	4d0f      	ldr	r5, [pc, #60]	; (8005c38 <__libc_init_array+0x44>)
 8005bfa:	1b76      	subs	r6, r6, r5
 8005bfc:	10b6      	asrs	r6, r6, #2
 8005bfe:	bf18      	it	ne
 8005c00:	2400      	movne	r4, #0
 8005c02:	d005      	beq.n	8005c10 <__libc_init_array+0x1c>
 8005c04:	3401      	adds	r4, #1
 8005c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c0a:	4798      	blx	r3
 8005c0c:	42a6      	cmp	r6, r4
 8005c0e:	d1f9      	bne.n	8005c04 <__libc_init_array+0x10>
 8005c10:	4e0a      	ldr	r6, [pc, #40]	; (8005c3c <__libc_init_array+0x48>)
 8005c12:	4d0b      	ldr	r5, [pc, #44]	; (8005c40 <__libc_init_array+0x4c>)
 8005c14:	1b76      	subs	r6, r6, r5
 8005c16:	f004 fcf7 	bl	800a608 <_init>
 8005c1a:	10b6      	asrs	r6, r6, #2
 8005c1c:	bf18      	it	ne
 8005c1e:	2400      	movne	r4, #0
 8005c20:	d006      	beq.n	8005c30 <__libc_init_array+0x3c>
 8005c22:	3401      	adds	r4, #1
 8005c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c28:	4798      	blx	r3
 8005c2a:	42a6      	cmp	r6, r4
 8005c2c:	d1f9      	bne.n	8005c22 <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	bf00      	nop
 8005c34:	0801ae70 	.word	0x0801ae70
 8005c38:	0801ae70 	.word	0x0801ae70
 8005c3c:	0801ae78 	.word	0x0801ae78
 8005c40:	0801ae70 	.word	0x0801ae70

08005c44 <memset>:
 8005c44:	b470      	push	{r4, r5, r6}
 8005c46:	0784      	lsls	r4, r0, #30
 8005c48:	d046      	beq.n	8005cd8 <memset+0x94>
 8005c4a:	1e54      	subs	r4, r2, #1
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	d041      	beq.n	8005cd4 <memset+0x90>
 8005c50:	b2cd      	uxtb	r5, r1
 8005c52:	4603      	mov	r3, r0
 8005c54:	e002      	b.n	8005c5c <memset+0x18>
 8005c56:	1e62      	subs	r2, r4, #1
 8005c58:	b3e4      	cbz	r4, 8005cd4 <memset+0x90>
 8005c5a:	4614      	mov	r4, r2
 8005c5c:	f803 5b01 	strb.w	r5, [r3], #1
 8005c60:	079a      	lsls	r2, r3, #30
 8005c62:	d1f8      	bne.n	8005c56 <memset+0x12>
 8005c64:	2c03      	cmp	r4, #3
 8005c66:	d92e      	bls.n	8005cc6 <memset+0x82>
 8005c68:	b2cd      	uxtb	r5, r1
 8005c6a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005c6e:	2c0f      	cmp	r4, #15
 8005c70:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005c74:	d919      	bls.n	8005caa <memset+0x66>
 8005c76:	f103 0210 	add.w	r2, r3, #16
 8005c7a:	4626      	mov	r6, r4
 8005c7c:	3e10      	subs	r6, #16
 8005c7e:	2e0f      	cmp	r6, #15
 8005c80:	f842 5c10 	str.w	r5, [r2, #-16]
 8005c84:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005c88:	f842 5c08 	str.w	r5, [r2, #-8]
 8005c8c:	f842 5c04 	str.w	r5, [r2, #-4]
 8005c90:	f102 0210 	add.w	r2, r2, #16
 8005c94:	d8f2      	bhi.n	8005c7c <memset+0x38>
 8005c96:	f1a4 0210 	sub.w	r2, r4, #16
 8005c9a:	f022 020f 	bic.w	r2, r2, #15
 8005c9e:	f004 040f 	and.w	r4, r4, #15
 8005ca2:	3210      	adds	r2, #16
 8005ca4:	2c03      	cmp	r4, #3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	d90d      	bls.n	8005cc6 <memset+0x82>
 8005caa:	461e      	mov	r6, r3
 8005cac:	4622      	mov	r2, r4
 8005cae:	3a04      	subs	r2, #4
 8005cb0:	2a03      	cmp	r2, #3
 8005cb2:	f846 5b04 	str.w	r5, [r6], #4
 8005cb6:	d8fa      	bhi.n	8005cae <memset+0x6a>
 8005cb8:	1f22      	subs	r2, r4, #4
 8005cba:	f022 0203 	bic.w	r2, r2, #3
 8005cbe:	3204      	adds	r2, #4
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f004 0403 	and.w	r4, r4, #3
 8005cc6:	b12c      	cbz	r4, 8005cd4 <memset+0x90>
 8005cc8:	b2c9      	uxtb	r1, r1
 8005cca:	441c      	add	r4, r3
 8005ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	d1fb      	bne.n	8005ccc <memset+0x88>
 8005cd4:	bc70      	pop	{r4, r5, r6}
 8005cd6:	4770      	bx	lr
 8005cd8:	4614      	mov	r4, r2
 8005cda:	4603      	mov	r3, r0
 8005cdc:	e7c2      	b.n	8005c64 <memset+0x20>
 8005cde:	bf00      	nop

08005ce0 <printf>:
 8005ce0:	b40f      	push	{r0, r1, r2, r3}
 8005ce2:	b500      	push	{lr}
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <printf+0x24>)
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	ab04      	add	r3, sp, #16
 8005cea:	6808      	ldr	r0, [r1, #0]
 8005cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf0:	6881      	ldr	r1, [r0, #8]
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	f000 fa50 	bl	8006198 <_vfprintf_r>
 8005cf8:	b003      	add	sp, #12
 8005cfa:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cfe:	b004      	add	sp, #16
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20000628 	.word	0x20000628

08005d08 <putchar>:
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <putchar+0x10>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f003 bfe5 	b.w	8009ce0 <_putc_r>
 8005d16:	bf00      	nop
 8005d18:	20000628 	.word	0x20000628

08005d1c <_puts_r>:
 8005d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d1e:	4605      	mov	r5, r0
 8005d20:	b089      	sub	sp, #36	; 0x24
 8005d22:	4608      	mov	r0, r1
 8005d24:	460c      	mov	r4, r1
 8005d26:	f000 f92f 	bl	8005f88 <strlen>
 8005d2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005d2c:	4f13      	ldr	r7, [pc, #76]	; (8005d7c <_puts_r+0x60>)
 8005d2e:	9404      	str	r4, [sp, #16]
 8005d30:	2601      	movs	r6, #1
 8005d32:	1c44      	adds	r4, r0, #1
 8005d34:	a904      	add	r1, sp, #16
 8005d36:	2202      	movs	r2, #2
 8005d38:	9403      	str	r4, [sp, #12]
 8005d3a:	9005      	str	r0, [sp, #20]
 8005d3c:	68ac      	ldr	r4, [r5, #8]
 8005d3e:	9706      	str	r7, [sp, #24]
 8005d40:	9607      	str	r6, [sp, #28]
 8005d42:	9101      	str	r1, [sp, #4]
 8005d44:	9202      	str	r2, [sp, #8]
 8005d46:	b1ab      	cbz	r3, 8005d74 <_puts_r+0x58>
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	049a      	lsls	r2, r3, #18
 8005d4c:	d406      	bmi.n	8005d5c <_puts_r+0x40>
 8005d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d58:	81a3      	strh	r3, [r4, #12]
 8005d5a:	6662      	str	r2, [r4, #100]	; 0x64
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	4621      	mov	r1, r4
 8005d60:	aa01      	add	r2, sp, #4
 8005d62:	f002 ff47 	bl	8008bf4 <__sfvwrite_r>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	bf14      	ite	ne
 8005d6a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005d6e:	200a      	moveq	r0, #10
 8005d70:	b009      	add	sp, #36	; 0x24
 8005d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d74:	4628      	mov	r0, r5
 8005d76:	f002 fdf7 	bl	8008968 <__sinit>
 8005d7a:	e7e5      	b.n	8005d48 <_puts_r+0x2c>
 8005d7c:	0801ace4 	.word	0x0801ace4

08005d80 <puts>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <puts+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f7ff bfc9 	b.w	8005d1c <_puts_r>
 8005d8a:	bf00      	nop
 8005d8c:	20000628 	.word	0x20000628

08005d90 <setvbuf>:
 8005d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d94:	4c3a      	ldr	r4, [pc, #232]	; (8005e80 <setvbuf+0xf0>)
 8005d96:	6826      	ldr	r6, [r4, #0]
 8005d98:	460d      	mov	r5, r1
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4690      	mov	r8, r2
 8005d9e:	461f      	mov	r7, r3
 8005da0:	b116      	cbz	r6, 8005da8 <setvbuf+0x18>
 8005da2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d03c      	beq.n	8005e22 <setvbuf+0x92>
 8005da8:	f1b8 0f02 	cmp.w	r8, #2
 8005dac:	d82f      	bhi.n	8005e0e <setvbuf+0x7e>
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	db2d      	blt.n	8005e0e <setvbuf+0x7e>
 8005db2:	4621      	mov	r1, r4
 8005db4:	4630      	mov	r0, r6
 8005db6:	f002 fd43 	bl	8008840 <_fflush_r>
 8005dba:	89a1      	ldrh	r1, [r4, #12]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6063      	str	r3, [r4, #4]
 8005dc0:	61a3      	str	r3, [r4, #24]
 8005dc2:	060b      	lsls	r3, r1, #24
 8005dc4:	d427      	bmi.n	8005e16 <setvbuf+0x86>
 8005dc6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
 8005dca:	b289      	uxth	r1, r1
 8005dcc:	f1b8 0f02 	cmp.w	r8, #2
 8005dd0:	81a1      	strh	r1, [r4, #12]
 8005dd2:	d02a      	beq.n	8005e2a <setvbuf+0x9a>
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	d036      	beq.n	8005e46 <setvbuf+0xb6>
 8005dd8:	f1b8 0f01 	cmp.w	r8, #1
 8005ddc:	d011      	beq.n	8005e02 <setvbuf+0x72>
 8005dde:	b289      	uxth	r1, r1
 8005de0:	f001 0008 	and.w	r0, r1, #8
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <setvbuf+0xf4>)
 8005de6:	63f3      	str	r3, [r6, #60]	; 0x3c
 8005de8:	b280      	uxth	r0, r0
 8005dea:	6025      	str	r5, [r4, #0]
 8005dec:	6125      	str	r5, [r4, #16]
 8005dee:	6167      	str	r7, [r4, #20]
 8005df0:	b178      	cbz	r0, 8005e12 <setvbuf+0x82>
 8005df2:	f011 0f03 	tst.w	r1, #3
 8005df6:	bf18      	it	ne
 8005df8:	2700      	movne	r7, #0
 8005dfa:	60a7      	str	r7, [r4, #8]
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e02:	f041 0101 	orr.w	r1, r1, #1
 8005e06:	427b      	negs	r3, r7
 8005e08:	81a1      	strh	r1, [r4, #12]
 8005e0a:	61a3      	str	r3, [r4, #24]
 8005e0c:	e7e7      	b.n	8005dde <setvbuf+0x4e>
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e16:	6921      	ldr	r1, [r4, #16]
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f002 fe13 	bl	8008a44 <_free_r>
 8005e1e:	89a1      	ldrh	r1, [r4, #12]
 8005e20:	e7d1      	b.n	8005dc6 <setvbuf+0x36>
 8005e22:	4630      	mov	r0, r6
 8005e24:	f002 fda0 	bl	8008968 <__sinit>
 8005e28:	e7be      	b.n	8005da8 <setvbuf+0x18>
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8005e30:	f041 0102 	orr.w	r1, r1, #2
 8005e34:	2500      	movs	r5, #0
 8005e36:	2201      	movs	r2, #1
 8005e38:	81a1      	strh	r1, [r4, #12]
 8005e3a:	60a5      	str	r5, [r4, #8]
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	6162      	str	r2, [r4, #20]
 8005e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e46:	2f00      	cmp	r7, #0
 8005e48:	bf08      	it	eq
 8005e4a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f003 f904 	bl	800905c <malloc>
 8005e54:	4605      	mov	r5, r0
 8005e56:	b128      	cbz	r0, 8005e64 <setvbuf+0xd4>
 8005e58:	89a1      	ldrh	r1, [r4, #12]
 8005e5a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005e5e:	b289      	uxth	r1, r1
 8005e60:	81a1      	strh	r1, [r4, #12]
 8005e62:	e7b9      	b.n	8005dd8 <setvbuf+0x48>
 8005e64:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005e68:	f003 f8f8 	bl	800905c <malloc>
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	b918      	cbnz	r0, 8005e78 <setvbuf+0xe8>
 8005e70:	89a1      	ldrh	r1, [r4, #12]
 8005e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e76:	e7d9      	b.n	8005e2c <setvbuf+0x9c>
 8005e78:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005e7c:	e7ec      	b.n	8005e58 <setvbuf+0xc8>
 8005e7e:	bf00      	nop
 8005e80:	20000628 	.word	0x20000628
 8005e84:	0800886d 	.word	0x0800886d

08005e88 <strcasecmp>:
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <strcasecmp+0x40>)
 8005e8a:	b430      	push	{r4, r5}
 8005e8c:	681d      	ldr	r5, [r3, #0]
 8005e8e:	e002      	b.n	8005e96 <strcasecmp+0xe>
 8005e90:	1ad2      	subs	r2, r2, r3
 8005e92:	d116      	bne.n	8005ec2 <strcasecmp+0x3a>
 8005e94:	b1ab      	cbz	r3, 8005ec2 <strcasecmp+0x3a>
 8005e96:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005e9a:	192b      	adds	r3, r5, r4
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	785b      	ldrb	r3, [r3, #1]
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eaa:	bf08      	it	eq
 8005eac:	f104 0220 	addeq.w	r2, r4, #32
 8005eb0:	18ec      	adds	r4, r5, r3
 8005eb2:	7864      	ldrb	r4, [r4, #1]
 8005eb4:	f004 0403 	and.w	r4, r4, #3
 8005eb8:	2c01      	cmp	r4, #1
 8005eba:	d1e9      	bne.n	8005e90 <strcasecmp+0x8>
 8005ebc:	3320      	adds	r3, #32
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	d0e9      	beq.n	8005e96 <strcasecmp+0xe>
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	bc30      	pop	{r4, r5}
 8005ec6:	4770      	bx	lr
 8005ec8:	200001fc 	.word	0x200001fc

08005ecc <strcpy>:
 8005ecc:	ea80 0201 	eor.w	r2, r0, r1
 8005ed0:	4684      	mov	ip, r0
 8005ed2:	f012 0f03 	tst.w	r2, #3
 8005ed6:	d14f      	bne.n	8005f78 <strcpy+0xac>
 8005ed8:	f011 0f03 	tst.w	r1, #3
 8005edc:	d132      	bne.n	8005f44 <strcpy+0x78>
 8005ede:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8005ee2:	f011 0f04 	tst.w	r1, #4
 8005ee6:	f851 3b04 	ldr.w	r3, [r1], #4
 8005eea:	d00b      	beq.n	8005f04 <strcpy+0x38>
 8005eec:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005ef0:	439a      	bics	r2, r3
 8005ef2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005ef6:	bf04      	itt	eq
 8005ef8:	f84c 3b04 	streq.w	r3, [ip], #4
 8005efc:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005f00:	d116      	bne.n	8005f30 <strcpy+0x64>
 8005f02:	bf00      	nop
 8005f04:	f851 4b04 	ldr.w	r4, [r1], #4
 8005f08:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005f0c:	439a      	bics	r2, r3
 8005f0e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005f12:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8005f16:	d10b      	bne.n	8005f30 <strcpy+0x64>
 8005f18:	f84c 3b04 	str.w	r3, [ip], #4
 8005f1c:	43a2      	bics	r2, r4
 8005f1e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005f22:	bf04      	itt	eq
 8005f24:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005f28:	f84c 4b04 	streq.w	r4, [ip], #4
 8005f2c:	d0ea      	beq.n	8005f04 <strcpy+0x38>
 8005f2e:	4623      	mov	r3, r4
 8005f30:	f80c 3b01 	strb.w	r3, [ip], #1
 8005f34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f38:	ea4f 2333 	mov.w	r3, r3, ror #8
 8005f3c:	d1f8      	bne.n	8005f30 <strcpy+0x64>
 8005f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	f011 0f01 	tst.w	r1, #1
 8005f48:	d006      	beq.n	8005f58 <strcpy+0x8c>
 8005f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f4e:	f80c 2b01 	strb.w	r2, [ip], #1
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	bf08      	it	eq
 8005f56:	4770      	bxeq	lr
 8005f58:	f011 0f02 	tst.w	r1, #2
 8005f5c:	d0bf      	beq.n	8005ede <strcpy+0x12>
 8005f5e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005f62:	f012 0fff 	tst.w	r2, #255	; 0xff
 8005f66:	bf16      	itet	ne
 8005f68:	f82c 2b02 	strhne.w	r2, [ip], #2
 8005f6c:	f88c 2000 	strbeq.w	r2, [ip]
 8005f70:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8005f74:	d1b3      	bne.n	8005ede <strcpy+0x12>
 8005f76:	4770      	bx	lr
 8005f78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f7c:	f80c 2b01 	strb.w	r2, [ip], #1
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d1f9      	bne.n	8005f78 <strcpy+0xac>
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop

08005f88 <strlen>:
 8005f88:	f020 0103 	bic.w	r1, r0, #3
 8005f8c:	f010 0003 	ands.w	r0, r0, #3
 8005f90:	f1c0 0000 	rsb	r0, r0, #0
 8005f94:	f851 3b04 	ldr.w	r3, [r1], #4
 8005f98:	f100 0c04 	add.w	ip, r0, #4
 8005f9c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005fa0:	f06f 0200 	mvn.w	r2, #0
 8005fa4:	bf1c      	itt	ne
 8005fa6:	fa22 f20c 	lsrne.w	r2, r2, ip
 8005faa:	4313      	orrne	r3, r2
 8005fac:	f04f 0c01 	mov.w	ip, #1
 8005fb0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8005fb4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8005fb8:	eba3 020c 	sub.w	r2, r3, ip
 8005fbc:	ea22 0203 	bic.w	r2, r2, r3
 8005fc0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8005fc4:	bf04      	itt	eq
 8005fc6:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005fca:	3004      	addeq	r0, #4
 8005fcc:	d0f4      	beq.n	8005fb8 <strlen+0x30>
 8005fce:	f1c2 0100 	rsb	r1, r2, #0
 8005fd2:	ea02 0201 	and.w	r2, r2, r1
 8005fd6:	fab2 f282 	clz	r2, r2
 8005fda:	f1c2 021f 	rsb	r2, r2, #31
 8005fde:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8005fe2:	4770      	bx	lr

08005fe4 <strtok>:
 8005fe4:	4b02      	ldr	r3, [pc, #8]	; (8005ff0 <strtok+0xc>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	2301      	movs	r3, #1
 8005fea:	325c      	adds	r2, #92	; 0x5c
 8005fec:	f000 b802 	b.w	8005ff4 <__strtok_r>
 8005ff0:	20000628 	.word	0x20000628

08005ff4 <__strtok_r>:
 8005ff4:	b4f0      	push	{r4, r5, r6, r7}
 8005ff6:	b320      	cbz	r0, 8006042 <__strtok_r+0x4e>
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	460d      	mov	r5, r1
 8005ffc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006000:	e001      	b.n	8006006 <__strtok_r+0x12>
 8006002:	42a6      	cmp	r6, r4
 8006004:	d016      	beq.n	8006034 <__strtok_r+0x40>
 8006006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800600a:	2c00      	cmp	r4, #0
 800600c:	d1f9      	bne.n	8006002 <__strtok_r+0xe>
 800600e:	b1ee      	cbz	r6, 800604c <__strtok_r+0x58>
 8006010:	463e      	mov	r6, r7
 8006012:	460c      	mov	r4, r1
 8006014:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006018:	e000      	b.n	800601c <__strtok_r+0x28>
 800601a:	b173      	cbz	r3, 800603a <__strtok_r+0x46>
 800601c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006020:	42ab      	cmp	r3, r5
 8006022:	d1fa      	bne.n	800601a <__strtok_r+0x26>
 8006024:	b15d      	cbz	r5, 800603e <__strtok_r+0x4a>
 8006026:	2300      	movs	r3, #0
 8006028:	703b      	strb	r3, [r7, #0]
 800602a:	6016      	str	r6, [r2, #0]
 800602c:	4606      	mov	r6, r0
 800602e:	4630      	mov	r0, r6
 8006030:	bcf0      	pop	{r4, r5, r6, r7}
 8006032:	4770      	bx	lr
 8006034:	b163      	cbz	r3, 8006050 <__strtok_r+0x5c>
 8006036:	4638      	mov	r0, r7
 8006038:	e7de      	b.n	8005ff8 <__strtok_r+0x4>
 800603a:	4637      	mov	r7, r6
 800603c:	e7e8      	b.n	8006010 <__strtok_r+0x1c>
 800603e:	462e      	mov	r6, r5
 8006040:	e7f3      	b.n	800602a <__strtok_r+0x36>
 8006042:	6810      	ldr	r0, [r2, #0]
 8006044:	2800      	cmp	r0, #0
 8006046:	d1d7      	bne.n	8005ff8 <__strtok_r+0x4>
 8006048:	4606      	mov	r6, r0
 800604a:	e7f0      	b.n	800602e <__strtok_r+0x3a>
 800604c:	6016      	str	r6, [r2, #0]
 800604e:	e7ee      	b.n	800602e <__strtok_r+0x3a>
 8006050:	6017      	str	r7, [r2, #0]
 8006052:	4606      	mov	r6, r0
 8006054:	7003      	strb	r3, [r0, #0]
 8006056:	e7ea      	b.n	800602e <__strtok_r+0x3a>

08006058 <_strtoul_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4c46      	ldr	r4, [pc, #280]	; (8006178 <_strtoul_r+0x120>)
 800605e:	460f      	mov	r7, r1
 8006060:	f8d4 e000 	ldr.w	lr, [r4]
 8006064:	e000      	b.n	8006068 <_strtoul_r+0x10>
 8006066:	4627      	mov	r7, r4
 8006068:	463c      	mov	r4, r7
 800606a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800606e:	eb0e 0605 	add.w	r6, lr, r5
 8006072:	7876      	ldrb	r6, [r6, #1]
 8006074:	f006 0608 	and.w	r6, r6, #8
 8006078:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 800607c:	2e00      	cmp	r6, #0
 800607e:	d1f2      	bne.n	8006066 <_strtoul_r+0xe>
 8006080:	2d2d      	cmp	r5, #45	; 0x2d
 8006082:	d051      	beq.n	8006128 <_strtoul_r+0xd0>
 8006084:	2d2b      	cmp	r5, #43	; 0x2b
 8006086:	bf04      	itt	eq
 8006088:	787d      	ldrbeq	r5, [r7, #1]
 800608a:	1cbc      	addeq	r4, r7, #2
 800608c:	b15b      	cbz	r3, 80060a6 <_strtoul_r+0x4e>
 800608e:	2b10      	cmp	r3, #16
 8006090:	d05b      	beq.n	800614a <_strtoul_r+0xf2>
 8006092:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006096:	fbb9 f9f3 	udiv	r9, r9, r3
 800609a:	fb03 fb09 	mul.w	fp, r3, r9
 800609e:	ea6f 0b0b 	mvn.w	fp, fp
 80060a2:	469a      	mov	sl, r3
 80060a4:	e007      	b.n	80060b6 <_strtoul_r+0x5e>
 80060a6:	2d30      	cmp	r5, #48	; 0x30
 80060a8:	d043      	beq.n	8006132 <_strtoul_r+0xda>
 80060aa:	230a      	movs	r3, #10
 80060ac:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800617c <_strtoul_r+0x124>
 80060b0:	469a      	mov	sl, r3
 80060b2:	f04f 0b05 	mov.w	fp, #5
 80060b6:	2700      	movs	r7, #0
 80060b8:	46bc      	mov	ip, r7
 80060ba:	e00c      	b.n	80060d6 <_strtoul_r+0x7e>
 80060bc:	3d30      	subs	r5, #48	; 0x30
 80060be:	42ab      	cmp	r3, r5
 80060c0:	dd19      	ble.n	80060f6 <_strtoul_r+0x9e>
 80060c2:	1c7e      	adds	r6, r7, #1
 80060c4:	d005      	beq.n	80060d2 <_strtoul_r+0x7a>
 80060c6:	45cc      	cmp	ip, r9
 80060c8:	d824      	bhi.n	8006114 <_strtoul_r+0xbc>
 80060ca:	d021      	beq.n	8006110 <_strtoul_r+0xb8>
 80060cc:	fb0a 5c0c 	mla	ip, sl, ip, r5
 80060d0:	2701      	movs	r7, #1
 80060d2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80060d6:	eb0e 0605 	add.w	r6, lr, r5
 80060da:	7876      	ldrb	r6, [r6, #1]
 80060dc:	f016 0f04 	tst.w	r6, #4
 80060e0:	d1ec      	bne.n	80060bc <_strtoul_r+0x64>
 80060e2:	f016 0603 	ands.w	r6, r6, #3
 80060e6:	d006      	beq.n	80060f6 <_strtoul_r+0x9e>
 80060e8:	2e01      	cmp	r6, #1
 80060ea:	bf0c      	ite	eq
 80060ec:	2637      	moveq	r6, #55	; 0x37
 80060ee:	2657      	movne	r6, #87	; 0x57
 80060f0:	1bad      	subs	r5, r5, r6
 80060f2:	42ab      	cmp	r3, r5
 80060f4:	dce5      	bgt.n	80060c2 <_strtoul_r+0x6a>
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	db11      	blt.n	800611e <_strtoul_r+0xc6>
 80060fa:	f1c8 0000 	rsb	r0, r8, #0
 80060fe:	ea8c 0000 	eor.w	r0, ip, r0
 8006102:	4440      	add	r0, r8
 8006104:	b14a      	cbz	r2, 800611a <_strtoul_r+0xc2>
 8006106:	b107      	cbz	r7, 800610a <_strtoul_r+0xb2>
 8006108:	1e61      	subs	r1, r4, #1
 800610a:	6011      	str	r1, [r2, #0]
 800610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	455d      	cmp	r5, fp
 8006112:	dddb      	ble.n	80060cc <_strtoul_r+0x74>
 8006114:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006118:	e7db      	b.n	80060d2 <_strtoul_r+0x7a>
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	2322      	movs	r3, #34	; 0x22
 8006120:	6003      	str	r3, [r0, #0]
 8006122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006126:	e7ed      	b.n	8006104 <_strtoul_r+0xac>
 8006128:	1cbc      	adds	r4, r7, #2
 800612a:	787d      	ldrb	r5, [r7, #1]
 800612c:	f04f 0801 	mov.w	r8, #1
 8006130:	e7ac      	b.n	800608c <_strtoul_r+0x34>
 8006132:	7823      	ldrb	r3, [r4, #0]
 8006134:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006138:	2b58      	cmp	r3, #88	; 0x58
 800613a:	d013      	beq.n	8006164 <_strtoul_r+0x10c>
 800613c:	2308      	movs	r3, #8
 800613e:	469a      	mov	sl, r3
 8006140:	f04f 0b07 	mov.w	fp, #7
 8006144:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8006148:	e7b5      	b.n	80060b6 <_strtoul_r+0x5e>
 800614a:	2d30      	cmp	r5, #48	; 0x30
 800614c:	d005      	beq.n	800615a <_strtoul_r+0x102>
 800614e:	f04f 0b0f 	mov.w	fp, #15
 8006152:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8006156:	469a      	mov	sl, r3
 8006158:	e7ad      	b.n	80060b6 <_strtoul_r+0x5e>
 800615a:	7826      	ldrb	r6, [r4, #0]
 800615c:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 8006160:	2e58      	cmp	r6, #88	; 0x58
 8006162:	d1f4      	bne.n	800614e <_strtoul_r+0xf6>
 8006164:	f04f 0a10 	mov.w	sl, #16
 8006168:	7865      	ldrb	r5, [r4, #1]
 800616a:	4653      	mov	r3, sl
 800616c:	f04f 0b0f 	mov.w	fp, #15
 8006170:	3402      	adds	r4, #2
 8006172:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8006176:	e79e      	b.n	80060b6 <_strtoul_r+0x5e>
 8006178:	200001fc 	.word	0x200001fc
 800617c:	19999999 	.word	0x19999999

08006180 <strtoul>:
 8006180:	b430      	push	{r4, r5}
 8006182:	4c04      	ldr	r4, [pc, #16]	; (8006194 <strtoul+0x14>)
 8006184:	460d      	mov	r5, r1
 8006186:	4613      	mov	r3, r2
 8006188:	4601      	mov	r1, r0
 800618a:	462a      	mov	r2, r5
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	bc30      	pop	{r4, r5}
 8006190:	f7ff bf62 	b.w	8006058 <_strtoul_r>
 8006194:	20000628 	.word	0x20000628

08006198 <_vfprintf_r>:
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	b0bd      	sub	sp, #244	; 0xf4
 800619e:	461c      	mov	r4, r3
 80061a0:	4689      	mov	r9, r1
 80061a2:	9204      	str	r2, [sp, #16]
 80061a4:	4607      	mov	r7, r0
 80061a6:	f002 fee5 	bl	8008f74 <_localeconv_r>
 80061aa:	6803      	ldr	r3, [r0, #0]
 80061ac:	9311      	str	r3, [sp, #68]	; 0x44
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff feea 	bl	8005f88 <strlen>
 80061b4:	9408      	str	r4, [sp, #32]
 80061b6:	9012      	str	r0, [sp, #72]	; 0x48
 80061b8:	b11f      	cbz	r7, 80061c2 <_vfprintf_r+0x2a>
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80f3 	beq.w	80063a8 <_vfprintf_r+0x210>
 80061c2:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80061c6:	b293      	uxth	r3, r2
 80061c8:	049e      	lsls	r6, r3, #18
 80061ca:	d40a      	bmi.n	80061e2 <_vfprintf_r+0x4a>
 80061cc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 80061d0:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 80061d4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80061d8:	f8a9 300c 	strh.w	r3, [r9, #12]
 80061dc:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	071d      	lsls	r5, r3, #28
 80061e4:	f140 80aa 	bpl.w	800633c <_vfprintf_r+0x1a4>
 80061e8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80061ec:	2a00      	cmp	r2, #0
 80061ee:	f000 80a5 	beq.w	800633c <_vfprintf_r+0x1a4>
 80061f2:	f003 031a 	and.w	r3, r3, #26
 80061f6:	2b0a      	cmp	r3, #10
 80061f8:	f000 80ac 	beq.w	8006354 <_vfprintf_r+0x1bc>
 80061fc:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 80063b8 <_vfprintf_r+0x220>
 8006200:	2300      	movs	r3, #0
 8006202:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006206:	930d      	str	r3, [sp, #52]	; 0x34
 8006208:	9321      	str	r3, [sp, #132]	; 0x84
 800620a:	9320      	str	r3, [sp, #128]	; 0x80
 800620c:	9310      	str	r3, [sp, #64]	; 0x40
 800620e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	ab2c      	add	r3, sp, #176	; 0xb0
 8006214:	931f      	str	r3, [sp, #124]	; 0x7c
 8006216:	461c      	mov	r4, r3
 8006218:	46b8      	mov	r8, r7
 800621a:	9d04      	ldr	r5, [sp, #16]
 800621c:	782b      	ldrb	r3, [r5, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80c6 	beq.w	80063b0 <_vfprintf_r+0x218>
 8006224:	2b25      	cmp	r3, #37	; 0x25
 8006226:	d102      	bne.n	800622e <_vfprintf_r+0x96>
 8006228:	e0c2      	b.n	80063b0 <_vfprintf_r+0x218>
 800622a:	2b25      	cmp	r3, #37	; 0x25
 800622c:	d003      	beq.n	8006236 <_vfprintf_r+0x9e>
 800622e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f9      	bne.n	800622a <_vfprintf_r+0x92>
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	1aee      	subs	r6, r5, r3
 800623a:	b17e      	cbz	r6, 800625c <_vfprintf_r+0xc4>
 800623c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800623e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006240:	9904      	ldr	r1, [sp, #16]
 8006242:	6021      	str	r1, [r4, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	4432      	add	r2, r6
 8006248:	2b07      	cmp	r3, #7
 800624a:	6066      	str	r6, [r4, #4]
 800624c:	9221      	str	r2, [sp, #132]	; 0x84
 800624e:	9320      	str	r3, [sp, #128]	; 0x80
 8006250:	f300 8093 	bgt.w	800637a <_vfprintf_r+0x1e2>
 8006254:	3408      	adds	r4, #8
 8006256:	9b05      	ldr	r3, [sp, #20]
 8006258:	4433      	add	r3, r6
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	782b      	ldrb	r3, [r5, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8093 	beq.w	800638a <_vfprintf_r+0x1f2>
 8006264:	2300      	movs	r3, #0
 8006266:	1c69      	adds	r1, r5, #1
 8006268:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800626c:	786d      	ldrb	r5, [r5, #1]
 800626e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006272:	461a      	mov	r2, r3
 8006274:	9306      	str	r3, [sp, #24]
 8006276:	9302      	str	r3, [sp, #8]
 8006278:	4656      	mov	r6, sl
 800627a:	1c4b      	adds	r3, r1, #1
 800627c:	f1a5 0120 	sub.w	r1, r5, #32
 8006280:	2958      	cmp	r1, #88	; 0x58
 8006282:	f200 83cd 	bhi.w	8006a20 <_vfprintf_r+0x888>
 8006286:	e8df f011 	tbh	[pc, r1, lsl #1]
 800628a:	025c      	.short	0x025c
 800628c:	03cb03cb 	.word	0x03cb03cb
 8006290:	03cb0302 	.word	0x03cb0302
 8006294:	03cb03cb 	.word	0x03cb03cb
 8006298:	03cb03cb 	.word	0x03cb03cb
 800629c:	030903cb 	.word	0x030903cb
 80062a0:	03cb02d2 	.word	0x03cb02d2
 80062a4:	035301f8 	.word	0x035301f8
 80062a8:	02d603cb 	.word	0x02d603cb
 80062ac:	02dd02dd 	.word	0x02dd02dd
 80062b0:	02dd02dd 	.word	0x02dd02dd
 80062b4:	02dd02dd 	.word	0x02dd02dd
 80062b8:	02dd02dd 	.word	0x02dd02dd
 80062bc:	03cb02dd 	.word	0x03cb02dd
 80062c0:	03cb03cb 	.word	0x03cb03cb
 80062c4:	03cb03cb 	.word	0x03cb03cb
 80062c8:	03cb03cb 	.word	0x03cb03cb
 80062cc:	03cb03cb 	.word	0x03cb03cb
 80062d0:	027103cb 	.word	0x027103cb
 80062d4:	03cb0293 	.word	0x03cb0293
 80062d8:	03cb0293 	.word	0x03cb0293
 80062dc:	03cb03cb 	.word	0x03cb03cb
 80062e0:	02cb03cb 	.word	0x02cb03cb
 80062e4:	03cb03cb 	.word	0x03cb03cb
 80062e8:	03cb036e 	.word	0x03cb036e
 80062ec:	03cb03cb 	.word	0x03cb03cb
 80062f0:	03cb03cb 	.word	0x03cb03cb
 80062f4:	03cb03b5 	.word	0x03cb03b5
 80062f8:	038b03cb 	.word	0x038b03cb
 80062fc:	03cb03cb 	.word	0x03cb03cb
 8006300:	03cb03cb 	.word	0x03cb03cb
 8006304:	03cb03cb 	.word	0x03cb03cb
 8006308:	03cb03cb 	.word	0x03cb03cb
 800630c:	03cb03cb 	.word	0x03cb03cb
 8006310:	031703a0 	.word	0x031703a0
 8006314:	02930293 	.word	0x02930293
 8006318:	03300293 	.word	0x03300293
 800631c:	03cb0317 	.word	0x03cb0317
 8006320:	033703cb 	.word	0x033703cb
 8006324:	034103cb 	.word	0x034103cb
 8006328:	02ec01ff 	.word	0x02ec01ff
 800632c:	03cb0263 	.word	0x03cb0263
 8006330:	03cb0211 	.word	0x03cb0211
 8006334:	03cb009b 	.word	0x03cb009b
 8006338:	023603cb 	.word	0x023603cb
 800633c:	4638      	mov	r0, r7
 800633e:	4649      	mov	r1, r9
 8006340:	f001 f978 	bl	8007634 <__swsetup_r>
 8006344:	b9a0      	cbnz	r0, 8006370 <_vfprintf_r+0x1d8>
 8006346:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800634a:	f003 031a 	and.w	r3, r3, #26
 800634e:	2b0a      	cmp	r3, #10
 8006350:	f47f af54 	bne.w	80061fc <_vfprintf_r+0x64>
 8006354:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8006358:	2b00      	cmp	r3, #0
 800635a:	f6ff af4f 	blt.w	80061fc <_vfprintf_r+0x64>
 800635e:	4638      	mov	r0, r7
 8006360:	4649      	mov	r1, r9
 8006362:	9a04      	ldr	r2, [sp, #16]
 8006364:	4623      	mov	r3, r4
 8006366:	f001 f929 	bl	80075bc <__sbprintf>
 800636a:	b03d      	add	sp, #244	; 0xf4
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006374:	b03d      	add	sp, #244	; 0xf4
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006380:	f003 ff7c 	bl	800a27c <__sprint_r>
 8006384:	b940      	cbnz	r0, 8006398 <_vfprintf_r+0x200>
 8006386:	ac2c      	add	r4, sp, #176	; 0xb0
 8006388:	e765      	b.n	8006256 <_vfprintf_r+0xbe>
 800638a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800638c:	b123      	cbz	r3, 8006398 <_vfprintf_r+0x200>
 800638e:	4640      	mov	r0, r8
 8006390:	4649      	mov	r1, r9
 8006392:	aa1f      	add	r2, sp, #124	; 0x7c
 8006394:	f003 ff72 	bl	800a27c <__sprint_r>
 8006398:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800639c:	065a      	lsls	r2, r3, #25
 800639e:	d4e7      	bmi.n	8006370 <_vfprintf_r+0x1d8>
 80063a0:	9805      	ldr	r0, [sp, #20]
 80063a2:	b03d      	add	sp, #244	; 0xf4
 80063a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a8:	4638      	mov	r0, r7
 80063aa:	f002 fadd 	bl	8008968 <__sinit>
 80063ae:	e708      	b.n	80061c2 <_vfprintf_r+0x2a>
 80063b0:	9d04      	ldr	r5, [sp, #16]
 80063b2:	e753      	b.n	800625c <_vfprintf_r+0xc4>
 80063b4:	f3af 8000 	nop.w
	...
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	46b2      	mov	sl, r6
 80063c6:	069e      	lsls	r6, r3, #26
 80063c8:	f140 831e 	bpl.w	8006a08 <_vfprintf_r+0x870>
 80063cc:	9f08      	ldr	r7, [sp, #32]
 80063ce:	3707      	adds	r7, #7
 80063d0:	f027 0307 	bic.w	r3, r7, #7
 80063d4:	f103 0208 	add.w	r2, r3, #8
 80063d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80063dc:	9208      	str	r2, [sp, #32]
 80063de:	2301      	movs	r3, #1
 80063e0:	f04f 0c00 	mov.w	ip, #0
 80063e4:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80063e8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80063ec:	f1ba 0f00 	cmp.w	sl, #0
 80063f0:	db03      	blt.n	80063fa <_vfprintf_r+0x262>
 80063f2:	9a02      	ldr	r2, [sp, #8]
 80063f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063f8:	9202      	str	r2, [sp, #8]
 80063fa:	ea56 0207 	orrs.w	r2, r6, r7
 80063fe:	f040 831f 	bne.w	8006a40 <_vfprintf_r+0x8a8>
 8006402:	f1ba 0f00 	cmp.w	sl, #0
 8006406:	f000 841c 	beq.w	8006c42 <_vfprintf_r+0xaaa>
 800640a:	2b01      	cmp	r3, #1
 800640c:	f000 8320 	beq.w	8006a50 <_vfprintf_r+0x8b8>
 8006410:	2b02      	cmp	r3, #2
 8006412:	f000 8452 	beq.w	8006cba <_vfprintf_r+0xb22>
 8006416:	a92c      	add	r1, sp, #176	; 0xb0
 8006418:	08f2      	lsrs	r2, r6, #3
 800641a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800641e:	08f8      	lsrs	r0, r7, #3
 8006420:	f006 0307 	and.w	r3, r6, #7
 8006424:	4607      	mov	r7, r0
 8006426:	4616      	mov	r6, r2
 8006428:	3330      	adds	r3, #48	; 0x30
 800642a:	ea56 0207 	orrs.w	r2, r6, r7
 800642e:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8006432:	d1f1      	bne.n	8006418 <_vfprintf_r+0x280>
 8006434:	9a02      	ldr	r2, [sp, #8]
 8006436:	910a      	str	r1, [sp, #40]	; 0x28
 8006438:	07d0      	lsls	r0, r2, #31
 800643a:	f100 84f9 	bmi.w	8006e30 <_vfprintf_r+0xc98>
 800643e:	ab2c      	add	r3, sp, #176	; 0xb0
 8006440:	1a5b      	subs	r3, r3, r1
 8006442:	9307      	str	r3, [sp, #28]
 8006444:	9a07      	ldr	r2, [sp, #28]
 8006446:	4592      	cmp	sl, r2
 8006448:	4653      	mov	r3, sl
 800644a:	bfb8      	it	lt
 800644c:	4613      	movlt	r3, r2
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	2300      	movs	r3, #0
 8006452:	930c      	str	r3, [sp, #48]	; 0x30
 8006454:	f1bc 0f00 	cmp.w	ip, #0
 8006458:	d002      	beq.n	8006460 <_vfprintf_r+0x2c8>
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	9303      	str	r3, [sp, #12]
 8006460:	9b02      	ldr	r3, [sp, #8]
 8006462:	f013 0302 	ands.w	r3, r3, #2
 8006466:	9309      	str	r3, [sp, #36]	; 0x24
 8006468:	d002      	beq.n	8006470 <_vfprintf_r+0x2d8>
 800646a:	9b03      	ldr	r3, [sp, #12]
 800646c:	3302      	adds	r3, #2
 800646e:	9303      	str	r3, [sp, #12]
 8006470:	9b02      	ldr	r3, [sp, #8]
 8006472:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8006476:	f040 82e0 	bne.w	8006a3a <_vfprintf_r+0x8a2>
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	9a03      	ldr	r2, [sp, #12]
 800647e:	ebc2 0a03 	rsb	sl, r2, r3
 8006482:	f1ba 0f00 	cmp.w	sl, #0
 8006486:	f340 82d8 	ble.w	8006a3a <_vfprintf_r+0x8a2>
 800648a:	f1ba 0f10 	cmp.w	sl, #16
 800648e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8006490:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006492:	4fb3      	ldr	r7, [pc, #716]	; (8006760 <_vfprintf_r+0x5c8>)
 8006494:	bfc8      	it	gt
 8006496:	f04f 0b10 	movgt.w	fp, #16
 800649a:	dc07      	bgt.n	80064ac <_vfprintf_r+0x314>
 800649c:	e01e      	b.n	80064dc <_vfprintf_r+0x344>
 800649e:	f1aa 0a10 	sub.w	sl, sl, #16
 80064a2:	f1ba 0f10 	cmp.w	sl, #16
 80064a6:	f104 0408 	add.w	r4, r4, #8
 80064aa:	dd17      	ble.n	80064dc <_vfprintf_r+0x344>
 80064ac:	3201      	adds	r2, #1
 80064ae:	3110      	adds	r1, #16
 80064b0:	2a07      	cmp	r2, #7
 80064b2:	9121      	str	r1, [sp, #132]	; 0x84
 80064b4:	9220      	str	r2, [sp, #128]	; 0x80
 80064b6:	e884 0880 	stmia.w	r4, {r7, fp}
 80064ba:	ddf0      	ble.n	800649e <_vfprintf_r+0x306>
 80064bc:	4640      	mov	r0, r8
 80064be:	4649      	mov	r1, r9
 80064c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80064c2:	f003 fedb 	bl	800a27c <__sprint_r>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f47f af66 	bne.w	8006398 <_vfprintf_r+0x200>
 80064cc:	f1aa 0a10 	sub.w	sl, sl, #16
 80064d0:	f1ba 0f10 	cmp.w	sl, #16
 80064d4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80064d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80064da:	dce7      	bgt.n	80064ac <_vfprintf_r+0x314>
 80064dc:	3201      	adds	r2, #1
 80064de:	eb0a 0b01 	add.w	fp, sl, r1
 80064e2:	2a07      	cmp	r2, #7
 80064e4:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80064e8:	9220      	str	r2, [sp, #128]	; 0x80
 80064ea:	e884 0480 	stmia.w	r4, {r7, sl}
 80064ee:	f300 844a 	bgt.w	8006d86 <_vfprintf_r+0xbee>
 80064f2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80064f6:	3408      	adds	r4, #8
 80064f8:	f1bc 0f00 	cmp.w	ip, #0
 80064fc:	d00f      	beq.n	800651e <_vfprintf_r+0x386>
 80064fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006500:	3301      	adds	r3, #1
 8006502:	f10b 0b01 	add.w	fp, fp, #1
 8006506:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 800650a:	2201      	movs	r2, #1
 800650c:	2b07      	cmp	r3, #7
 800650e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006512:	9320      	str	r3, [sp, #128]	; 0x80
 8006514:	e884 0006 	stmia.w	r4, {r1, r2}
 8006518:	f300 83b1 	bgt.w	8006c7e <_vfprintf_r+0xae6>
 800651c:	3408      	adds	r4, #8
 800651e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006520:	b173      	cbz	r3, 8006540 <_vfprintf_r+0x3a8>
 8006522:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006524:	3301      	adds	r3, #1
 8006526:	f10b 0b02 	add.w	fp, fp, #2
 800652a:	a918      	add	r1, sp, #96	; 0x60
 800652c:	2202      	movs	r2, #2
 800652e:	2b07      	cmp	r3, #7
 8006530:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006534:	9320      	str	r3, [sp, #128]	; 0x80
 8006536:	e884 0006 	stmia.w	r4, {r1, r2}
 800653a:	f300 83ac 	bgt.w	8006c96 <_vfprintf_r+0xafe>
 800653e:	3408      	adds	r4, #8
 8006540:	2e80      	cmp	r6, #128	; 0x80
 8006542:	f000 82f0 	beq.w	8006b26 <_vfprintf_r+0x98e>
 8006546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006548:	9a07      	ldr	r2, [sp, #28]
 800654a:	ebc2 0a03 	rsb	sl, r2, r3
 800654e:	f1ba 0f00 	cmp.w	sl, #0
 8006552:	dd32      	ble.n	80065ba <_vfprintf_r+0x422>
 8006554:	f1ba 0f10 	cmp.w	sl, #16
 8006558:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800655a:	4f82      	ldr	r7, [pc, #520]	; (8006764 <_vfprintf_r+0x5cc>)
 800655c:	dd22      	ble.n	80065a4 <_vfprintf_r+0x40c>
 800655e:	2610      	movs	r6, #16
 8006560:	465b      	mov	r3, fp
 8006562:	e006      	b.n	8006572 <_vfprintf_r+0x3da>
 8006564:	f1aa 0a10 	sub.w	sl, sl, #16
 8006568:	f1ba 0f10 	cmp.w	sl, #16
 800656c:	f104 0408 	add.w	r4, r4, #8
 8006570:	dd17      	ble.n	80065a2 <_vfprintf_r+0x40a>
 8006572:	3201      	adds	r2, #1
 8006574:	3310      	adds	r3, #16
 8006576:	2a07      	cmp	r2, #7
 8006578:	9321      	str	r3, [sp, #132]	; 0x84
 800657a:	9220      	str	r2, [sp, #128]	; 0x80
 800657c:	6027      	str	r7, [r4, #0]
 800657e:	6066      	str	r6, [r4, #4]
 8006580:	ddf0      	ble.n	8006564 <_vfprintf_r+0x3cc>
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	aa1f      	add	r2, sp, #124	; 0x7c
 8006588:	f003 fe78 	bl	800a27c <__sprint_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	f47f af03 	bne.w	8006398 <_vfprintf_r+0x200>
 8006592:	f1aa 0a10 	sub.w	sl, sl, #16
 8006596:	f1ba 0f10 	cmp.w	sl, #16
 800659a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800659c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800659e:	ac2c      	add	r4, sp, #176	; 0xb0
 80065a0:	dce7      	bgt.n	8006572 <_vfprintf_r+0x3da>
 80065a2:	469b      	mov	fp, r3
 80065a4:	3201      	adds	r2, #1
 80065a6:	44d3      	add	fp, sl
 80065a8:	2a07      	cmp	r2, #7
 80065aa:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80065ae:	9220      	str	r2, [sp, #128]	; 0x80
 80065b0:	e884 0480 	stmia.w	r4, {r7, sl}
 80065b4:	f300 8357 	bgt.w	8006c66 <_vfprintf_r+0xace>
 80065b8:	3408      	adds	r4, #8
 80065ba:	9b02      	ldr	r3, [sp, #8]
 80065bc:	05db      	lsls	r3, r3, #23
 80065be:	f100 825b 	bmi.w	8006a78 <_vfprintf_r+0x8e0>
 80065c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065c4:	9907      	ldr	r1, [sp, #28]
 80065c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c8:	6022      	str	r2, [r4, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	448b      	add	fp, r1
 80065ce:	2b07      	cmp	r3, #7
 80065d0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80065d4:	6061      	str	r1, [r4, #4]
 80065d6:	9320      	str	r3, [sp, #128]	; 0x80
 80065d8:	f300 831d 	bgt.w	8006c16 <_vfprintf_r+0xa7e>
 80065dc:	3408      	adds	r4, #8
 80065de:	9b02      	ldr	r3, [sp, #8]
 80065e0:	0759      	lsls	r1, r3, #29
 80065e2:	d53a      	bpl.n	800665a <_vfprintf_r+0x4c2>
 80065e4:	9b06      	ldr	r3, [sp, #24]
 80065e6:	9a03      	ldr	r2, [sp, #12]
 80065e8:	1a9d      	subs	r5, r3, r2
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	dd35      	ble.n	800665a <_vfprintf_r+0x4c2>
 80065ee:	2d10      	cmp	r5, #16
 80065f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065f2:	4f5b      	ldr	r7, [pc, #364]	; (8006760 <_vfprintf_r+0x5c8>)
 80065f4:	dd1e      	ble.n	8006634 <_vfprintf_r+0x49c>
 80065f6:	2610      	movs	r6, #16
 80065f8:	465a      	mov	r2, fp
 80065fa:	e004      	b.n	8006606 <_vfprintf_r+0x46e>
 80065fc:	3d10      	subs	r5, #16
 80065fe:	2d10      	cmp	r5, #16
 8006600:	f104 0408 	add.w	r4, r4, #8
 8006604:	dd15      	ble.n	8006632 <_vfprintf_r+0x49a>
 8006606:	3301      	adds	r3, #1
 8006608:	3210      	adds	r2, #16
 800660a:	2b07      	cmp	r3, #7
 800660c:	9221      	str	r2, [sp, #132]	; 0x84
 800660e:	9320      	str	r3, [sp, #128]	; 0x80
 8006610:	6027      	str	r7, [r4, #0]
 8006612:	6066      	str	r6, [r4, #4]
 8006614:	ddf2      	ble.n	80065fc <_vfprintf_r+0x464>
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	aa1f      	add	r2, sp, #124	; 0x7c
 800661c:	f003 fe2e 	bl	800a27c <__sprint_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	f47f aeb9 	bne.w	8006398 <_vfprintf_r+0x200>
 8006626:	3d10      	subs	r5, #16
 8006628:	2d10      	cmp	r5, #16
 800662a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800662c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800662e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006630:	dce9      	bgt.n	8006606 <_vfprintf_r+0x46e>
 8006632:	4693      	mov	fp, r2
 8006634:	3301      	adds	r3, #1
 8006636:	44ab      	add	fp, r5
 8006638:	2b07      	cmp	r3, #7
 800663a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800663e:	9320      	str	r3, [sp, #128]	; 0x80
 8006640:	6027      	str	r7, [r4, #0]
 8006642:	6065      	str	r5, [r4, #4]
 8006644:	dd09      	ble.n	800665a <_vfprintf_r+0x4c2>
 8006646:	4640      	mov	r0, r8
 8006648:	4649      	mov	r1, r9
 800664a:	aa1f      	add	r2, sp, #124	; 0x7c
 800664c:	f003 fe16 	bl	800a27c <__sprint_r>
 8006650:	2800      	cmp	r0, #0
 8006652:	f47f aea1 	bne.w	8006398 <_vfprintf_r+0x200>
 8006656:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800665a:	9b05      	ldr	r3, [sp, #20]
 800665c:	9a03      	ldr	r2, [sp, #12]
 800665e:	9906      	ldr	r1, [sp, #24]
 8006660:	428a      	cmp	r2, r1
 8006662:	bfac      	ite	ge
 8006664:	189b      	addge	r3, r3, r2
 8006666:	185b      	addlt	r3, r3, r1
 8006668:	9305      	str	r3, [sp, #20]
 800666a:	f1bb 0f00 	cmp.w	fp, #0
 800666e:	f040 82de 	bne.w	8006c2e <_vfprintf_r+0xa96>
 8006672:	2300      	movs	r3, #0
 8006674:	9320      	str	r3, [sp, #128]	; 0x80
 8006676:	ac2c      	add	r4, sp, #176	; 0xb0
 8006678:	e5cf      	b.n	800621a <_vfprintf_r+0x82>
 800667a:	4619      	mov	r1, r3
 800667c:	9802      	ldr	r0, [sp, #8]
 800667e:	781d      	ldrb	r5, [r3, #0]
 8006680:	f040 0004 	orr.w	r0, r0, #4
 8006684:	9002      	str	r0, [sp, #8]
 8006686:	e5f8      	b.n	800627a <_vfprintf_r+0xe2>
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	9b02      	ldr	r3, [sp, #8]
 800668c:	f013 0320 	ands.w	r3, r3, #32
 8006690:	46b2      	mov	sl, r6
 8006692:	f000 8173 	beq.w	800697c <_vfprintf_r+0x7e4>
 8006696:	9f08      	ldr	r7, [sp, #32]
 8006698:	3707      	adds	r7, #7
 800669a:	f027 0307 	bic.w	r3, r7, #7
 800669e:	f103 0208 	add.w	r2, r3, #8
 80066a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80066a6:	9208      	str	r2, [sp, #32]
 80066a8:	2300      	movs	r3, #0
 80066aa:	e699      	b.n	80063e0 <_vfprintf_r+0x248>
 80066ac:	9a08      	ldr	r2, [sp, #32]
 80066ae:	9304      	str	r3, [sp, #16]
 80066b0:	6813      	ldr	r3, [r2, #0]
 80066b2:	930a      	str	r3, [sp, #40]	; 0x28
 80066b4:	f04f 0b00 	mov.w	fp, #0
 80066b8:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 80066bc:	1d17      	adds	r7, r2, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 865e 	beq.w	8007380 <_vfprintf_r+0x11e8>
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066c8:	f2c0 8612 	blt.w	80072f0 <_vfprintf_r+0x1158>
 80066cc:	4659      	mov	r1, fp
 80066ce:	4632      	mov	r2, r6
 80066d0:	f002 ff5e 	bl	8009590 <memchr>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f000 868f 	beq.w	80073f8 <_vfprintf_r+0x1260>
 80066da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80066e0:	1ac3      	subs	r3, r0, r3
 80066e2:	9307      	str	r3, [sp, #28]
 80066e4:	9708      	str	r7, [sp, #32]
 80066e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80066ea:	9303      	str	r3, [sp, #12]
 80066ec:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80066f0:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80066f4:	e6ae      	b.n	8006454 <_vfprintf_r+0x2bc>
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <_vfprintf_r+0x5d0>)
 80066fa:	9310      	str	r3, [sp, #64]	; 0x40
 80066fc:	9b02      	ldr	r3, [sp, #8]
 80066fe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006702:	0699      	lsls	r1, r3, #26
 8006704:	46b2      	mov	sl, r6
 8006706:	f140 8155 	bpl.w	80069b4 <_vfprintf_r+0x81c>
 800670a:	9f08      	ldr	r7, [sp, #32]
 800670c:	3707      	adds	r7, #7
 800670e:	f027 0307 	bic.w	r3, r7, #7
 8006712:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006716:	f103 0208 	add.w	r2, r3, #8
 800671a:	9208      	str	r2, [sp, #32]
 800671c:	9b02      	ldr	r3, [sp, #8]
 800671e:	07db      	lsls	r3, r3, #31
 8006720:	f140 82e4 	bpl.w	8006cec <_vfprintf_r+0xb54>
 8006724:	ea56 0307 	orrs.w	r3, r6, r7
 8006728:	f000 82e0 	beq.w	8006cec <_vfprintf_r+0xb54>
 800672c:	9a02      	ldr	r2, [sp, #8]
 800672e:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8006732:	2330      	movs	r3, #48	; 0x30
 8006734:	f042 0202 	orr.w	r2, r2, #2
 8006738:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800673c:	9202      	str	r2, [sp, #8]
 800673e:	2302      	movs	r3, #2
 8006740:	e64e      	b.n	80063e0 <_vfprintf_r+0x248>
 8006742:	781d      	ldrb	r5, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	2a00      	cmp	r2, #0
 8006748:	f47f ad97 	bne.w	800627a <_vfprintf_r+0xe2>
 800674c:	2220      	movs	r2, #32
 800674e:	e594      	b.n	800627a <_vfprintf_r+0xe2>
 8006750:	9902      	ldr	r1, [sp, #8]
 8006752:	f041 0120 	orr.w	r1, r1, #32
 8006756:	9102      	str	r1, [sp, #8]
 8006758:	781d      	ldrb	r5, [r3, #0]
 800675a:	4619      	mov	r1, r3
 800675c:	e58d      	b.n	800627a <_vfprintf_r+0xe2>
 800675e:	bf00      	nop
 8006760:	0801ad3c 	.word	0x0801ad3c
 8006764:	0801ace8 	.word	0x0801ace8
 8006768:	0801ad1c 	.word	0x0801ad1c
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	9b02      	ldr	r3, [sp, #8]
 8006770:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006774:	f043 0310 	orr.w	r3, r3, #16
 8006778:	9302      	str	r3, [sp, #8]
 800677a:	9b02      	ldr	r3, [sp, #8]
 800677c:	0698      	lsls	r0, r3, #26
 800677e:	46b2      	mov	sl, r6
 8006780:	f140 80a2 	bpl.w	80068c8 <_vfprintf_r+0x730>
 8006784:	9f08      	ldr	r7, [sp, #32]
 8006786:	3707      	adds	r7, #7
 8006788:	f027 0707 	bic.w	r7, r7, #7
 800678c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006790:	f107 0108 	add.w	r1, r7, #8
 8006794:	9108      	str	r1, [sp, #32]
 8006796:	4616      	mov	r6, r2
 8006798:	461f      	mov	r7, r3
 800679a:	2a00      	cmp	r2, #0
 800679c:	f173 0300 	sbcs.w	r3, r3, #0
 80067a0:	f2c0 841c 	blt.w	8006fdc <_vfprintf_r+0xe44>
 80067a4:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80067a8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80067ac:	2301      	movs	r3, #1
 80067ae:	e61d      	b.n	80063ec <_vfprintf_r+0x254>
 80067b0:	9304      	str	r3, [sp, #16]
 80067b2:	9b02      	ldr	r3, [sp, #8]
 80067b4:	9f08      	ldr	r7, [sp, #32]
 80067b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80067ba:	071b      	lsls	r3, r3, #28
 80067bc:	46b2      	mov	sl, r6
 80067be:	46b3      	mov	fp, r6
 80067c0:	f107 0707 	add.w	r7, r7, #7
 80067c4:	f140 849b 	bpl.w	80070fe <_vfprintf_r+0xf66>
 80067c8:	f027 0307 	bic.w	r3, r7, #7
 80067cc:	ed93 7b00 	vldr	d7, [r3]
 80067d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80067d4:	f103 0208 	add.w	r2, r3, #8
 80067d8:	9208      	str	r2, [sp, #32]
 80067da:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80067de:	f003 fca1 	bl	800a124 <__fpclassifyd>
 80067e2:	2801      	cmp	r0, #1
 80067e4:	f040 8408 	bne.w	8006ff8 <_vfprintf_r+0xe60>
 80067e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067ec:	2200      	movs	r2, #0
 80067ee:	2300      	movs	r3, #0
 80067f0:	f7fa f9bc 	bl	8000b6c <__aeabi_dcmplt>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	f040 85ec 	bne.w	80073d2 <_vfprintf_r+0x123a>
 80067fa:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80067fe:	9e02      	ldr	r6, [sp, #8]
 8006800:	4a99      	ldr	r2, [pc, #612]	; (8006a68 <_vfprintf_r+0x8d0>)
 8006802:	4b9a      	ldr	r3, [pc, #616]	; (8006a6c <_vfprintf_r+0x8d4>)
 8006804:	2103      	movs	r1, #3
 8006806:	2000      	movs	r0, #0
 8006808:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800680c:	2d47      	cmp	r5, #71	; 0x47
 800680e:	bfd8      	it	le
 8006810:	461a      	movle	r2, r3
 8006812:	9103      	str	r1, [sp, #12]
 8006814:	900b      	str	r0, [sp, #44]	; 0x2c
 8006816:	9602      	str	r6, [sp, #8]
 8006818:	920a      	str	r2, [sp, #40]	; 0x28
 800681a:	9107      	str	r1, [sp, #28]
 800681c:	900c      	str	r0, [sp, #48]	; 0x30
 800681e:	e619      	b.n	8006454 <_vfprintf_r+0x2bc>
 8006820:	9902      	ldr	r1, [sp, #8]
 8006822:	f041 0108 	orr.w	r1, r1, #8
 8006826:	9102      	str	r1, [sp, #8]
 8006828:	781d      	ldrb	r5, [r3, #0]
 800682a:	4619      	mov	r1, r3
 800682c:	e525      	b.n	800627a <_vfprintf_r+0xe2>
 800682e:	781d      	ldrb	r5, [r3, #0]
 8006830:	4619      	mov	r1, r3
 8006832:	222b      	movs	r2, #43	; 0x2b
 8006834:	e521      	b.n	800627a <_vfprintf_r+0xe2>
 8006836:	9902      	ldr	r1, [sp, #8]
 8006838:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800683c:	9102      	str	r1, [sp, #8]
 800683e:	781d      	ldrb	r5, [r3, #0]
 8006840:	4619      	mov	r1, r3
 8006842:	e51a      	b.n	800627a <_vfprintf_r+0xe2>
 8006844:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006848:	2100      	movs	r1, #0
 800684a:	f813 5b01 	ldrb.w	r5, [r3], #1
 800684e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006852:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8006856:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800685a:	2809      	cmp	r0, #9
 800685c:	d9f5      	bls.n	800684a <_vfprintf_r+0x6b2>
 800685e:	9106      	str	r1, [sp, #24]
 8006860:	e50c      	b.n	800627c <_vfprintf_r+0xe4>
 8006862:	9908      	ldr	r1, [sp, #32]
 8006864:	9304      	str	r3, [sp, #16]
 8006866:	2330      	movs	r3, #48	; 0x30
 8006868:	9a02      	ldr	r2, [sp, #8]
 800686a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800686e:	460b      	mov	r3, r1
 8006870:	3304      	adds	r3, #4
 8006872:	2578      	movs	r5, #120	; 0x78
 8006874:	f042 0202 	orr.w	r2, r2, #2
 8006878:	9308      	str	r3, [sp, #32]
 800687a:	4b7d      	ldr	r3, [pc, #500]	; (8006a70 <_vfprintf_r+0x8d8>)
 800687c:	9310      	str	r3, [sp, #64]	; 0x40
 800687e:	46b2      	mov	sl, r6
 8006880:	9202      	str	r2, [sp, #8]
 8006882:	680e      	ldr	r6, [r1, #0]
 8006884:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8006888:	2700      	movs	r7, #0
 800688a:	2302      	movs	r3, #2
 800688c:	e5a8      	b.n	80063e0 <_vfprintf_r+0x248>
 800688e:	9902      	ldr	r1, [sp, #8]
 8006890:	f041 0101 	orr.w	r1, r1, #1
 8006894:	9102      	str	r1, [sp, #8]
 8006896:	781d      	ldrb	r5, [r3, #0]
 8006898:	4619      	mov	r1, r3
 800689a:	e4ee      	b.n	800627a <_vfprintf_r+0xe2>
 800689c:	9d08      	ldr	r5, [sp, #32]
 800689e:	6829      	ldr	r1, [r5, #0]
 80068a0:	9106      	str	r1, [sp, #24]
 80068a2:	4608      	mov	r0, r1
 80068a4:	2800      	cmp	r0, #0
 80068a6:	4629      	mov	r1, r5
 80068a8:	f101 0104 	add.w	r1, r1, #4
 80068ac:	f2c0 84ee 	blt.w	800728c <_vfprintf_r+0x10f4>
 80068b0:	9108      	str	r1, [sp, #32]
 80068b2:	781d      	ldrb	r5, [r3, #0]
 80068b4:	4619      	mov	r1, r3
 80068b6:	e4e0      	b.n	800627a <_vfprintf_r+0xe2>
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	9b02      	ldr	r3, [sp, #8]
 80068bc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80068c0:	0698      	lsls	r0, r3, #26
 80068c2:	46b2      	mov	sl, r6
 80068c4:	f53f af5e 	bmi.w	8006784 <_vfprintf_r+0x5ec>
 80068c8:	9b02      	ldr	r3, [sp, #8]
 80068ca:	06d9      	lsls	r1, r3, #27
 80068cc:	f100 829b 	bmi.w	8006e06 <_vfprintf_r+0xc6e>
 80068d0:	9b02      	ldr	r3, [sp, #8]
 80068d2:	065a      	lsls	r2, r3, #25
 80068d4:	f140 8297 	bpl.w	8006e06 <_vfprintf_r+0xc6e>
 80068d8:	9908      	ldr	r1, [sp, #32]
 80068da:	f9b1 6000 	ldrsh.w	r6, [r1]
 80068de:	3104      	adds	r1, #4
 80068e0:	17f7      	asrs	r7, r6, #31
 80068e2:	4632      	mov	r2, r6
 80068e4:	463b      	mov	r3, r7
 80068e6:	9108      	str	r1, [sp, #32]
 80068e8:	e757      	b.n	800679a <_vfprintf_r+0x602>
 80068ea:	9902      	ldr	r1, [sp, #8]
 80068ec:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80068f0:	9102      	str	r1, [sp, #8]
 80068f2:	781d      	ldrb	r5, [r3, #0]
 80068f4:	4619      	mov	r1, r3
 80068f6:	e4c0      	b.n	800627a <_vfprintf_r+0xe2>
 80068f8:	781d      	ldrb	r5, [r3, #0]
 80068fa:	9902      	ldr	r1, [sp, #8]
 80068fc:	2d6c      	cmp	r5, #108	; 0x6c
 80068fe:	f000 84be 	beq.w	800727e <_vfprintf_r+0x10e6>
 8006902:	f041 0110 	orr.w	r1, r1, #16
 8006906:	9102      	str	r1, [sp, #8]
 8006908:	4619      	mov	r1, r3
 800690a:	e4b6      	b.n	800627a <_vfprintf_r+0xe2>
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	9b02      	ldr	r3, [sp, #8]
 8006910:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006914:	069a      	lsls	r2, r3, #26
 8006916:	f140 83fd 	bpl.w	8007114 <_vfprintf_r+0xf7c>
 800691a:	9a08      	ldr	r2, [sp, #32]
 800691c:	9905      	ldr	r1, [sp, #20]
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	17cf      	asrs	r7, r1, #31
 8006922:	4608      	mov	r0, r1
 8006924:	3204      	adds	r2, #4
 8006926:	4639      	mov	r1, r7
 8006928:	9208      	str	r2, [sp, #32]
 800692a:	e9c3 0100 	strd	r0, r1, [r3]
 800692e:	e474      	b.n	800621a <_vfprintf_r+0x82>
 8006930:	781d      	ldrb	r5, [r3, #0]
 8006932:	2d2a      	cmp	r5, #42	; 0x2a
 8006934:	f103 0101 	add.w	r1, r3, #1
 8006938:	f000 862a 	beq.w	8007590 <_vfprintf_r+0x13f8>
 800693c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006940:	2809      	cmp	r0, #9
 8006942:	460b      	mov	r3, r1
 8006944:	f04f 0600 	mov.w	r6, #0
 8006948:	f63f ac98 	bhi.w	800627c <_vfprintf_r+0xe4>
 800694c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006950:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8006954:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8006958:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800695c:	2809      	cmp	r0, #9
 800695e:	d9f5      	bls.n	800694c <_vfprintf_r+0x7b4>
 8006960:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8006964:	e48a      	b.n	800627c <_vfprintf_r+0xe4>
 8006966:	9304      	str	r3, [sp, #16]
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	f043 0310 	orr.w	r3, r3, #16
 800696e:	9302      	str	r3, [sp, #8]
 8006970:	9b02      	ldr	r3, [sp, #8]
 8006972:	f013 0320 	ands.w	r3, r3, #32
 8006976:	46b2      	mov	sl, r6
 8006978:	f47f ae8d 	bne.w	8006696 <_vfprintf_r+0x4fe>
 800697c:	9a02      	ldr	r2, [sp, #8]
 800697e:	f012 0210 	ands.w	r2, r2, #16
 8006982:	f040 8238 	bne.w	8006df6 <_vfprintf_r+0xc5e>
 8006986:	9b02      	ldr	r3, [sp, #8]
 8006988:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800698c:	f000 8233 	beq.w	8006df6 <_vfprintf_r+0xc5e>
 8006990:	9908      	ldr	r1, [sp, #32]
 8006992:	4613      	mov	r3, r2
 8006994:	460a      	mov	r2, r1
 8006996:	3204      	adds	r2, #4
 8006998:	880e      	ldrh	r6, [r1, #0]
 800699a:	9208      	str	r2, [sp, #32]
 800699c:	2700      	movs	r7, #0
 800699e:	e51f      	b.n	80063e0 <_vfprintf_r+0x248>
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	4b34      	ldr	r3, [pc, #208]	; (8006a74 <_vfprintf_r+0x8dc>)
 80069a4:	9310      	str	r3, [sp, #64]	; 0x40
 80069a6:	9b02      	ldr	r3, [sp, #8]
 80069a8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80069ac:	0699      	lsls	r1, r3, #26
 80069ae:	46b2      	mov	sl, r6
 80069b0:	f53f aeab 	bmi.w	800670a <_vfprintf_r+0x572>
 80069b4:	9b02      	ldr	r3, [sp, #8]
 80069b6:	06da      	lsls	r2, r3, #27
 80069b8:	f140 83d1 	bpl.w	800715e <_vfprintf_r+0xfc6>
 80069bc:	9a08      	ldr	r2, [sp, #32]
 80069be:	4613      	mov	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	6816      	ldr	r6, [r2, #0]
 80069c4:	9308      	str	r3, [sp, #32]
 80069c6:	2700      	movs	r7, #0
 80069c8:	e6a8      	b.n	800671c <_vfprintf_r+0x584>
 80069ca:	9908      	ldr	r1, [sp, #32]
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	680a      	ldr	r2, [r1, #0]
 80069d0:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80069d4:	2300      	movs	r3, #0
 80069d6:	2201      	movs	r2, #1
 80069d8:	3104      	adds	r1, #4
 80069da:	469c      	mov	ip, r3
 80069dc:	9203      	str	r2, [sp, #12]
 80069de:	9108      	str	r1, [sp, #32]
 80069e0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80069e4:	ab22      	add	r3, sp, #136	; 0x88
 80069e6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80069ea:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80069ee:	9207      	str	r2, [sp, #28]
 80069f0:	930a      	str	r3, [sp, #40]	; 0x28
 80069f2:	e535      	b.n	8006460 <_vfprintf_r+0x2c8>
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	9b02      	ldr	r3, [sp, #8]
 80069f8:	f043 0310 	orr.w	r3, r3, #16
 80069fc:	9302      	str	r3, [sp, #8]
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	46b2      	mov	sl, r6
 8006a02:	069e      	lsls	r6, r3, #26
 8006a04:	f53f ace2 	bmi.w	80063cc <_vfprintf_r+0x234>
 8006a08:	9b02      	ldr	r3, [sp, #8]
 8006a0a:	06d8      	lsls	r0, r3, #27
 8006a0c:	f140 8399 	bpl.w	8007142 <_vfprintf_r+0xfaa>
 8006a10:	9a08      	ldr	r2, [sp, #32]
 8006a12:	4613      	mov	r3, r2
 8006a14:	3204      	adds	r2, #4
 8006a16:	681e      	ldr	r6, [r3, #0]
 8006a18:	9208      	str	r2, [sp, #32]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	2700      	movs	r7, #0
 8006a1e:	e4df      	b.n	80063e0 <_vfprintf_r+0x248>
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	f43f acaf 	beq.w	800638a <_vfprintf_r+0x1f2>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2201      	movs	r2, #1
 8006a30:	469c      	mov	ip, r3
 8006a32:	9203      	str	r2, [sp, #12]
 8006a34:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 8006a38:	e7d2      	b.n	80069e0 <_vfprintf_r+0x848>
 8006a3a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006a3e:	e55b      	b.n	80064f8 <_vfprintf_r+0x360>
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f47f ace5 	bne.w	8006410 <_vfprintf_r+0x278>
 8006a46:	2f00      	cmp	r7, #0
 8006a48:	bf08      	it	eq
 8006a4a:	2e0a      	cmpeq	r6, #10
 8006a4c:	f080 81ff 	bcs.w	8006e4e <_vfprintf_r+0xcb6>
 8006a50:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8006a54:	3630      	adds	r6, #48	; 0x30
 8006a56:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 8006a5a:	ab2c      	add	r3, sp, #176	; 0xb0
 8006a5c:	ebcb 0303 	rsb	r3, fp, r3
 8006a60:	9307      	str	r3, [sp, #28]
 8006a62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006a66:	e4ed      	b.n	8006444 <_vfprintf_r+0x2ac>
 8006a68:	0801acfc 	.word	0x0801acfc
 8006a6c:	0801acf8 	.word	0x0801acf8
 8006a70:	0801ad1c 	.word	0x0801ad1c
 8006a74:	0801ad08 	.word	0x0801ad08
 8006a78:	2d65      	cmp	r5, #101	; 0x65
 8006a7a:	f340 808a 	ble.w	8006b92 <_vfprintf_r+0x9fa>
 8006a7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a82:	2200      	movs	r2, #0
 8006a84:	2300      	movs	r3, #0
 8006a86:	f7fa f867 	bl	8000b58 <__aeabi_dcmpeq>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f000 8131 	beq.w	8006cf2 <_vfprintf_r+0xb5a>
 8006a90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a92:	4aae      	ldr	r2, [pc, #696]	; (8006d4c <_vfprintf_r+0xbb4>)
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	f10b 0b01 	add.w	fp, fp, #1
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	2b07      	cmp	r3, #7
 8006aa0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006aa4:	9320      	str	r3, [sp, #128]	; 0x80
 8006aa6:	6062      	str	r2, [r4, #4]
 8006aa8:	f300 8372 	bgt.w	8007190 <_vfprintf_r+0xff8>
 8006aac:	3408      	adds	r4, #8
 8006aae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ab0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	db03      	blt.n	8006abe <_vfprintf_r+0x926>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	07df      	lsls	r7, r3, #31
 8006aba:	f57f ad90 	bpl.w	80065de <_vfprintf_r+0x446>
 8006abe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ac0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006ac2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ac4:	6022      	str	r2, [r4, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	448b      	add	fp, r1
 8006aca:	2b07      	cmp	r3, #7
 8006acc:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006ad0:	6061      	str	r1, [r4, #4]
 8006ad2:	9320      	str	r3, [sp, #128]	; 0x80
 8006ad4:	f300 83e1 	bgt.w	800729a <_vfprintf_r+0x1102>
 8006ad8:	3408      	adds	r4, #8
 8006ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006adc:	1e5d      	subs	r5, r3, #1
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	f77f ad7d 	ble.w	80065de <_vfprintf_r+0x446>
 8006ae4:	2d10      	cmp	r5, #16
 8006ae6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ae8:	4f99      	ldr	r7, [pc, #612]	; (8006d50 <_vfprintf_r+0xbb8>)
 8006aea:	f340 8196 	ble.w	8006e1a <_vfprintf_r+0xc82>
 8006aee:	2610      	movs	r6, #16
 8006af0:	465a      	mov	r2, fp
 8006af2:	e004      	b.n	8006afe <_vfprintf_r+0x966>
 8006af4:	3408      	adds	r4, #8
 8006af6:	3d10      	subs	r5, #16
 8006af8:	2d10      	cmp	r5, #16
 8006afa:	f340 818d 	ble.w	8006e18 <_vfprintf_r+0xc80>
 8006afe:	3301      	adds	r3, #1
 8006b00:	3210      	adds	r2, #16
 8006b02:	2b07      	cmp	r3, #7
 8006b04:	9221      	str	r2, [sp, #132]	; 0x84
 8006b06:	9320      	str	r3, [sp, #128]	; 0x80
 8006b08:	6027      	str	r7, [r4, #0]
 8006b0a:	6066      	str	r6, [r4, #4]
 8006b0c:	ddf2      	ble.n	8006af4 <_vfprintf_r+0x95c>
 8006b0e:	4640      	mov	r0, r8
 8006b10:	4649      	mov	r1, r9
 8006b12:	aa1f      	add	r2, sp, #124	; 0x7c
 8006b14:	f003 fbb2 	bl	800a27c <__sprint_r>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	f47f ac3d 	bne.w	8006398 <_vfprintf_r+0x200>
 8006b1e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b22:	ac2c      	add	r4, sp, #176	; 0xb0
 8006b24:	e7e7      	b.n	8006af6 <_vfprintf_r+0x95e>
 8006b26:	9b06      	ldr	r3, [sp, #24]
 8006b28:	9a03      	ldr	r2, [sp, #12]
 8006b2a:	1a9e      	subs	r6, r3, r2
 8006b2c:	2e00      	cmp	r6, #0
 8006b2e:	f77f ad0a 	ble.w	8006546 <_vfprintf_r+0x3ae>
 8006b32:	2e10      	cmp	r6, #16
 8006b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b36:	4f86      	ldr	r7, [pc, #536]	; (8006d50 <_vfprintf_r+0xbb8>)
 8006b38:	dd1f      	ble.n	8006b7a <_vfprintf_r+0x9e2>
 8006b3a:	f04f 0a10 	mov.w	sl, #16
 8006b3e:	465b      	mov	r3, fp
 8006b40:	e004      	b.n	8006b4c <_vfprintf_r+0x9b4>
 8006b42:	3e10      	subs	r6, #16
 8006b44:	2e10      	cmp	r6, #16
 8006b46:	f104 0408 	add.w	r4, r4, #8
 8006b4a:	dd15      	ble.n	8006b78 <_vfprintf_r+0x9e0>
 8006b4c:	3201      	adds	r2, #1
 8006b4e:	3310      	adds	r3, #16
 8006b50:	2a07      	cmp	r2, #7
 8006b52:	9321      	str	r3, [sp, #132]	; 0x84
 8006b54:	9220      	str	r2, [sp, #128]	; 0x80
 8006b56:	e884 0480 	stmia.w	r4, {r7, sl}
 8006b5a:	ddf2      	ble.n	8006b42 <_vfprintf_r+0x9aa>
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	4649      	mov	r1, r9
 8006b60:	aa1f      	add	r2, sp, #124	; 0x7c
 8006b62:	f003 fb8b 	bl	800a27c <__sprint_r>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f47f ac16 	bne.w	8006398 <_vfprintf_r+0x200>
 8006b6c:	3e10      	subs	r6, #16
 8006b6e:	2e10      	cmp	r6, #16
 8006b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b72:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b74:	ac2c      	add	r4, sp, #176	; 0xb0
 8006b76:	dce9      	bgt.n	8006b4c <_vfprintf_r+0x9b4>
 8006b78:	469b      	mov	fp, r3
 8006b7a:	3201      	adds	r2, #1
 8006b7c:	44b3      	add	fp, r6
 8006b7e:	2a07      	cmp	r2, #7
 8006b80:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006b84:	9220      	str	r2, [sp, #128]	; 0x80
 8006b86:	6027      	str	r7, [r4, #0]
 8006b88:	6066      	str	r6, [r4, #4]
 8006b8a:	f300 821a 	bgt.w	8006fc2 <_vfprintf_r+0xe2a>
 8006b8e:	3408      	adds	r4, #8
 8006b90:	e4d9      	b.n	8006546 <_vfprintf_r+0x3ae>
 8006b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b94:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	f340 81d5 	ble.w	8006f46 <_vfprintf_r+0xdae>
 8006b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	f10b 0601 	add.w	r6, fp, #1
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	2d07      	cmp	r5, #7
 8006baa:	9621      	str	r6, [sp, #132]	; 0x84
 8006bac:	9520      	str	r5, [sp, #128]	; 0x80
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	f300 81e5 	bgt.w	8006f7e <_vfprintf_r+0xde6>
 8006bb4:	3408      	adds	r4, #8
 8006bb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	4416      	add	r6, r2
 8006bc0:	2d07      	cmp	r5, #7
 8006bc2:	9621      	str	r6, [sp, #132]	; 0x84
 8006bc4:	9520      	str	r5, [sp, #128]	; 0x80
 8006bc6:	6062      	str	r2, [r4, #4]
 8006bc8:	f300 81ef 	bgt.w	8006faa <_vfprintf_r+0xe12>
 8006bcc:	3408      	adds	r4, #8
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f7f9 ffbf 	bl	8000b58 <__aeabi_dcmpeq>
 8006bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f040 80e1 	bne.w	8006da4 <_vfprintf_r+0xc0c>
 8006be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006be4:	3b01      	subs	r3, #1
 8006be6:	3501      	adds	r5, #1
 8006be8:	3201      	adds	r2, #1
 8006bea:	441e      	add	r6, r3
 8006bec:	2d07      	cmp	r5, #7
 8006bee:	9520      	str	r5, [sp, #128]	; 0x80
 8006bf0:	9621      	str	r6, [sp, #132]	; 0x84
 8006bf2:	6022      	str	r2, [r4, #0]
 8006bf4:	6063      	str	r3, [r4, #4]
 8006bf6:	f300 81b6 	bgt.w	8006f66 <_vfprintf_r+0xdce>
 8006bfa:	3408      	adds	r4, #8
 8006bfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bfe:	6062      	str	r2, [r4, #4]
 8006c00:	3501      	adds	r5, #1
 8006c02:	eb06 0b02 	add.w	fp, r6, r2
 8006c06:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c08:	2d07      	cmp	r5, #7
 8006c0a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006c0e:	9520      	str	r5, [sp, #128]	; 0x80
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	f77f ace3 	ble.w	80065dc <_vfprintf_r+0x444>
 8006c16:	4640      	mov	r0, r8
 8006c18:	4649      	mov	r1, r9
 8006c1a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c1c:	f003 fb2e 	bl	800a27c <__sprint_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f47f abb9 	bne.w	8006398 <_vfprintf_r+0x200>
 8006c26:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006c2a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006c2c:	e4d7      	b.n	80065de <_vfprintf_r+0x446>
 8006c2e:	4640      	mov	r0, r8
 8006c30:	4649      	mov	r1, r9
 8006c32:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c34:	f003 fb22 	bl	800a27c <__sprint_r>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	f43f ad1a 	beq.w	8006672 <_vfprintf_r+0x4da>
 8006c3e:	f7ff bbab 	b.w	8006398 <_vfprintf_r+0x200>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d133      	bne.n	8006cae <_vfprintf_r+0xb16>
 8006c46:	9b02      	ldr	r3, [sp, #8]
 8006c48:	07da      	lsls	r2, r3, #31
 8006c4a:	d530      	bpl.n	8006cae <_vfprintf_r+0xb16>
 8006c4c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8006c50:	2330      	movs	r3, #48	; 0x30
 8006c52:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8006c56:	ab2c      	add	r3, sp, #176	; 0xb0
 8006c58:	ebcb 0303 	rsb	r3, fp, r3
 8006c5c:	9307      	str	r3, [sp, #28]
 8006c5e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006c62:	f7ff bbef 	b.w	8006444 <_vfprintf_r+0x2ac>
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c6c:	f003 fb06 	bl	800a27c <__sprint_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f47f ab91 	bne.w	8006398 <_vfprintf_r+0x200>
 8006c76:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006c7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006c7c:	e49d      	b.n	80065ba <_vfprintf_r+0x422>
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4649      	mov	r1, r9
 8006c82:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c84:	f003 fafa 	bl	800a27c <__sprint_r>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f47f ab85 	bne.w	8006398 <_vfprintf_r+0x200>
 8006c8e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006c92:	ac2c      	add	r4, sp, #176	; 0xb0
 8006c94:	e443      	b.n	800651e <_vfprintf_r+0x386>
 8006c96:	4640      	mov	r0, r8
 8006c98:	4649      	mov	r1, r9
 8006c9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c9c:	f003 faee 	bl	800a27c <__sprint_r>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	f47f ab79 	bne.w	8006398 <_vfprintf_r+0x200>
 8006ca6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006caa:	ac2c      	add	r4, sp, #176	; 0xb0
 8006cac:	e448      	b.n	8006540 <_vfprintf_r+0x3a8>
 8006cae:	ab2c      	add	r3, sp, #176	; 0xb0
 8006cb0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb6:	f7ff bbc5 	b.w	8006444 <_vfprintf_r+0x2ac>
 8006cba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006cbc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8006cc0:	0933      	lsrs	r3, r6, #4
 8006cc2:	f006 010f 	and.w	r1, r6, #15
 8006cc6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006cca:	093a      	lsrs	r2, r7, #4
 8006ccc:	461e      	mov	r6, r3
 8006cce:	4617      	mov	r7, r2
 8006cd0:	5c43      	ldrb	r3, [r0, r1]
 8006cd2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006cd6:	ea56 0307 	orrs.w	r3, r6, r7
 8006cda:	d1f1      	bne.n	8006cc0 <_vfprintf_r+0xb28>
 8006cdc:	465a      	mov	r2, fp
 8006cde:	ab2c      	add	r3, sp, #176	; 0xb0
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006ce6:	9307      	str	r3, [sp, #28]
 8006ce8:	f7ff bbac 	b.w	8006444 <_vfprintf_r+0x2ac>
 8006cec:	2302      	movs	r3, #2
 8006cee:	f7ff bb77 	b.w	80063e0 <_vfprintf_r+0x248>
 8006cf2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	f340 8257 	ble.w	80071a8 <_vfprintf_r+0x1010>
 8006cfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cfe:	428a      	cmp	r2, r1
 8006d00:	4613      	mov	r3, r2
 8006d02:	bfa8      	it	ge
 8006d04:	460b      	movge	r3, r1
 8006d06:	461d      	mov	r5, r3
 8006d08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	eb01 0a02 	add.w	sl, r1, r2
 8006d10:	dd0b      	ble.n	8006d2a <_vfprintf_r+0xb92>
 8006d12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d14:	6021      	str	r1, [r4, #0]
 8006d16:	3301      	adds	r3, #1
 8006d18:	44ab      	add	fp, r5
 8006d1a:	2b07      	cmp	r3, #7
 8006d1c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006d20:	6065      	str	r5, [r4, #4]
 8006d22:	9320      	str	r3, [sp, #128]	; 0x80
 8006d24:	f300 8309 	bgt.w	800733a <_vfprintf_r+0x11a2>
 8006d28:	3408      	adds	r4, #8
 8006d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d2c:	2d00      	cmp	r5, #0
 8006d2e:	bfa8      	it	ge
 8006d30:	1b5b      	subge	r3, r3, r5
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	461d      	mov	r5, r3
 8006d36:	f340 80b0 	ble.w	8006e9a <_vfprintf_r+0xd02>
 8006d3a:	2d10      	cmp	r5, #16
 8006d3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d3e:	4f04      	ldr	r7, [pc, #16]	; (8006d50 <_vfprintf_r+0xbb8>)
 8006d40:	f340 821a 	ble.w	8007178 <_vfprintf_r+0xfe0>
 8006d44:	2610      	movs	r6, #16
 8006d46:	465a      	mov	r2, fp
 8006d48:	e009      	b.n	8006d5e <_vfprintf_r+0xbc6>
 8006d4a:	bf00      	nop
 8006d4c:	0801ad38 	.word	0x0801ad38
 8006d50:	0801ace8 	.word	0x0801ace8
 8006d54:	3408      	adds	r4, #8
 8006d56:	3d10      	subs	r5, #16
 8006d58:	2d10      	cmp	r5, #16
 8006d5a:	f340 820c 	ble.w	8007176 <_vfprintf_r+0xfde>
 8006d5e:	3301      	adds	r3, #1
 8006d60:	3210      	adds	r2, #16
 8006d62:	2b07      	cmp	r3, #7
 8006d64:	9221      	str	r2, [sp, #132]	; 0x84
 8006d66:	9320      	str	r3, [sp, #128]	; 0x80
 8006d68:	6027      	str	r7, [r4, #0]
 8006d6a:	6066      	str	r6, [r4, #4]
 8006d6c:	ddf2      	ble.n	8006d54 <_vfprintf_r+0xbbc>
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d74:	f003 fa82 	bl	800a27c <__sprint_r>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f47f ab0d 	bne.w	8006398 <_vfprintf_r+0x200>
 8006d7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d82:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d84:	e7e7      	b.n	8006d56 <_vfprintf_r+0xbbe>
 8006d86:	4640      	mov	r0, r8
 8006d88:	4649      	mov	r1, r9
 8006d8a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d8c:	f003 fa76 	bl	800a27c <__sprint_r>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	f47f ab01 	bne.w	8006398 <_vfprintf_r+0x200>
 8006d96:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8006d9a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006d9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006da0:	f7ff bbaa 	b.w	80064f8 <_vfprintf_r+0x360>
 8006da4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006da8:	f1ba 0f00 	cmp.w	sl, #0
 8006dac:	f77f af26 	ble.w	8006bfc <_vfprintf_r+0xa64>
 8006db0:	f1ba 0f10 	cmp.w	sl, #16
 8006db4:	4f8f      	ldr	r7, [pc, #572]	; (8006ff4 <_vfprintf_r+0xe5c>)
 8006db6:	bfc8      	it	gt
 8006db8:	f04f 0b10 	movgt.w	fp, #16
 8006dbc:	dc07      	bgt.n	8006dce <_vfprintf_r+0xc36>
 8006dbe:	e0ea      	b.n	8006f96 <_vfprintf_r+0xdfe>
 8006dc0:	3408      	adds	r4, #8
 8006dc2:	f1aa 0a10 	sub.w	sl, sl, #16
 8006dc6:	f1ba 0f10 	cmp.w	sl, #16
 8006dca:	f340 80e4 	ble.w	8006f96 <_vfprintf_r+0xdfe>
 8006dce:	3501      	adds	r5, #1
 8006dd0:	3610      	adds	r6, #16
 8006dd2:	2d07      	cmp	r5, #7
 8006dd4:	9621      	str	r6, [sp, #132]	; 0x84
 8006dd6:	9520      	str	r5, [sp, #128]	; 0x80
 8006dd8:	e884 0880 	stmia.w	r4, {r7, fp}
 8006ddc:	ddf0      	ble.n	8006dc0 <_vfprintf_r+0xc28>
 8006dde:	4640      	mov	r0, r8
 8006de0:	4649      	mov	r1, r9
 8006de2:	aa1f      	add	r2, sp, #124	; 0x7c
 8006de4:	f003 fa4a 	bl	800a27c <__sprint_r>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f47f aad5 	bne.w	8006398 <_vfprintf_r+0x200>
 8006dee:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006df0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006df2:	ac2c      	add	r4, sp, #176	; 0xb0
 8006df4:	e7e5      	b.n	8006dc2 <_vfprintf_r+0xc2a>
 8006df6:	9908      	ldr	r1, [sp, #32]
 8006df8:	460a      	mov	r2, r1
 8006dfa:	3204      	adds	r2, #4
 8006dfc:	680e      	ldr	r6, [r1, #0]
 8006dfe:	9208      	str	r2, [sp, #32]
 8006e00:	2700      	movs	r7, #0
 8006e02:	f7ff baed 	b.w	80063e0 <_vfprintf_r+0x248>
 8006e06:	9a08      	ldr	r2, [sp, #32]
 8006e08:	6816      	ldr	r6, [r2, #0]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	17f7      	asrs	r7, r6, #31
 8006e10:	9308      	str	r3, [sp, #32]
 8006e12:	4632      	mov	r2, r6
 8006e14:	463b      	mov	r3, r7
 8006e16:	e4c0      	b.n	800679a <_vfprintf_r+0x602>
 8006e18:	4693      	mov	fp, r2
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	44ab      	add	fp, r5
 8006e1e:	2b07      	cmp	r3, #7
 8006e20:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006e24:	9320      	str	r3, [sp, #128]	; 0x80
 8006e26:	6027      	str	r7, [r4, #0]
 8006e28:	6065      	str	r5, [r4, #4]
 8006e2a:	f77f abd7 	ble.w	80065dc <_vfprintf_r+0x444>
 8006e2e:	e6f2      	b.n	8006c16 <_vfprintf_r+0xa7e>
 8006e30:	2b30      	cmp	r3, #48	; 0x30
 8006e32:	f000 823e 	beq.w	80072b2 <_vfprintf_r+0x111a>
 8006e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	a82c      	add	r0, sp, #176	; 0xb0
 8006e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e40:	1a82      	subs	r2, r0, r2
 8006e42:	2330      	movs	r3, #48	; 0x30
 8006e44:	9207      	str	r2, [sp, #28]
 8006e46:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006e4a:	f7ff bafb 	b.w	8006444 <_vfprintf_r+0x2ac>
 8006e4e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8006e52:	f8cd c00c 	str.w	ip, [sp, #12]
 8006e56:	4630      	mov	r0, r6
 8006e58:	4639      	mov	r1, r7
 8006e5a:	220a      	movs	r2, #10
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f7f9 fed5 	bl	8000c0c <__aeabi_uldivmod>
 8006e62:	3230      	adds	r2, #48	; 0x30
 8006e64:	4630      	mov	r0, r6
 8006e66:	4639      	mov	r1, r7
 8006e68:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	220a      	movs	r2, #10
 8006e70:	f7f9 fecc 	bl	8000c0c <__aeabi_uldivmod>
 8006e74:	4606      	mov	r6, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	ea56 0307 	orrs.w	r3, r6, r7
 8006e7c:	d1eb      	bne.n	8006e56 <_vfprintf_r+0xcbe>
 8006e7e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006e82:	e72b      	b.n	8006cdc <_vfprintf_r+0xb44>
 8006e84:	4640      	mov	r0, r8
 8006e86:	4649      	mov	r1, r9
 8006e88:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e8a:	f003 f9f7 	bl	800a27c <__sprint_r>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	f47f aa82 	bne.w	8006398 <_vfprintf_r+0x200>
 8006e94:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006e98:	ac2c      	add	r4, sp, #176	; 0xb0
 8006e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ea0:	440a      	add	r2, r1
 8006ea2:	4616      	mov	r6, r2
 8006ea4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	db3e      	blt.n	8006f28 <_vfprintf_r+0xd90>
 8006eaa:	9a02      	ldr	r2, [sp, #8]
 8006eac:	07d5      	lsls	r5, r2, #31
 8006eae:	d43b      	bmi.n	8006f28 <_vfprintf_r+0xd90>
 8006eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eb2:	ebc6 050a 	rsb	r5, r6, sl
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	429d      	cmp	r5, r3
 8006eba:	bfa8      	it	ge
 8006ebc:	461d      	movge	r5, r3
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	462f      	mov	r7, r5
 8006ec2:	dd0b      	ble.n	8006edc <_vfprintf_r+0xd44>
 8006ec4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ec6:	6026      	str	r6, [r4, #0]
 8006ec8:	3201      	adds	r2, #1
 8006eca:	44ab      	add	fp, r5
 8006ecc:	2a07      	cmp	r2, #7
 8006ece:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006ed2:	6065      	str	r5, [r4, #4]
 8006ed4:	9220      	str	r2, [sp, #128]	; 0x80
 8006ed6:	f300 8266 	bgt.w	80073a6 <_vfprintf_r+0x120e>
 8006eda:	3408      	adds	r4, #8
 8006edc:	2f00      	cmp	r7, #0
 8006ede:	bfac      	ite	ge
 8006ee0:	1bdd      	subge	r5, r3, r7
 8006ee2:	461d      	movlt	r5, r3
 8006ee4:	2d00      	cmp	r5, #0
 8006ee6:	f77f ab7a 	ble.w	80065de <_vfprintf_r+0x446>
 8006eea:	2d10      	cmp	r5, #16
 8006eec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006eee:	4f41      	ldr	r7, [pc, #260]	; (8006ff4 <_vfprintf_r+0xe5c>)
 8006ef0:	dd93      	ble.n	8006e1a <_vfprintf_r+0xc82>
 8006ef2:	2610      	movs	r6, #16
 8006ef4:	465a      	mov	r2, fp
 8006ef6:	e003      	b.n	8006f00 <_vfprintf_r+0xd68>
 8006ef8:	3408      	adds	r4, #8
 8006efa:	3d10      	subs	r5, #16
 8006efc:	2d10      	cmp	r5, #16
 8006efe:	dd8b      	ble.n	8006e18 <_vfprintf_r+0xc80>
 8006f00:	3301      	adds	r3, #1
 8006f02:	3210      	adds	r2, #16
 8006f04:	2b07      	cmp	r3, #7
 8006f06:	9221      	str	r2, [sp, #132]	; 0x84
 8006f08:	9320      	str	r3, [sp, #128]	; 0x80
 8006f0a:	6027      	str	r7, [r4, #0]
 8006f0c:	6066      	str	r6, [r4, #4]
 8006f0e:	ddf3      	ble.n	8006ef8 <_vfprintf_r+0xd60>
 8006f10:	4640      	mov	r0, r8
 8006f12:	4649      	mov	r1, r9
 8006f14:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f16:	f003 f9b1 	bl	800a27c <__sprint_r>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f47f aa3c 	bne.w	8006398 <_vfprintf_r+0x200>
 8006f20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f24:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f26:	e7e8      	b.n	8006efa <_vfprintf_r+0xd62>
 8006f28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f2e:	6021      	str	r1, [r4, #0]
 8006f30:	3201      	adds	r2, #1
 8006f32:	4483      	add	fp, r0
 8006f34:	2a07      	cmp	r2, #7
 8006f36:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006f3a:	6060      	str	r0, [r4, #4]
 8006f3c:	9220      	str	r2, [sp, #128]	; 0x80
 8006f3e:	f300 8208 	bgt.w	8007352 <_vfprintf_r+0x11ba>
 8006f42:	3408      	adds	r4, #8
 8006f44:	e7b4      	b.n	8006eb0 <_vfprintf_r+0xd18>
 8006f46:	9b02      	ldr	r3, [sp, #8]
 8006f48:	07d8      	lsls	r0, r3, #31
 8006f4a:	f53f ae27 	bmi.w	8006b9c <_vfprintf_r+0xa04>
 8006f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	3501      	adds	r5, #1
 8006f54:	f10b 0601 	add.w	r6, fp, #1
 8006f58:	2301      	movs	r3, #1
 8006f5a:	2d07      	cmp	r5, #7
 8006f5c:	9621      	str	r6, [sp, #132]	; 0x84
 8006f5e:	9520      	str	r5, [sp, #128]	; 0x80
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	f77f ae4a 	ble.w	8006bfa <_vfprintf_r+0xa62>
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f6c:	f003 f986 	bl	800a27c <__sprint_r>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f47f aa11 	bne.w	8006398 <_vfprintf_r+0x200>
 8006f76:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006f78:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006f7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f7c:	e63e      	b.n	8006bfc <_vfprintf_r+0xa64>
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f84:	f003 f97a 	bl	800a27c <__sprint_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	f47f aa05 	bne.w	8006398 <_vfprintf_r+0x200>
 8006f8e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006f90:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006f92:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f94:	e60f      	b.n	8006bb6 <_vfprintf_r+0xa1e>
 8006f96:	3501      	adds	r5, #1
 8006f98:	4456      	add	r6, sl
 8006f9a:	2d07      	cmp	r5, #7
 8006f9c:	9621      	str	r6, [sp, #132]	; 0x84
 8006f9e:	9520      	str	r5, [sp, #128]	; 0x80
 8006fa0:	e884 0480 	stmia.w	r4, {r7, sl}
 8006fa4:	f77f ae29 	ble.w	8006bfa <_vfprintf_r+0xa62>
 8006fa8:	e7dd      	b.n	8006f66 <_vfprintf_r+0xdce>
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fb0:	f003 f964 	bl	800a27c <__sprint_r>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f47f a9ef 	bne.w	8006398 <_vfprintf_r+0x200>
 8006fba:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006fbc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006fbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8006fc0:	e605      	b.n	8006bce <_vfprintf_r+0xa36>
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fc8:	f003 f958 	bl	800a27c <__sprint_r>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	f47f a9e3 	bne.w	8006398 <_vfprintf_r+0x200>
 8006fd2:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006fd6:	ac2c      	add	r4, sp, #176	; 0xb0
 8006fd8:	f7ff bab5 	b.w	8006546 <_vfprintf_r+0x3ae>
 8006fdc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8006fe0:	4276      	negs	r6, r6
 8006fe2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006fe6:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8006fea:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f7ff b9fc 	b.w	80063ec <_vfprintf_r+0x254>
 8006ff4:	0801ace8 	.word	0x0801ace8
 8006ff8:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8006ffc:	f003 f892 	bl	800a124 <__fpclassifyd>
 8007000:	2800      	cmp	r0, #0
 8007002:	f000 8116 	beq.w	8007232 <_vfprintf_r+0x109a>
 8007006:	f025 0320 	bic.w	r3, r5, #32
 800700a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800700e:	9303      	str	r3, [sp, #12]
 8007010:	f000 8260 	beq.w	80074d4 <_vfprintf_r+0x133c>
 8007014:	2b47      	cmp	r3, #71	; 0x47
 8007016:	d105      	bne.n	8007024 <_vfprintf_r+0xe8c>
 8007018:	f1ba 0f00 	cmp.w	sl, #0
 800701c:	bf14      	ite	ne
 800701e:	46d3      	movne	fp, sl
 8007020:	f04f 0b01 	moveq.w	fp, #1
 8007024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007026:	9a02      	ldr	r2, [sp, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800702e:	9209      	str	r2, [sp, #36]	; 0x24
 8007030:	f2c0 8260 	blt.w	80074f4 <_vfprintf_r+0x135c>
 8007034:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8007038:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800703c:	f04f 0a00 	mov.w	sl, #0
 8007040:	2d66      	cmp	r5, #102	; 0x66
 8007042:	f000 815e 	beq.w	8007302 <_vfprintf_r+0x116a>
 8007046:	2d46      	cmp	r5, #70	; 0x46
 8007048:	f000 815b 	beq.w	8007302 <_vfprintf_r+0x116a>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	2b45      	cmp	r3, #69	; 0x45
 8007050:	bf0c      	ite	eq
 8007052:	f10b 0701 	addeq.w	r7, fp, #1
 8007056:	465f      	movne	r7, fp
 8007058:	aa1a      	add	r2, sp, #104	; 0x68
 800705a:	ab1d      	add	r3, sp, #116	; 0x74
 800705c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007060:	4640      	mov	r0, r8
 8007062:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007066:	2102      	movs	r1, #2
 8007068:	463a      	mov	r2, r7
 800706a:	ab19      	add	r3, sp, #100	; 0x64
 800706c:	f000 fbec 	bl	8007848 <_dtoa_r>
 8007070:	2d67      	cmp	r5, #103	; 0x67
 8007072:	900a      	str	r0, [sp, #40]	; 0x28
 8007074:	d002      	beq.n	800707c <_vfprintf_r+0xee4>
 8007076:	2d47      	cmp	r5, #71	; 0x47
 8007078:	f040 8151 	bne.w	800731e <_vfprintf_r+0x1186>
 800707c:	9b02      	ldr	r3, [sp, #8]
 800707e:	07db      	lsls	r3, r3, #31
 8007080:	f140 8241 	bpl.w	8007506 <_vfprintf_r+0x136e>
 8007084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007086:	19de      	adds	r6, r3, r7
 8007088:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800708c:	2200      	movs	r2, #0
 800708e:	2300      	movs	r3, #0
 8007090:	f7f9 fd62 	bl	8000b58 <__aeabi_dcmpeq>
 8007094:	2800      	cmp	r0, #0
 8007096:	f040 81ad 	bne.w	80073f4 <_vfprintf_r+0x125c>
 800709a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800709c:	429e      	cmp	r6, r3
 800709e:	d906      	bls.n	80070ae <_vfprintf_r+0xf16>
 80070a0:	2130      	movs	r1, #48	; 0x30
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	921d      	str	r2, [sp, #116]	; 0x74
 80070a6:	7019      	strb	r1, [r3, #0]
 80070a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070aa:	429e      	cmp	r6, r3
 80070ac:	d8f9      	bhi.n	80070a2 <_vfprintf_r+0xf0a>
 80070ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	930d      	str	r3, [sp, #52]	; 0x34
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	2b47      	cmp	r3, #71	; 0x47
 80070b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070ba:	f000 8183 	beq.w	80073c4 <_vfprintf_r+0x122c>
 80070be:	2d65      	cmp	r5, #101	; 0x65
 80070c0:	f340 81a6 	ble.w	8007410 <_vfprintf_r+0x1278>
 80070c4:	2d66      	cmp	r5, #102	; 0x66
 80070c6:	930c      	str	r3, [sp, #48]	; 0x30
 80070c8:	f000 821f 	beq.w	800750a <_vfprintf_r+0x1372>
 80070cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070d0:	4293      	cmp	r3, r2
 80070d2:	f300 8202 	bgt.w	80074da <_vfprintf_r+0x1342>
 80070d6:	9b02      	ldr	r3, [sp, #8]
 80070d8:	07d9      	lsls	r1, r3, #31
 80070da:	f100 8239 	bmi.w	8007550 <_vfprintf_r+0x13b8>
 80070de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80070e2:	9207      	str	r2, [sp, #28]
 80070e4:	f1ba 0f00 	cmp.w	sl, #0
 80070e8:	f040 8179 	bne.w	80073de <_vfprintf_r+0x1246>
 80070ec:	9303      	str	r3, [sp, #12]
 80070ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f0:	9302      	str	r3, [sp, #8]
 80070f2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80070f6:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80070fa:	f7ff b9ab 	b.w	8006454 <_vfprintf_r+0x2bc>
 80070fe:	f027 0707 	bic.w	r7, r7, #7
 8007102:	ed97 7b00 	vldr	d7, [r7]
 8007106:	f107 0308 	add.w	r3, r7, #8
 800710a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800710e:	9308      	str	r3, [sp, #32]
 8007110:	f7ff bb63 	b.w	80067da <_vfprintf_r+0x642>
 8007114:	9b02      	ldr	r3, [sp, #8]
 8007116:	06db      	lsls	r3, r3, #27
 8007118:	d40b      	bmi.n	8007132 <_vfprintf_r+0xf9a>
 800711a:	9b02      	ldr	r3, [sp, #8]
 800711c:	065f      	lsls	r7, r3, #25
 800711e:	d508      	bpl.n	8007132 <_vfprintf_r+0xf9a>
 8007120:	9a08      	ldr	r2, [sp, #32]
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	3204      	adds	r2, #4
 8007126:	9208      	str	r2, [sp, #32]
 8007128:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	f7ff b874 	b.w	800621a <_vfprintf_r+0x82>
 8007132:	9a08      	ldr	r2, [sp, #32]
 8007134:	6813      	ldr	r3, [r2, #0]
 8007136:	3204      	adds	r2, #4
 8007138:	9208      	str	r2, [sp, #32]
 800713a:	9a05      	ldr	r2, [sp, #20]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	f7ff b86c 	b.w	800621a <_vfprintf_r+0x82>
 8007142:	9b02      	ldr	r3, [sp, #8]
 8007144:	9a08      	ldr	r2, [sp, #32]
 8007146:	f013 0f40 	tst.w	r3, #64	; 0x40
 800714a:	4613      	mov	r3, r2
 800714c:	f43f ac62 	beq.w	8006a14 <_vfprintf_r+0x87c>
 8007150:	8816      	ldrh	r6, [r2, #0]
 8007152:	3204      	adds	r2, #4
 8007154:	2700      	movs	r7, #0
 8007156:	2301      	movs	r3, #1
 8007158:	9208      	str	r2, [sp, #32]
 800715a:	f7ff b941 	b.w	80063e0 <_vfprintf_r+0x248>
 800715e:	9b02      	ldr	r3, [sp, #8]
 8007160:	9a08      	ldr	r2, [sp, #32]
 8007162:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007166:	4613      	mov	r3, r2
 8007168:	d076      	beq.n	8007258 <_vfprintf_r+0x10c0>
 800716a:	3304      	adds	r3, #4
 800716c:	8816      	ldrh	r6, [r2, #0]
 800716e:	9308      	str	r3, [sp, #32]
 8007170:	2700      	movs	r7, #0
 8007172:	f7ff bad3 	b.w	800671c <_vfprintf_r+0x584>
 8007176:	4693      	mov	fp, r2
 8007178:	3301      	adds	r3, #1
 800717a:	44ab      	add	fp, r5
 800717c:	2b07      	cmp	r3, #7
 800717e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8007182:	9320      	str	r3, [sp, #128]	; 0x80
 8007184:	6027      	str	r7, [r4, #0]
 8007186:	6065      	str	r5, [r4, #4]
 8007188:	f73f ae7c 	bgt.w	8006e84 <_vfprintf_r+0xcec>
 800718c:	3408      	adds	r4, #8
 800718e:	e684      	b.n	8006e9a <_vfprintf_r+0xd02>
 8007190:	4640      	mov	r0, r8
 8007192:	4649      	mov	r1, r9
 8007194:	aa1f      	add	r2, sp, #124	; 0x7c
 8007196:	f003 f871 	bl	800a27c <__sprint_r>
 800719a:	2800      	cmp	r0, #0
 800719c:	f47f a8fc 	bne.w	8006398 <_vfprintf_r+0x200>
 80071a0:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80071a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80071a6:	e482      	b.n	8006aae <_vfprintf_r+0x916>
 80071a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071aa:	4ab0      	ldr	r2, [pc, #704]	; (800746c <_vfprintf_r+0x12d4>)
 80071ac:	6022      	str	r2, [r4, #0]
 80071ae:	3301      	adds	r3, #1
 80071b0:	f10b 0b01 	add.w	fp, fp, #1
 80071b4:	2201      	movs	r2, #1
 80071b6:	2b07      	cmp	r3, #7
 80071b8:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80071bc:	9320      	str	r3, [sp, #128]	; 0x80
 80071be:	6062      	str	r2, [r4, #4]
 80071c0:	dc50      	bgt.n	8007264 <_vfprintf_r+0x10cc>
 80071c2:	3408      	adds	r4, #8
 80071c4:	b92d      	cbnz	r5, 80071d2 <_vfprintf_r+0x103a>
 80071c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071c8:	b91b      	cbnz	r3, 80071d2 <_vfprintf_r+0x103a>
 80071ca:	9b02      	ldr	r3, [sp, #8]
 80071cc:	07de      	lsls	r6, r3, #31
 80071ce:	f57f aa06 	bpl.w	80065de <_vfprintf_r+0x446>
 80071d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80071d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80071d8:	6022      	str	r2, [r4, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	eb0b 0201 	add.w	r2, fp, r1
 80071e0:	2b07      	cmp	r3, #7
 80071e2:	9221      	str	r2, [sp, #132]	; 0x84
 80071e4:	6061      	str	r1, [r4, #4]
 80071e6:	9320      	str	r3, [sp, #128]	; 0x80
 80071e8:	f300 8167 	bgt.w	80074ba <_vfprintf_r+0x1322>
 80071ec:	3408      	adds	r4, #8
 80071ee:	426d      	negs	r5, r5
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	dd6f      	ble.n	80072d4 <_vfprintf_r+0x113c>
 80071f4:	2d10      	cmp	r5, #16
 80071f6:	4f9e      	ldr	r7, [pc, #632]	; (8007470 <_vfprintf_r+0x12d8>)
 80071f8:	bfc8      	it	gt
 80071fa:	2610      	movgt	r6, #16
 80071fc:	dc05      	bgt.n	800720a <_vfprintf_r+0x1072>
 80071fe:	e0b5      	b.n	800736c <_vfprintf_r+0x11d4>
 8007200:	3408      	adds	r4, #8
 8007202:	3d10      	subs	r5, #16
 8007204:	2d10      	cmp	r5, #16
 8007206:	f340 80b1 	ble.w	800736c <_vfprintf_r+0x11d4>
 800720a:	3301      	adds	r3, #1
 800720c:	3210      	adds	r2, #16
 800720e:	2b07      	cmp	r3, #7
 8007210:	9221      	str	r2, [sp, #132]	; 0x84
 8007212:	9320      	str	r3, [sp, #128]	; 0x80
 8007214:	6027      	str	r7, [r4, #0]
 8007216:	6066      	str	r6, [r4, #4]
 8007218:	ddf2      	ble.n	8007200 <_vfprintf_r+0x1068>
 800721a:	4640      	mov	r0, r8
 800721c:	4649      	mov	r1, r9
 800721e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007220:	f003 f82c 	bl	800a27c <__sprint_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	f47f a8b7 	bne.w	8006398 <_vfprintf_r+0x200>
 800722a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800722c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800722e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007230:	e7e7      	b.n	8007202 <_vfprintf_r+0x106a>
 8007232:	9e02      	ldr	r6, [sp, #8]
 8007234:	4a8f      	ldr	r2, [pc, #572]	; (8007474 <_vfprintf_r+0x12dc>)
 8007236:	4b90      	ldr	r3, [pc, #576]	; (8007478 <_vfprintf_r+0x12e0>)
 8007238:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 800723c:	900b      	str	r0, [sp, #44]	; 0x2c
 800723e:	2103      	movs	r1, #3
 8007240:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8007244:	2d47      	cmp	r5, #71	; 0x47
 8007246:	bfd8      	it	le
 8007248:	461a      	movle	r2, r3
 800724a:	9103      	str	r1, [sp, #12]
 800724c:	9602      	str	r6, [sp, #8]
 800724e:	900c      	str	r0, [sp, #48]	; 0x30
 8007250:	920a      	str	r2, [sp, #40]	; 0x28
 8007252:	9107      	str	r1, [sp, #28]
 8007254:	f7ff b8fe 	b.w	8006454 <_vfprintf_r+0x2bc>
 8007258:	3304      	adds	r3, #4
 800725a:	6816      	ldr	r6, [r2, #0]
 800725c:	9308      	str	r3, [sp, #32]
 800725e:	2700      	movs	r7, #0
 8007260:	f7ff ba5c 	b.w	800671c <_vfprintf_r+0x584>
 8007264:	4640      	mov	r0, r8
 8007266:	4649      	mov	r1, r9
 8007268:	aa1f      	add	r2, sp, #124	; 0x7c
 800726a:	f003 f807 	bl	800a27c <__sprint_r>
 800726e:	2800      	cmp	r0, #0
 8007270:	f47f a892 	bne.w	8006398 <_vfprintf_r+0x200>
 8007274:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007276:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800727a:	ac2c      	add	r4, sp, #176	; 0xb0
 800727c:	e7a2      	b.n	80071c4 <_vfprintf_r+0x102c>
 800727e:	f041 0120 	orr.w	r1, r1, #32
 8007282:	9102      	str	r1, [sp, #8]
 8007284:	785d      	ldrb	r5, [r3, #1]
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	f7fe bff7 	b.w	800627a <_vfprintf_r+0xe2>
 800728c:	9806      	ldr	r0, [sp, #24]
 800728e:	9108      	str	r1, [sp, #32]
 8007290:	4240      	negs	r0, r0
 8007292:	9006      	str	r0, [sp, #24]
 8007294:	4619      	mov	r1, r3
 8007296:	f7ff b9f1 	b.w	800667c <_vfprintf_r+0x4e4>
 800729a:	4640      	mov	r0, r8
 800729c:	4649      	mov	r1, r9
 800729e:	aa1f      	add	r2, sp, #124	; 0x7c
 80072a0:	f002 ffec 	bl	800a27c <__sprint_r>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f47f a877 	bne.w	8006398 <_vfprintf_r+0x200>
 80072aa:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80072ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80072b0:	e413      	b.n	8006ada <_vfprintf_r+0x942>
 80072b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b4:	ab2c      	add	r3, sp, #176	; 0xb0
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	9307      	str	r3, [sp, #28]
 80072ba:	f7ff b8c3 	b.w	8006444 <_vfprintf_r+0x2ac>
 80072be:	4640      	mov	r0, r8
 80072c0:	4649      	mov	r1, r9
 80072c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80072c4:	f002 ffda 	bl	800a27c <__sprint_r>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	f47f a865 	bne.w	8006398 <_vfprintf_r+0x200>
 80072ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80072d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80072d6:	6060      	str	r0, [r4, #4]
 80072d8:	3301      	adds	r3, #1
 80072da:	eb02 0b00 	add.w	fp, r2, r0
 80072de:	2b07      	cmp	r3, #7
 80072e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072e2:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80072e6:	9320      	str	r3, [sp, #128]	; 0x80
 80072e8:	6022      	str	r2, [r4, #0]
 80072ea:	f77f a977 	ble.w	80065dc <_vfprintf_r+0x444>
 80072ee:	e492      	b.n	8006c16 <_vfprintf_r+0xa7e>
 80072f0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80072f4:	f7fe fe48 	bl	8005f88 <strlen>
 80072f8:	9708      	str	r7, [sp, #32]
 80072fa:	9007      	str	r0, [sp, #28]
 80072fc:	4603      	mov	r3, r0
 80072fe:	f7ff b9f2 	b.w	80066e6 <_vfprintf_r+0x54e>
 8007302:	aa1a      	add	r2, sp, #104	; 0x68
 8007304:	ab1d      	add	r3, sp, #116	; 0x74
 8007306:	e88d 000c 	stmia.w	sp, {r2, r3}
 800730a:	4640      	mov	r0, r8
 800730c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007310:	2103      	movs	r1, #3
 8007312:	465a      	mov	r2, fp
 8007314:	ab19      	add	r3, sp, #100	; 0x64
 8007316:	f000 fa97 	bl	8007848 <_dtoa_r>
 800731a:	465f      	mov	r7, fp
 800731c:	900a      	str	r0, [sp, #40]	; 0x28
 800731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007320:	19de      	adds	r6, r3, r7
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	2b46      	cmp	r3, #70	; 0x46
 8007326:	f47f aeaf 	bne.w	8007088 <_vfprintf_r+0xef0>
 800732a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b30      	cmp	r3, #48	; 0x30
 8007330:	f000 8100 	beq.w	8007534 <_vfprintf_r+0x139c>
 8007334:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007336:	443e      	add	r6, r7
 8007338:	e6a6      	b.n	8007088 <_vfprintf_r+0xef0>
 800733a:	4640      	mov	r0, r8
 800733c:	4649      	mov	r1, r9
 800733e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007340:	f002 ff9c 	bl	800a27c <__sprint_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	f47f a827 	bne.w	8006398 <_vfprintf_r+0x200>
 800734a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800734e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007350:	e4eb      	b.n	8006d2a <_vfprintf_r+0xb92>
 8007352:	4640      	mov	r0, r8
 8007354:	4649      	mov	r1, r9
 8007356:	aa1f      	add	r2, sp, #124	; 0x7c
 8007358:	f002 ff90 	bl	800a27c <__sprint_r>
 800735c:	2800      	cmp	r0, #0
 800735e:	f47f a81b 	bne.w	8006398 <_vfprintf_r+0x200>
 8007362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007364:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8007368:	ac2c      	add	r4, sp, #176	; 0xb0
 800736a:	e5a1      	b.n	8006eb0 <_vfprintf_r+0xd18>
 800736c:	3301      	adds	r3, #1
 800736e:	442a      	add	r2, r5
 8007370:	2b07      	cmp	r3, #7
 8007372:	9221      	str	r2, [sp, #132]	; 0x84
 8007374:	9320      	str	r3, [sp, #128]	; 0x80
 8007376:	6027      	str	r7, [r4, #0]
 8007378:	6065      	str	r5, [r4, #4]
 800737a:	dca0      	bgt.n	80072be <_vfprintf_r+0x1126>
 800737c:	3408      	adds	r4, #8
 800737e:	e7a9      	b.n	80072d4 <_vfprintf_r+0x113c>
 8007380:	2e06      	cmp	r6, #6
 8007382:	4633      	mov	r3, r6
 8007384:	bf28      	it	cs
 8007386:	2306      	movcs	r3, #6
 8007388:	9307      	str	r3, [sp, #28]
 800738a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800738e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	4b39      	ldr	r3, [pc, #228]	; (800747c <_vfprintf_r+0x12e4>)
 8007396:	9708      	str	r7, [sp, #32]
 8007398:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800739c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80073a0:	930a      	str	r3, [sp, #40]	; 0x28
 80073a2:	f7ff b857 	b.w	8006454 <_vfprintf_r+0x2bc>
 80073a6:	4640      	mov	r0, r8
 80073a8:	4649      	mov	r1, r9
 80073aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80073ac:	f002 ff66 	bl	800a27c <__sprint_r>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f47e aff1 	bne.w	8006398 <_vfprintf_r+0x200>
 80073b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073ba:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	ac2c      	add	r4, sp, #176	; 0xb0
 80073c2:	e58b      	b.n	8006edc <_vfprintf_r+0xd44>
 80073c4:	1cdf      	adds	r7, r3, #3
 80073c6:	db22      	blt.n	800740e <_vfprintf_r+0x1276>
 80073c8:	459b      	cmp	fp, r3
 80073ca:	db20      	blt.n	800740e <_vfprintf_r+0x1276>
 80073cc:	930c      	str	r3, [sp, #48]	; 0x30
 80073ce:	2567      	movs	r5, #103	; 0x67
 80073d0:	e67c      	b.n	80070cc <_vfprintf_r+0xf34>
 80073d2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80073d6:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80073da:	f7ff ba10 	b.w	80067fe <_vfprintf_r+0x666>
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e2:	9302      	str	r3, [sp, #8]
 80073e4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80073e8:	2300      	movs	r3, #0
 80073ea:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80073ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80073f0:	f7ff b833 	b.w	800645a <_vfprintf_r+0x2c2>
 80073f4:	4633      	mov	r3, r6
 80073f6:	e65a      	b.n	80070ae <_vfprintf_r+0xf16>
 80073f8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80073fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80073fe:	9708      	str	r7, [sp, #32]
 8007400:	900c      	str	r0, [sp, #48]	; 0x30
 8007402:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8007406:	9303      	str	r3, [sp, #12]
 8007408:	9607      	str	r6, [sp, #28]
 800740a:	f7ff b823 	b.w	8006454 <_vfprintf_r+0x2bc>
 800740e:	3d02      	subs	r5, #2
 8007410:	3b01      	subs	r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	9319      	str	r3, [sp, #100]	; 0x64
 8007416:	bfba      	itte	lt
 8007418:	425b      	neglt	r3, r3
 800741a:	222d      	movlt	r2, #45	; 0x2d
 800741c:	222b      	movge	r2, #43	; 0x2b
 800741e:	2b09      	cmp	r3, #9
 8007420:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 8007424:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8007428:	f340 8098 	ble.w	800755c <_vfprintf_r+0x13c4>
 800742c:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 8007430:	4630      	mov	r0, r6
 8007432:	4a13      	ldr	r2, [pc, #76]	; (8007480 <_vfprintf_r+0x12e8>)
 8007434:	fb82 2103 	smull	r2, r1, r2, r3
 8007438:	17da      	asrs	r2, r3, #31
 800743a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800743e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007442:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007446:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800744a:	2a09      	cmp	r2, #9
 800744c:	4613      	mov	r3, r2
 800744e:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8007452:	dcee      	bgt.n	8007432 <_vfprintf_r+0x129a>
 8007454:	4602      	mov	r2, r0
 8007456:	3330      	adds	r3, #48	; 0x30
 8007458:	b2d9      	uxtb	r1, r3
 800745a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800745e:	4296      	cmp	r6, r2
 8007460:	f240 80a9 	bls.w	80075b6 <_vfprintf_r+0x141e>
 8007464:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8007468:	4603      	mov	r3, r0
 800746a:	e00d      	b.n	8007488 <_vfprintf_r+0x12f0>
 800746c:	0801ad38 	.word	0x0801ad38
 8007470:	0801ace8 	.word	0x0801ace8
 8007474:	0801ad04 	.word	0x0801ad04
 8007478:	0801ad00 	.word	0x0801ad00
 800747c:	0801ad30 	.word	0x0801ad30
 8007480:	66666667 	.word	0x66666667
 8007484:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007488:	f802 1b01 	strb.w	r1, [r2], #1
 800748c:	42b3      	cmp	r3, r6
 800748e:	d1f9      	bne.n	8007484 <_vfprintf_r+0x12ec>
 8007490:	ab1f      	add	r3, sp, #124	; 0x7c
 8007492:	1a1b      	subs	r3, r3, r0
 8007494:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8007498:	4413      	add	r3, r2
 800749a:	aa1b      	add	r2, sp, #108	; 0x6c
 800749c:	1a9b      	subs	r3, r3, r2
 800749e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80074a2:	2a01      	cmp	r2, #1
 80074a4:	4413      	add	r3, r2
 80074a6:	9307      	str	r3, [sp, #28]
 80074a8:	dd69      	ble.n	800757e <_vfprintf_r+0x13e6>
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	2200      	movs	r2, #0
 80074ae:	3301      	adds	r3, #1
 80074b0:	9307      	str	r3, [sp, #28]
 80074b2:	920c      	str	r2, [sp, #48]	; 0x30
 80074b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074b8:	e614      	b.n	80070e4 <_vfprintf_r+0xf4c>
 80074ba:	4640      	mov	r0, r8
 80074bc:	4649      	mov	r1, r9
 80074be:	aa1f      	add	r2, sp, #124	; 0x7c
 80074c0:	f002 fedc 	bl	800a27c <__sprint_r>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	f47e af67 	bne.w	8006398 <_vfprintf_r+0x200>
 80074ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80074cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80074d2:	e68c      	b.n	80071ee <_vfprintf_r+0x1056>
 80074d4:	f04f 0b06 	mov.w	fp, #6
 80074d8:	e5a4      	b.n	8007024 <_vfprintf_r+0xe8c>
 80074da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bfd8      	it	le
 80074e0:	f1c3 0602 	rsble	r6, r3, #2
 80074e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074e6:	bfc8      	it	gt
 80074e8:	2601      	movgt	r6, #1
 80074ea:	18f3      	adds	r3, r6, r3
 80074ec:	9307      	str	r3, [sp, #28]
 80074ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074f2:	e5f7      	b.n	80070e4 <_vfprintf_r+0xf4c>
 80074f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80074f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074fc:	9014      	str	r0, [sp, #80]	; 0x50
 80074fe:	9315      	str	r3, [sp, #84]	; 0x54
 8007500:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8007504:	e59c      	b.n	8007040 <_vfprintf_r+0xea8>
 8007506:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007508:	e5d1      	b.n	80070ae <_vfprintf_r+0xf16>
 800750a:	2b00      	cmp	r3, #0
 800750c:	dd2e      	ble.n	800756c <_vfprintf_r+0x13d4>
 800750e:	f1bb 0f00 	cmp.w	fp, #0
 8007512:	d107      	bne.n	8007524 <_vfprintf_r+0x138c>
 8007514:	9b02      	ldr	r3, [sp, #8]
 8007516:	07de      	lsls	r6, r3, #31
 8007518:	d404      	bmi.n	8007524 <_vfprintf_r+0x138c>
 800751a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800751c:	9207      	str	r2, [sp, #28]
 800751e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007522:	e5df      	b.n	80070e4 <_vfprintf_r+0xf4c>
 8007524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007526:	f10b 0601 	add.w	r6, fp, #1
 800752a:	4433      	add	r3, r6
 800752c:	9307      	str	r3, [sp, #28]
 800752e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007532:	e5d7      	b.n	80070e4 <_vfprintf_r+0xf4c>
 8007534:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007538:	2200      	movs	r2, #0
 800753a:	2300      	movs	r3, #0
 800753c:	f7f9 fb0c 	bl	8000b58 <__aeabi_dcmpeq>
 8007540:	2800      	cmp	r0, #0
 8007542:	f47f aef7 	bne.w	8007334 <_vfprintf_r+0x119c>
 8007546:	f1c7 0701 	rsb	r7, r7, #1
 800754a:	9719      	str	r7, [sp, #100]	; 0x64
 800754c:	443e      	add	r6, r7
 800754e:	e59b      	b.n	8007088 <_vfprintf_r+0xef0>
 8007550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007552:	3301      	adds	r3, #1
 8007554:	9307      	str	r3, [sp, #28]
 8007556:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800755a:	e5c3      	b.n	80070e4 <_vfprintf_r+0xf4c>
 800755c:	3330      	adds	r3, #48	; 0x30
 800755e:	2230      	movs	r2, #48	; 0x30
 8007560:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8007564:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8007568:	ab1c      	add	r3, sp, #112	; 0x70
 800756a:	e796      	b.n	800749a <_vfprintf_r+0x1302>
 800756c:	f1bb 0f00 	cmp.w	fp, #0
 8007570:	d11b      	bne.n	80075aa <_vfprintf_r+0x1412>
 8007572:	9b02      	ldr	r3, [sp, #8]
 8007574:	07d8      	lsls	r0, r3, #31
 8007576:	d418      	bmi.n	80075aa <_vfprintf_r+0x1412>
 8007578:	2301      	movs	r3, #1
 800757a:	9307      	str	r3, [sp, #28]
 800757c:	e5b2      	b.n	80070e4 <_vfprintf_r+0xf4c>
 800757e:	9b02      	ldr	r3, [sp, #8]
 8007580:	f013 0301 	ands.w	r3, r3, #1
 8007584:	d191      	bne.n	80074aa <_vfprintf_r+0x1312>
 8007586:	930c      	str	r3, [sp, #48]	; 0x30
 8007588:	9b07      	ldr	r3, [sp, #28]
 800758a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800758e:	e5a9      	b.n	80070e4 <_vfprintf_r+0xf4c>
 8007590:	9d08      	ldr	r5, [sp, #32]
 8007592:	682e      	ldr	r6, [r5, #0]
 8007594:	4628      	mov	r0, r5
 8007596:	3004      	adds	r0, #4
 8007598:	2e00      	cmp	r6, #0
 800759a:	785d      	ldrb	r5, [r3, #1]
 800759c:	9008      	str	r0, [sp, #32]
 800759e:	f6be ae6c 	bge.w	800627a <_vfprintf_r+0xe2>
 80075a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80075a6:	f7fe be68 	b.w	800627a <_vfprintf_r+0xe2>
 80075aa:	f10b 0302 	add.w	r3, fp, #2
 80075ae:	9307      	str	r3, [sp, #28]
 80075b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075b4:	e596      	b.n	80070e4 <_vfprintf_r+0xf4c>
 80075b6:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80075ba:	e76e      	b.n	800749a <_vfprintf_r+0x1302>

080075bc <__sbprintf>:
 80075bc:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80075c6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80075ca:	69e7      	ldr	r7, [r4, #28]
 80075cc:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80075ce:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 80075d2:	9119      	str	r1, [sp, #100]	; 0x64
 80075d4:	ad1a      	add	r5, sp, #104	; 0x68
 80075d6:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80075da:	f02e 0e02 	bic.w	lr, lr, #2
 80075de:	f04f 0c00 	mov.w	ip, #0
 80075e2:	9707      	str	r7, [sp, #28]
 80075e4:	4669      	mov	r1, sp
 80075e6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80075e8:	9500      	str	r5, [sp, #0]
 80075ea:	9504      	str	r5, [sp, #16]
 80075ec:	9602      	str	r6, [sp, #8]
 80075ee:	9605      	str	r6, [sp, #20]
 80075f0:	f8ad e00c 	strh.w	lr, [sp, #12]
 80075f4:	f8ad 900e 	strh.w	r9, [sp, #14]
 80075f8:	9709      	str	r7, [sp, #36]	; 0x24
 80075fa:	f8cd c018 	str.w	ip, [sp, #24]
 80075fe:	4606      	mov	r6, r0
 8007600:	f7fe fdca 	bl	8006198 <_vfprintf_r>
 8007604:	1e05      	subs	r5, r0, #0
 8007606:	db07      	blt.n	8007618 <__sbprintf+0x5c>
 8007608:	4630      	mov	r0, r6
 800760a:	4669      	mov	r1, sp
 800760c:	f001 f918 	bl	8008840 <_fflush_r>
 8007610:	2800      	cmp	r0, #0
 8007612:	bf18      	it	ne
 8007614:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8007618:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800761c:	065b      	lsls	r3, r3, #25
 800761e:	d503      	bpl.n	8007628 <__sbprintf+0x6c>
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007626:	81a3      	strh	r3, [r4, #12]
 8007628:	4628      	mov	r0, r5
 800762a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800762e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8007632:	bf00      	nop

08007634 <__swsetup_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4b2f      	ldr	r3, [pc, #188]	; (80076f4 <__swsetup_r+0xc0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4605      	mov	r5, r0
 800763c:	460c      	mov	r4, r1
 800763e:	b113      	cbz	r3, 8007646 <__swsetup_r+0x12>
 8007640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007642:	2a00      	cmp	r2, #0
 8007644:	d036      	beq.n	80076b4 <__swsetup_r+0x80>
 8007646:	89a2      	ldrh	r2, [r4, #12]
 8007648:	b293      	uxth	r3, r2
 800764a:	0718      	lsls	r0, r3, #28
 800764c:	d50c      	bpl.n	8007668 <__swsetup_r+0x34>
 800764e:	6920      	ldr	r0, [r4, #16]
 8007650:	b1a8      	cbz	r0, 800767e <__swsetup_r+0x4a>
 8007652:	f013 0201 	ands.w	r2, r3, #1
 8007656:	d01e      	beq.n	8007696 <__swsetup_r+0x62>
 8007658:	6963      	ldr	r3, [r4, #20]
 800765a:	2200      	movs	r2, #0
 800765c:	425b      	negs	r3, r3
 800765e:	61a3      	str	r3, [r4, #24]
 8007660:	60a2      	str	r2, [r4, #8]
 8007662:	b1f0      	cbz	r0, 80076a2 <__swsetup_r+0x6e>
 8007664:	2000      	movs	r0, #0
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	06d9      	lsls	r1, r3, #27
 800766a:	d53b      	bpl.n	80076e4 <__swsetup_r+0xb0>
 800766c:	0758      	lsls	r0, r3, #29
 800766e:	d425      	bmi.n	80076bc <__swsetup_r+0x88>
 8007670:	6920      	ldr	r0, [r4, #16]
 8007672:	f042 0308 	orr.w	r3, r2, #8
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	b29b      	uxth	r3, r3
 800767a:	2800      	cmp	r0, #0
 800767c:	d1e9      	bne.n	8007652 <__swsetup_r+0x1e>
 800767e:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8007682:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007686:	d0e4      	beq.n	8007652 <__swsetup_r+0x1e>
 8007688:	4628      	mov	r0, r5
 800768a:	4621      	mov	r1, r4
 800768c:	f001 fc76 	bl	8008f7c <__smakebuf_r>
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	6920      	ldr	r0, [r4, #16]
 8007694:	e7dd      	b.n	8007652 <__swsetup_r+0x1e>
 8007696:	0799      	lsls	r1, r3, #30
 8007698:	bf58      	it	pl
 800769a:	6962      	ldrpl	r2, [r4, #20]
 800769c:	60a2      	str	r2, [r4, #8]
 800769e:	2800      	cmp	r0, #0
 80076a0:	d1e0      	bne.n	8007664 <__swsetup_r+0x30>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	061a      	lsls	r2, r3, #24
 80076a6:	d5de      	bpl.n	8007666 <__swsetup_r+0x32>
 80076a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 f957 	bl	8008968 <__sinit>
 80076ba:	e7c4      	b.n	8007646 <__swsetup_r+0x12>
 80076bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80076be:	b149      	cbz	r1, 80076d4 <__swsetup_r+0xa0>
 80076c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80076c4:	4299      	cmp	r1, r3
 80076c6:	d003      	beq.n	80076d0 <__swsetup_r+0x9c>
 80076c8:	4628      	mov	r0, r5
 80076ca:	f001 f9bb 	bl	8008a44 <_free_r>
 80076ce:	89a2      	ldrh	r2, [r4, #12]
 80076d0:	2300      	movs	r3, #0
 80076d2:	6323      	str	r3, [r4, #48]	; 0x30
 80076d4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80076d8:	2300      	movs	r3, #0
 80076da:	6920      	ldr	r0, [r4, #16]
 80076dc:	6063      	str	r3, [r4, #4]
 80076de:	b292      	uxth	r2, r2
 80076e0:	6020      	str	r0, [r4, #0]
 80076e2:	e7c6      	b.n	8007672 <__swsetup_r+0x3e>
 80076e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e8:	2309      	movs	r3, #9
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f0:	81a2      	strh	r2, [r4, #12]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	20000628 	.word	0x20000628

080076f8 <register_fini>:
 80076f8:	4b02      	ldr	r3, [pc, #8]	; (8007704 <register_fini+0xc>)
 80076fa:	b113      	cbz	r3, 8007702 <register_fini+0xa>
 80076fc:	4802      	ldr	r0, [pc, #8]	; (8007708 <register_fini+0x10>)
 80076fe:	f000 b805 	b.w	800770c <atexit>
 8007702:	4770      	bx	lr
 8007704:	00000000 	.word	0x00000000
 8007708:	0800897d 	.word	0x0800897d

0800770c <atexit>:
 800770c:	4601      	mov	r1, r0
 800770e:	2000      	movs	r0, #0
 8007710:	4602      	mov	r2, r0
 8007712:	4603      	mov	r3, r0
 8007714:	f002 be12 	b.w	800a33c <__register_exitproc>

08007718 <quorem>:
 8007718:	6902      	ldr	r2, [r0, #16]
 800771a:	690b      	ldr	r3, [r1, #16]
 800771c:	4293      	cmp	r3, r2
 800771e:	f300 808f 	bgt.w	8007840 <quorem+0x128>
 8007722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007726:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800772a:	f101 0714 	add.w	r7, r1, #20
 800772e:	f100 0b14 	add.w	fp, r0, #20
 8007732:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8007736:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800773a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800773e:	b083      	sub	sp, #12
 8007740:	3201      	adds	r2, #1
 8007742:	fbb3 f9f2 	udiv	r9, r3, r2
 8007746:	eb0b 0304 	add.w	r3, fp, r4
 800774a:	9400      	str	r4, [sp, #0]
 800774c:	eb07 0a04 	add.w	sl, r7, r4
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	f1b9 0f00 	cmp.w	r9, #0
 8007756:	d03b      	beq.n	80077d0 <quorem+0xb8>
 8007758:	2600      	movs	r6, #0
 800775a:	4632      	mov	r2, r6
 800775c:	46bc      	mov	ip, r7
 800775e:	46de      	mov	lr, fp
 8007760:	4634      	mov	r4, r6
 8007762:	f85c 6b04 	ldr.w	r6, [ip], #4
 8007766:	f8de 5000 	ldr.w	r5, [lr]
 800776a:	b2b3      	uxth	r3, r6
 800776c:	0c36      	lsrs	r6, r6, #16
 800776e:	fb03 4409 	mla	r4, r3, r9, r4
 8007772:	fb06 f609 	mul.w	r6, r6, r9
 8007776:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800777a:	b2a3      	uxth	r3, r4
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	b2b4      	uxth	r4, r6
 8007780:	fa13 f385 	uxtah	r3, r3, r5
 8007784:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8007788:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800778c:	b29b      	uxth	r3, r3
 800778e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007792:	45e2      	cmp	sl, ip
 8007794:	ea4f 4224 	mov.w	r2, r4, asr #16
 8007798:	f84e 3b04 	str.w	r3, [lr], #4
 800779c:	ea4f 4416 	mov.w	r4, r6, lsr #16
 80077a0:	d2df      	bcs.n	8007762 <quorem+0x4a>
 80077a2:	9b00      	ldr	r3, [sp, #0]
 80077a4:	f85b 3003 	ldr.w	r3, [fp, r3]
 80077a8:	b993      	cbnz	r3, 80077d0 <quorem+0xb8>
 80077aa:	9c01      	ldr	r4, [sp, #4]
 80077ac:	1f23      	subs	r3, r4, #4
 80077ae:	459b      	cmp	fp, r3
 80077b0:	d20c      	bcs.n	80077cc <quorem+0xb4>
 80077b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80077b6:	b94b      	cbnz	r3, 80077cc <quorem+0xb4>
 80077b8:	f1a4 0308 	sub.w	r3, r4, #8
 80077bc:	e002      	b.n	80077c4 <quorem+0xac>
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	3b04      	subs	r3, #4
 80077c2:	b91a      	cbnz	r2, 80077cc <quorem+0xb4>
 80077c4:	459b      	cmp	fp, r3
 80077c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80077ca:	d3f8      	bcc.n	80077be <quorem+0xa6>
 80077cc:	f8c0 8010 	str.w	r8, [r0, #16]
 80077d0:	4604      	mov	r4, r0
 80077d2:	f002 f999 	bl	8009b08 <__mcmp>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	db2e      	blt.n	8007838 <quorem+0x120>
 80077da:	f109 0901 	add.w	r9, r9, #1
 80077de:	465d      	mov	r5, fp
 80077e0:	2300      	movs	r3, #0
 80077e2:	f857 1b04 	ldr.w	r1, [r7], #4
 80077e6:	6828      	ldr	r0, [r5, #0]
 80077e8:	b28a      	uxth	r2, r1
 80077ea:	1a9a      	subs	r2, r3, r2
 80077ec:	0c09      	lsrs	r1, r1, #16
 80077ee:	fa12 f280 	uxtah	r2, r2, r0
 80077f2:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80077f6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80077fa:	b291      	uxth	r1, r2
 80077fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007800:	45ba      	cmp	sl, r7
 8007802:	f845 1b04 	str.w	r1, [r5], #4
 8007806:	ea4f 4323 	mov.w	r3, r3, asr #16
 800780a:	d2ea      	bcs.n	80077e2 <quorem+0xca>
 800780c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8007810:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8007814:	b982      	cbnz	r2, 8007838 <quorem+0x120>
 8007816:	1f1a      	subs	r2, r3, #4
 8007818:	4593      	cmp	fp, r2
 800781a:	d20b      	bcs.n	8007834 <quorem+0x11c>
 800781c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8007820:	b942      	cbnz	r2, 8007834 <quorem+0x11c>
 8007822:	3b08      	subs	r3, #8
 8007824:	e002      	b.n	800782c <quorem+0x114>
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	3b04      	subs	r3, #4
 800782a:	b91a      	cbnz	r2, 8007834 <quorem+0x11c>
 800782c:	459b      	cmp	fp, r3
 800782e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007832:	d3f8      	bcc.n	8007826 <quorem+0x10e>
 8007834:	f8c4 8010 	str.w	r8, [r4, #16]
 8007838:	4648      	mov	r0, r9
 800783a:	b003      	add	sp, #12
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	2000      	movs	r0, #0
 8007842:	4770      	bx	lr
 8007844:	0000      	movs	r0, r0
	...

08007848 <_dtoa_r>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	b099      	sub	sp, #100	; 0x64
 800784e:	4604      	mov	r4, r0
 8007850:	9103      	str	r1, [sp, #12]
 8007852:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007854:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8007856:	9304      	str	r3, [sp, #16]
 8007858:	4692      	mov	sl, r2
 800785a:	ed8d 0b00 	vstr	d0, [sp]
 800785e:	b141      	cbz	r1, 8007872 <_dtoa_r+0x2a>
 8007860:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007862:	604a      	str	r2, [r1, #4]
 8007864:	2301      	movs	r3, #1
 8007866:	4093      	lsls	r3, r2
 8007868:	608b      	str	r3, [r1, #8]
 800786a:	f001 ff69 	bl	8009740 <_Bfree>
 800786e:	2300      	movs	r3, #0
 8007870:	6423      	str	r3, [r4, #64]	; 0x40
 8007872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007876:	2b00      	cmp	r3, #0
 8007878:	4699      	mov	r9, r3
 800787a:	db36      	blt.n	80078ea <_dtoa_r+0xa2>
 800787c:	2300      	movs	r3, #0
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	4ba5      	ldr	r3, [pc, #660]	; (8007b18 <_dtoa_r+0x2d0>)
 8007882:	461a      	mov	r2, r3
 8007884:	ea09 0303 	and.w	r3, r9, r3
 8007888:	4293      	cmp	r3, r2
 800788a:	d017      	beq.n	80078bc <_dtoa_r+0x74>
 800788c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007890:	2200      	movs	r2, #0
 8007892:	2300      	movs	r3, #0
 8007894:	4630      	mov	r0, r6
 8007896:	4639      	mov	r1, r7
 8007898:	f7f9 f95e 	bl	8000b58 <__aeabi_dcmpeq>
 800789c:	4680      	mov	r8, r0
 800789e:	2800      	cmp	r0, #0
 80078a0:	d02b      	beq.n	80078fa <_dtoa_r+0xb2>
 80078a2:	9a04      	ldr	r2, [sp, #16]
 80078a4:	2301      	movs	r3, #1
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 80cc 	beq.w	8007a48 <_dtoa_r+0x200>
 80078b0:	489a      	ldr	r0, [pc, #616]	; (8007b1c <_dtoa_r+0x2d4>)
 80078b2:	6018      	str	r0, [r3, #0]
 80078b4:	3801      	subs	r0, #1
 80078b6:	b019      	add	sp, #100	; 0x64
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	9a04      	ldr	r2, [sp, #16]
 80078be:	f242 730f 	movw	r3, #9999	; 0x270f
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	9b00      	ldr	r3, [sp, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80a7 	beq.w	8007a1a <_dtoa_r+0x1d2>
 80078cc:	4894      	ldr	r0, [pc, #592]	; (8007b20 <_dtoa_r+0x2d8>)
 80078ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0f0      	beq.n	80078b6 <_dtoa_r+0x6e>
 80078d4:	78c3      	ldrb	r3, [r0, #3]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80b8 	beq.w	8007a4c <_dtoa_r+0x204>
 80078dc:	f100 0308 	add.w	r3, r0, #8
 80078e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	b019      	add	sp, #100	; 0x64
 80078e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ea:	9a01      	ldr	r2, [sp, #4]
 80078ec:	2301      	movs	r3, #1
 80078ee:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80078f8:	e7c2      	b.n	8007880 <_dtoa_r+0x38>
 80078fa:	4620      	mov	r0, r4
 80078fc:	ec47 6b10 	vmov	d0, r6, r7
 8007900:	a917      	add	r1, sp, #92	; 0x5c
 8007902:	aa16      	add	r2, sp, #88	; 0x58
 8007904:	f002 f98e 	bl	8009c24 <__d2b>
 8007908:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800790c:	4683      	mov	fp, r0
 800790e:	f040 808d 	bne.w	8007a2c <_dtoa_r+0x1e4>
 8007912:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007916:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007918:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800791c:	4445      	add	r5, r8
 800791e:	429d      	cmp	r5, r3
 8007920:	f2c0 829e 	blt.w	8007e60 <_dtoa_r+0x618>
 8007924:	4a7f      	ldr	r2, [pc, #508]	; (8007b24 <_dtoa_r+0x2dc>)
 8007926:	1b52      	subs	r2, r2, r5
 8007928:	fa09 f902 	lsl.w	r9, r9, r2
 800792c:	9a00      	ldr	r2, [sp, #0]
 800792e:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8007932:	fa22 f003 	lsr.w	r0, r2, r3
 8007936:	ea49 0000 	orr.w	r0, r9, r0
 800793a:	f7f8 fe2f 	bl	800059c <__aeabi_ui2d>
 800793e:	2301      	movs	r3, #1
 8007940:	3d01      	subs	r5, #1
 8007942:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007946:	930f      	str	r3, [sp, #60]	; 0x3c
 8007948:	2200      	movs	r2, #0
 800794a:	4b77      	ldr	r3, [pc, #476]	; (8007b28 <_dtoa_r+0x2e0>)
 800794c:	f7f8 fce8 	bl	8000320 <__aeabi_dsub>
 8007950:	a36b      	add	r3, pc, #428	; (adr r3, 8007b00 <_dtoa_r+0x2b8>)
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f8 fe97 	bl	8000688 <__aeabi_dmul>
 800795a:	a36b      	add	r3, pc, #428	; (adr r3, 8007b08 <_dtoa_r+0x2c0>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fce0 	bl	8000324 <__adddf3>
 8007964:	4606      	mov	r6, r0
 8007966:	4628      	mov	r0, r5
 8007968:	460f      	mov	r7, r1
 800796a:	f7f8 fe27 	bl	80005bc <__aeabi_i2d>
 800796e:	a368      	add	r3, pc, #416	; (adr r3, 8007b10 <_dtoa_r+0x2c8>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f7f8 fe88 	bl	8000688 <__aeabi_dmul>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f7f8 fcd0 	bl	8000324 <__adddf3>
 8007984:	4606      	mov	r6, r0
 8007986:	460f      	mov	r7, r1
 8007988:	f7f9 f918 	bl	8000bbc <__aeabi_d2iz>
 800798c:	4639      	mov	r1, r7
 800798e:	9005      	str	r0, [sp, #20]
 8007990:	2200      	movs	r2, #0
 8007992:	4630      	mov	r0, r6
 8007994:	2300      	movs	r3, #0
 8007996:	f7f9 f8e9 	bl	8000b6c <__aeabi_dcmplt>
 800799a:	2800      	cmp	r0, #0
 800799c:	f040 81ab 	bne.w	8007cf6 <_dtoa_r+0x4ae>
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	2b16      	cmp	r3, #22
 80079a4:	f200 81a4 	bhi.w	8007cf0 <_dtoa_r+0x4a8>
 80079a8:	9a05      	ldr	r2, [sp, #20]
 80079aa:	4b60      	ldr	r3, [pc, #384]	; (8007b2c <_dtoa_r+0x2e4>)
 80079ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079b8:	f7f9 f8f6 	bl	8000ba8 <__aeabi_dcmpgt>
 80079bc:	2800      	cmp	r0, #0
 80079be:	f000 8255 	beq.w	8007e6c <_dtoa_r+0x624>
 80079c2:	9b05      	ldr	r3, [sp, #20]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	9305      	str	r3, [sp, #20]
 80079c8:	2300      	movs	r3, #0
 80079ca:	930d      	str	r3, [sp, #52]	; 0x34
 80079cc:	ebc5 0508 	rsb	r5, r5, r8
 80079d0:	1e6b      	subs	r3, r5, #1
 80079d2:	9306      	str	r3, [sp, #24]
 80079d4:	f100 81a6 	bmi.w	8007d24 <_dtoa_r+0x4dc>
 80079d8:	2300      	movs	r3, #0
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	9b05      	ldr	r3, [sp, #20]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f2c0 8197 	blt.w	8007d12 <_dtoa_r+0x4ca>
 80079e4:	9a06      	ldr	r2, [sp, #24]
 80079e6:	930c      	str	r3, [sp, #48]	; 0x30
 80079e8:	4611      	mov	r1, r2
 80079ea:	4419      	add	r1, r3
 80079ec:	2300      	movs	r3, #0
 80079ee:	9106      	str	r1, [sp, #24]
 80079f0:	930a      	str	r3, [sp, #40]	; 0x28
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	2b09      	cmp	r3, #9
 80079f6:	d82b      	bhi.n	8007a50 <_dtoa_r+0x208>
 80079f8:	2b05      	cmp	r3, #5
 80079fa:	f340 8673 	ble.w	80086e4 <_dtoa_r+0xe9c>
 80079fe:	3b04      	subs	r3, #4
 8007a00:	9303      	str	r3, [sp, #12]
 8007a02:	2700      	movs	r7, #0
 8007a04:	9b03      	ldr	r3, [sp, #12]
 8007a06:	3b02      	subs	r3, #2
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	f200 8651 	bhi.w	80086b0 <_dtoa_r+0xe68>
 8007a0e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007a12:	03d1      	.short	0x03d1
 8007a14:	02b603c4 	.word	0x02b603c4
 8007a18:	0666      	.short	0x0666
 8007a1a:	4b41      	ldr	r3, [pc, #260]	; (8007b20 <_dtoa_r+0x2d8>)
 8007a1c:	4a44      	ldr	r2, [pc, #272]	; (8007b30 <_dtoa_r+0x2e8>)
 8007a1e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8007a22:	2800      	cmp	r0, #0
 8007a24:	bf14      	ite	ne
 8007a26:	4618      	movne	r0, r3
 8007a28:	4610      	moveq	r0, r2
 8007a2a:	e750      	b.n	80078ce <_dtoa_r+0x86>
 8007a2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a30:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007a34:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a3e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007a42:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007a46:	e77f      	b.n	8007948 <_dtoa_r+0x100>
 8007a48:	483a      	ldr	r0, [pc, #232]	; (8007b34 <_dtoa_r+0x2ec>)
 8007a4a:	e734      	b.n	80078b6 <_dtoa_r+0x6e>
 8007a4c:	1cc3      	adds	r3, r0, #3
 8007a4e:	e747      	b.n	80078e0 <_dtoa_r+0x98>
 8007a50:	2100      	movs	r1, #0
 8007a52:	6461      	str	r1, [r4, #68]	; 0x44
 8007a54:	4620      	mov	r0, r4
 8007a56:	468a      	mov	sl, r1
 8007a58:	9103      	str	r1, [sp, #12]
 8007a5a:	f001 fe4b 	bl	80096f4 <_Balloc>
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a62:	9308      	str	r3, [sp, #32]
 8007a64:	930e      	str	r3, [sp, #56]	; 0x38
 8007a66:	2301      	movs	r3, #1
 8007a68:	9009      	str	r0, [sp, #36]	; 0x24
 8007a6a:	6420      	str	r0, [r4, #64]	; 0x40
 8007a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f2c0 80d3 	blt.w	8007c1c <_dtoa_r+0x3d4>
 8007a76:	9a05      	ldr	r2, [sp, #20]
 8007a78:	2a0e      	cmp	r2, #14
 8007a7a:	f300 80cf 	bgt.w	8007c1c <_dtoa_r+0x3d4>
 8007a7e:	4b2b      	ldr	r3, [pc, #172]	; (8007b2c <_dtoa_r+0x2e4>)
 8007a80:	f1ba 0f00 	cmp.w	sl, #0
 8007a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a8c:	f2c0 8395 	blt.w	80081ba <_dtoa_r+0x972>
 8007a90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a94:	4642      	mov	r2, r8
 8007a96:	464b      	mov	r3, r9
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	f7f8 ff1e 	bl	80008dc <__aeabi_ddiv>
 8007aa0:	f7f9 f88c 	bl	8000bbc <__aeabi_d2iz>
 8007aa4:	4682      	mov	sl, r0
 8007aa6:	f7f8 fd89 	bl	80005bc <__aeabi_i2d>
 8007aaa:	4642      	mov	r2, r8
 8007aac:	464b      	mov	r3, r9
 8007aae:	f7f8 fdeb 	bl	8000688 <__aeabi_dmul>
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f7f8 fc31 	bl	8000320 <__aeabi_dsub>
 8007abe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ac0:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8007ac4:	702b      	strb	r3, [r5, #0]
 8007ac6:	9b08      	ldr	r3, [sp, #32]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	4606      	mov	r6, r0
 8007acc:	460f      	mov	r7, r1
 8007ace:	f105 0501 	add.w	r5, r5, #1
 8007ad2:	d063      	beq.n	8007b9c <_dtoa_r+0x354>
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <_dtoa_r+0x2f0>)
 8007ad8:	f7f8 fdd6 	bl	8000688 <__aeabi_dmul>
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	460f      	mov	r7, r1
 8007ae4:	f7f9 f838 	bl	8000b58 <__aeabi_dcmpeq>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f040 8084 	bne.w	8007bf6 <_dtoa_r+0x3ae>
 8007aee:	f8cd b000 	str.w	fp, [sp]
 8007af2:	9403      	str	r4, [sp, #12]
 8007af4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8007af8:	9c08      	ldr	r4, [sp, #32]
 8007afa:	e02a      	b.n	8007b52 <_dtoa_r+0x30a>
 8007afc:	f3af 8000 	nop.w
 8007b00:	636f4361 	.word	0x636f4361
 8007b04:	3fd287a7 	.word	0x3fd287a7
 8007b08:	8b60c8b3 	.word	0x8b60c8b3
 8007b0c:	3fc68a28 	.word	0x3fc68a28
 8007b10:	509f79fb 	.word	0x509f79fb
 8007b14:	3fd34413 	.word	0x3fd34413
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	0801ad39 	.word	0x0801ad39
 8007b20:	0801ad58 	.word	0x0801ad58
 8007b24:	fffffc0e 	.word	0xfffffc0e
 8007b28:	3ff80000 	.word	0x3ff80000
 8007b2c:	0801ad68 	.word	0x0801ad68
 8007b30:	0801ad4c 	.word	0x0801ad4c
 8007b34:	0801ad38 	.word	0x0801ad38
 8007b38:	40240000 	.word	0x40240000
 8007b3c:	f7f8 fda4 	bl	8000688 <__aeabi_dmul>
 8007b40:	2200      	movs	r2, #0
 8007b42:	2300      	movs	r3, #0
 8007b44:	4606      	mov	r6, r0
 8007b46:	460f      	mov	r7, r1
 8007b48:	f7f9 f806 	bl	8000b58 <__aeabi_dcmpeq>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	f040 83e4 	bne.w	800831a <_dtoa_r+0xad2>
 8007b52:	4642      	mov	r2, r8
 8007b54:	464b      	mov	r3, r9
 8007b56:	4630      	mov	r0, r6
 8007b58:	4639      	mov	r1, r7
 8007b5a:	f7f8 febf 	bl	80008dc <__aeabi_ddiv>
 8007b5e:	f7f9 f82d 	bl	8000bbc <__aeabi_d2iz>
 8007b62:	4682      	mov	sl, r0
 8007b64:	f7f8 fd2a 	bl	80005bc <__aeabi_i2d>
 8007b68:	4642      	mov	r2, r8
 8007b6a:	464b      	mov	r3, r9
 8007b6c:	f7f8 fd8c 	bl	8000688 <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4630      	mov	r0, r6
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7f8 fbd2 	bl	8000320 <__aeabi_dsub>
 8007b7c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8007b80:	f805 eb01 	strb.w	lr, [r5], #1
 8007b84:	ebcb 0e05 	rsb	lr, fp, r5
 8007b88:	4574      	cmp	r4, lr
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	4bb7      	ldr	r3, [pc, #732]	; (8007e70 <_dtoa_r+0x628>)
 8007b94:	d1d2      	bne.n	8007b3c <_dtoa_r+0x2f4>
 8007b96:	f8dd b000 	ldr.w	fp, [sp]
 8007b9a:	9c03      	ldr	r4, [sp, #12]
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	f7f8 fbbe 	bl	8000324 <__adddf3>
 8007ba8:	4606      	mov	r6, r0
 8007baa:	460f      	mov	r7, r1
 8007bac:	4640      	mov	r0, r8
 8007bae:	4649      	mov	r1, r9
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	f7f8 ffda 	bl	8000b6c <__aeabi_dcmplt>
 8007bb8:	b948      	cbnz	r0, 8007bce <_dtoa_r+0x386>
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	4632      	mov	r2, r6
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	f7f8 ffc9 	bl	8000b58 <__aeabi_dcmpeq>
 8007bc6:	b1b0      	cbz	r0, 8007bf6 <_dtoa_r+0x3ae>
 8007bc8:	f01a 0f01 	tst.w	sl, #1
 8007bcc:	d013      	beq.n	8007bf6 <_dtoa_r+0x3ae>
 8007bce:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8007bd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bd4:	1e6b      	subs	r3, r5, #1
 8007bd6:	e004      	b.n	8007be2 <_dtoa_r+0x39a>
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	f000 8448 	beq.w	800846e <_dtoa_r+0xc26>
 8007bde:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8007be2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007be6:	f103 0501 	add.w	r5, r3, #1
 8007bea:	461a      	mov	r2, r3
 8007bec:	d0f4      	beq.n	8007bd8 <_dtoa_r+0x390>
 8007bee:	f108 0301 	add.w	r3, r8, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	7013      	strb	r3, [r2, #0]
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	4659      	mov	r1, fp
 8007bfa:	f001 fda1 	bl	8009740 <_Bfree>
 8007bfe:	2200      	movs	r2, #0
 8007c00:	9b05      	ldr	r3, [sp, #20]
 8007c02:	702a      	strb	r2, [r5, #0]
 8007c04:	9a04      	ldr	r2, [sp, #16]
 8007c06:	3301      	adds	r3, #1
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 834b 	beq.w	80082a8 <_dtoa_r+0xa60>
 8007c12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c14:	601d      	str	r5, [r3, #0]
 8007c16:	b019      	add	sp, #100	; 0x64
 8007c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	f000 8085 	beq.w	8007d2e <_dtoa_r+0x4e6>
 8007c24:	9a03      	ldr	r2, [sp, #12]
 8007c26:	2a01      	cmp	r2, #1
 8007c28:	f340 830a 	ble.w	8008240 <_dtoa_r+0x9f8>
 8007c2c:	9b08      	ldr	r3, [sp, #32]
 8007c2e:	1e5f      	subs	r7, r3, #1
 8007c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c32:	42bb      	cmp	r3, r7
 8007c34:	f2c0 83a6 	blt.w	8008384 <_dtoa_r+0xb3c>
 8007c38:	1bdf      	subs	r7, r3, r7
 8007c3a:	9b08      	ldr	r3, [sp, #32]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f2c0 84a4 	blt.w	800858a <_dtoa_r+0xd42>
 8007c42:	9d07      	ldr	r5, [sp, #28]
 8007c44:	9b08      	ldr	r3, [sp, #32]
 8007c46:	9a07      	ldr	r2, [sp, #28]
 8007c48:	441a      	add	r2, r3
 8007c4a:	9207      	str	r2, [sp, #28]
 8007c4c:	9a06      	ldr	r2, [sp, #24]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	441a      	add	r2, r3
 8007c52:	2101      	movs	r1, #1
 8007c54:	9206      	str	r2, [sp, #24]
 8007c56:	f001 fe0d 	bl	8009874 <__i2b>
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	b165      	cbz	r5, 8007c78 <_dtoa_r+0x430>
 8007c5e:	9906      	ldr	r1, [sp, #24]
 8007c60:	2900      	cmp	r1, #0
 8007c62:	460b      	mov	r3, r1
 8007c64:	dd08      	ble.n	8007c78 <_dtoa_r+0x430>
 8007c66:	42a9      	cmp	r1, r5
 8007c68:	9a07      	ldr	r2, [sp, #28]
 8007c6a:	bfa8      	it	ge
 8007c6c:	462b      	movge	r3, r5
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	1aed      	subs	r5, r5, r3
 8007c72:	1acb      	subs	r3, r1, r3
 8007c74:	9207      	str	r2, [sp, #28]
 8007c76:	9306      	str	r3, [sp, #24]
 8007c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dd1a      	ble.n	8007cb4 <_dtoa_r+0x46c>
 8007c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8378 	beq.w	8008376 <_dtoa_r+0xb2e>
 8007c86:	2f00      	cmp	r7, #0
 8007c88:	dd10      	ble.n	8007cac <_dtoa_r+0x464>
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f001 fe94 	bl	80099bc <__pow5mult>
 8007c94:	4606      	mov	r6, r0
 8007c96:	465a      	mov	r2, fp
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f001 fdf4 	bl	8009888 <__multiply>
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f001 fd4b 	bl	8009740 <_Bfree>
 8007caa:	46c3      	mov	fp, r8
 8007cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cae:	1bda      	subs	r2, r3, r7
 8007cb0:	f040 82a5 	bne.w	80081fe <_dtoa_r+0x9b6>
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	f001 fddc 	bl	8009874 <__i2b>
 8007cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	dd38      	ble.n	8007d36 <_dtoa_r+0x4ee>
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f001 fe77 	bl	80099bc <__pow5mult>
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	f340 8299 	ble.w	800820a <_dtoa_r+0x9c2>
 8007cd8:	f04f 0900 	mov.w	r9, #0
 8007cdc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007ce0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8007ce4:	6918      	ldr	r0, [r3, #16]
 8007ce6:	f001 fd77 	bl	80097d8 <__hi0bits>
 8007cea:	f1c0 0020 	rsb	r0, r0, #32
 8007cee:	e02c      	b.n	8007d4a <_dtoa_r+0x502>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8007cf4:	e66a      	b.n	80079cc <_dtoa_r+0x184>
 8007cf6:	9805      	ldr	r0, [sp, #20]
 8007cf8:	f7f8 fc60 	bl	80005bc <__aeabi_i2d>
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	463b      	mov	r3, r7
 8007d00:	f7f8 ff2a 	bl	8000b58 <__aeabi_dcmpeq>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f47f ae4b 	bne.w	80079a0 <_dtoa_r+0x158>
 8007d0a:	9b05      	ldr	r3, [sp, #20]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	9305      	str	r3, [sp, #20]
 8007d10:	e646      	b.n	80079a0 <_dtoa_r+0x158>
 8007d12:	9a07      	ldr	r2, [sp, #28]
 8007d14:	9b05      	ldr	r3, [sp, #20]
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	425b      	negs	r3, r3
 8007d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9207      	str	r2, [sp, #28]
 8007d20:	930c      	str	r3, [sp, #48]	; 0x30
 8007d22:	e666      	b.n	80079f2 <_dtoa_r+0x1aa>
 8007d24:	425b      	negs	r3, r3
 8007d26:	9307      	str	r3, [sp, #28]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9306      	str	r3, [sp, #24]
 8007d2c:	e656      	b.n	80079dc <_dtoa_r+0x194>
 8007d2e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007d30:	9d07      	ldr	r5, [sp, #28]
 8007d32:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007d34:	e792      	b.n	8007c5c <_dtoa_r+0x414>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	f340 82b8 	ble.w	80082ae <_dtoa_r+0xa66>
 8007d3e:	f04f 0900 	mov.w	r9, #0
 8007d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1c9      	bne.n	8007cdc <_dtoa_r+0x494>
 8007d48:	2001      	movs	r0, #1
 8007d4a:	9b06      	ldr	r3, [sp, #24]
 8007d4c:	4418      	add	r0, r3
 8007d4e:	f010 001f 	ands.w	r0, r0, #31
 8007d52:	f000 8083 	beq.w	8007e5c <_dtoa_r+0x614>
 8007d56:	f1c0 0320 	rsb	r3, r0, #32
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	f340 84b9 	ble.w	80086d2 <_dtoa_r+0xe8a>
 8007d60:	f1c0 001c 	rsb	r0, r0, #28
 8007d64:	9b07      	ldr	r3, [sp, #28]
 8007d66:	4403      	add	r3, r0
 8007d68:	9307      	str	r3, [sp, #28]
 8007d6a:	9b06      	ldr	r3, [sp, #24]
 8007d6c:	4403      	add	r3, r0
 8007d6e:	4405      	add	r5, r0
 8007d70:	9306      	str	r3, [sp, #24]
 8007d72:	9b07      	ldr	r3, [sp, #28]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd05      	ble.n	8007d84 <_dtoa_r+0x53c>
 8007d78:	4659      	mov	r1, fp
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f001 fe6d 	bl	8009a5c <__lshift>
 8007d82:	4683      	mov	fp, r0
 8007d84:	9b06      	ldr	r3, [sp, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	dd05      	ble.n	8007d96 <_dtoa_r+0x54e>
 8007d8a:	4641      	mov	r1, r8
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f001 fe64 	bl	8009a5c <__lshift>
 8007d94:	4680      	mov	r8, r0
 8007d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 826a 	bne.w	8008272 <_dtoa_r+0xa2a>
 8007d9e:	9b08      	ldr	r3, [sp, #32]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f340 8297 	ble.w	80082d4 <_dtoa_r+0xa8c>
 8007da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d171      	bne.n	8007e90 <_dtoa_r+0x648>
 8007dac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007db0:	9f08      	ldr	r7, [sp, #32]
 8007db2:	464d      	mov	r5, r9
 8007db4:	e002      	b.n	8007dbc <_dtoa_r+0x574>
 8007db6:	f001 fccd 	bl	8009754 <__multadd>
 8007dba:	4683      	mov	fp, r0
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f7ff fcaa 	bl	8007718 <quorem>
 8007dc4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8007dc8:	f805 cb01 	strb.w	ip, [r5], #1
 8007dcc:	ebc9 0305 	rsb	r3, r9, r5
 8007dd0:	42bb      	cmp	r3, r7
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4659      	mov	r1, fp
 8007dd6:	f04f 020a 	mov.w	r2, #10
 8007dda:	f04f 0300 	mov.w	r3, #0
 8007dde:	dbea      	blt.n	8007db6 <_dtoa_r+0x56e>
 8007de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de2:	9a08      	ldr	r2, [sp, #32]
 8007de4:	2a01      	cmp	r2, #1
 8007de6:	bfac      	ite	ge
 8007de8:	189b      	addge	r3, r3, r2
 8007dea:	3301      	addlt	r3, #1
 8007dec:	461d      	mov	r5, r3
 8007dee:	f04f 0a00 	mov.w	sl, #0
 8007df2:	4659      	mov	r1, fp
 8007df4:	2201      	movs	r2, #1
 8007df6:	4620      	mov	r0, r4
 8007df8:	f8cd c000 	str.w	ip, [sp]
 8007dfc:	f001 fe2e 	bl	8009a5c <__lshift>
 8007e00:	4641      	mov	r1, r8
 8007e02:	4683      	mov	fp, r0
 8007e04:	f001 fe80 	bl	8009b08 <__mcmp>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	f8dd c000 	ldr.w	ip, [sp]
 8007e0e:	f340 82ef 	ble.w	80083f0 <_dtoa_r+0xba8>
 8007e12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e18:	1e6b      	subs	r3, r5, #1
 8007e1a:	e004      	b.n	8007e26 <_dtoa_r+0x5de>
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	f000 8275 	beq.w	800830c <_dtoa_r+0xac4>
 8007e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e26:	2a39      	cmp	r2, #57	; 0x39
 8007e28:	f103 0501 	add.w	r5, r3, #1
 8007e2c:	d0f6      	beq.n	8007e1c <_dtoa_r+0x5d4>
 8007e2e:	3201      	adds	r2, #1
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	4641      	mov	r1, r8
 8007e34:	4620      	mov	r0, r4
 8007e36:	f001 fc83 	bl	8009740 <_Bfree>
 8007e3a:	2e00      	cmp	r6, #0
 8007e3c:	f43f aedb 	beq.w	8007bf6 <_dtoa_r+0x3ae>
 8007e40:	f1ba 0f00 	cmp.w	sl, #0
 8007e44:	d005      	beq.n	8007e52 <_dtoa_r+0x60a>
 8007e46:	45b2      	cmp	sl, r6
 8007e48:	d003      	beq.n	8007e52 <_dtoa_r+0x60a>
 8007e4a:	4651      	mov	r1, sl
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f001 fc77 	bl	8009740 <_Bfree>
 8007e52:	4631      	mov	r1, r6
 8007e54:	4620      	mov	r0, r4
 8007e56:	f001 fc73 	bl	8009740 <_Bfree>
 8007e5a:	e6cc      	b.n	8007bf6 <_dtoa_r+0x3ae>
 8007e5c:	201c      	movs	r0, #28
 8007e5e:	e781      	b.n	8007d64 <_dtoa_r+0x51c>
 8007e60:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <_dtoa_r+0x62c>)
 8007e62:	9a00      	ldr	r2, [sp, #0]
 8007e64:	1b5b      	subs	r3, r3, r5
 8007e66:	fa02 f003 	lsl.w	r0, r2, r3
 8007e6a:	e566      	b.n	800793a <_dtoa_r+0xf2>
 8007e6c:	900d      	str	r0, [sp, #52]	; 0x34
 8007e6e:	e5ad      	b.n	80079cc <_dtoa_r+0x184>
 8007e70:	40240000 	.word	0x40240000
 8007e74:	fffffbee 	.word	0xfffffbee
 8007e78:	4631      	mov	r1, r6
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	220a      	movs	r2, #10
 8007e80:	f001 fc68 	bl	8009754 <__multadd>
 8007e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	4606      	mov	r6, r0
 8007e8a:	f340 840b 	ble.w	80086a4 <_dtoa_r+0xe5c>
 8007e8e:	9308      	str	r3, [sp, #32]
 8007e90:	2d00      	cmp	r5, #0
 8007e92:	dd05      	ble.n	8007ea0 <_dtoa_r+0x658>
 8007e94:	4631      	mov	r1, r6
 8007e96:	462a      	mov	r2, r5
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f001 fddf 	bl	8009a5c <__lshift>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	f1b9 0f00 	cmp.w	r9, #0
 8007ea4:	f040 82ed 	bne.w	8008482 <_dtoa_r+0xc3a>
 8007ea8:	46b1      	mov	r9, r6
 8007eaa:	9b08      	ldr	r3, [sp, #32]
 8007eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	18d3      	adds	r3, r2, r3
 8007eb2:	9308      	str	r3, [sp, #32]
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	930a      	str	r3, [sp, #40]	; 0x28
 8007ebc:	4617      	mov	r7, r2
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	4658      	mov	r0, fp
 8007ec2:	f7ff fc29 	bl	8007718 <quorem>
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4605      	mov	r5, r0
 8007eca:	4658      	mov	r0, fp
 8007ecc:	f001 fe1c 	bl	8009b08 <__mcmp>
 8007ed0:	464a      	mov	r2, r9
 8007ed2:	4682      	mov	sl, r0
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f001 fe3a 	bl	8009b50 <__mdiff>
 8007edc:	68c2      	ldr	r2, [r0, #12]
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	f040 81ba 	bne.w	800825e <_dtoa_r+0xa16>
 8007eea:	4619      	mov	r1, r3
 8007eec:	4658      	mov	r0, fp
 8007eee:	f8cd c01c 	str.w	ip, [sp, #28]
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	f001 fe08 	bl	8009b08 <__mcmp>
 8007ef8:	9b06      	ldr	r3, [sp, #24]
 8007efa:	9000      	str	r0, [sp, #0]
 8007efc:	4619      	mov	r1, r3
 8007efe:	4620      	mov	r0, r4
 8007f00:	f001 fc1e 	bl	8009740 <_Bfree>
 8007f04:	9a00      	ldr	r2, [sp, #0]
 8007f06:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007f0a:	b92a      	cbnz	r2, 8007f18 <_dtoa_r+0x6d0>
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	b91b      	cbnz	r3, 8007f18 <_dtoa_r+0x6d0>
 8007f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 83aa 	beq.w	800866c <_dtoa_r+0xe24>
 8007f18:	f1ba 0f00 	cmp.w	sl, #0
 8007f1c:	f2c0 824a 	blt.w	80083b4 <_dtoa_r+0xb6c>
 8007f20:	d105      	bne.n	8007f2e <_dtoa_r+0x6e6>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	b91b      	cbnz	r3, 8007f2e <_dtoa_r+0x6e6>
 8007f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 8243 	beq.w	80083b4 <_dtoa_r+0xb6c>
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	f300 82bb 	bgt.w	80084aa <_dtoa_r+0xc62>
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	f887 c000 	strb.w	ip, [r7]
 8007f3a:	f107 0a01 	add.w	sl, r7, #1
 8007f3e:	429f      	cmp	r7, r3
 8007f40:	4655      	mov	r5, sl
 8007f42:	f000 82be 	beq.w	80084c2 <_dtoa_r+0xc7a>
 8007f46:	4659      	mov	r1, fp
 8007f48:	220a      	movs	r2, #10
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f001 fc01 	bl	8009754 <__multadd>
 8007f52:	454e      	cmp	r6, r9
 8007f54:	4683      	mov	fp, r0
 8007f56:	4631      	mov	r1, r6
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f04f 020a 	mov.w	r2, #10
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	f000 8176 	beq.w	8008252 <_dtoa_r+0xa0a>
 8007f66:	f001 fbf5 	bl	8009754 <__multadd>
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	220a      	movs	r2, #10
 8007f70:	4620      	mov	r0, r4
 8007f72:	2300      	movs	r3, #0
 8007f74:	f001 fbee 	bl	8009754 <__multadd>
 8007f78:	4657      	mov	r7, sl
 8007f7a:	4681      	mov	r9, r0
 8007f7c:	e79f      	b.n	8007ebe <_dtoa_r+0x676>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f82:	f1ba 0f00 	cmp.w	sl, #0
 8007f86:	f340 820c 	ble.w	80083a2 <_dtoa_r+0xb5a>
 8007f8a:	4656      	mov	r6, sl
 8007f8c:	4655      	mov	r5, sl
 8007f8e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f92:	f8cd a020 	str.w	sl, [sp, #32]
 8007f96:	2100      	movs	r1, #0
 8007f98:	2e17      	cmp	r6, #23
 8007f9a:	6461      	str	r1, [r4, #68]	; 0x44
 8007f9c:	d90a      	bls.n	8007fb4 <_dtoa_r+0x76c>
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	2304      	movs	r3, #4
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	f103 0014 	add.w	r0, r3, #20
 8007fa8:	4286      	cmp	r6, r0
 8007faa:	4611      	mov	r1, r2
 8007fac:	f102 0201 	add.w	r2, r2, #1
 8007fb0:	d2f7      	bcs.n	8007fa2 <_dtoa_r+0x75a>
 8007fb2:	6461      	str	r1, [r4, #68]	; 0x44
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f001 fb9d 	bl	80096f4 <_Balloc>
 8007fba:	2d0e      	cmp	r5, #14
 8007fbc:	9009      	str	r0, [sp, #36]	; 0x24
 8007fbe:	6420      	str	r0, [r4, #64]	; 0x40
 8007fc0:	f63f ad55 	bhi.w	8007a6e <_dtoa_r+0x226>
 8007fc4:	2f00      	cmp	r7, #0
 8007fc6:	f43f ad52 	beq.w	8007a6e <_dtoa_r+0x226>
 8007fca:	ed9d 7b00 	vldr	d7, [sp]
 8007fce:	9905      	ldr	r1, [sp, #20]
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007fd6:	f340 8223 	ble.w	8008420 <_dtoa_r+0xbd8>
 8007fda:	4bb7      	ldr	r3, [pc, #732]	; (80082b8 <_dtoa_r+0xa70>)
 8007fdc:	f001 020f 	and.w	r2, r1, #15
 8007fe0:	110d      	asrs	r5, r1, #4
 8007fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe6:	06e9      	lsls	r1, r5, #27
 8007fe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007fec:	f140 81d2 	bpl.w	8008394 <_dtoa_r+0xb4c>
 8007ff0:	4bb2      	ldr	r3, [pc, #712]	; (80082bc <_dtoa_r+0xa74>)
 8007ff2:	ec51 0b17 	vmov	r0, r1, d7
 8007ff6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ffa:	f7f8 fc6f 	bl	80008dc <__aeabi_ddiv>
 8007ffe:	e9cd 0100 	strd	r0, r1, [sp]
 8008002:	f005 050f 	and.w	r5, r5, #15
 8008006:	f04f 0803 	mov.w	r8, #3
 800800a:	b18d      	cbz	r5, 8008030 <_dtoa_r+0x7e8>
 800800c:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 80082bc <_dtoa_r+0xa74>
 8008010:	4630      	mov	r0, r6
 8008012:	4639      	mov	r1, r7
 8008014:	07ea      	lsls	r2, r5, #31
 8008016:	d505      	bpl.n	8008024 <_dtoa_r+0x7dc>
 8008018:	e9d9 2300 	ldrd	r2, r3, [r9]
 800801c:	f7f8 fb34 	bl	8000688 <__aeabi_dmul>
 8008020:	f108 0801 	add.w	r8, r8, #1
 8008024:	106d      	asrs	r5, r5, #1
 8008026:	f109 0908 	add.w	r9, r9, #8
 800802a:	d1f3      	bne.n	8008014 <_dtoa_r+0x7cc>
 800802c:	4606      	mov	r6, r0
 800802e:	460f      	mov	r7, r1
 8008030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	f7f8 fc50 	bl	80008dc <__aeabi_ddiv>
 800803c:	e9cd 0100 	strd	r0, r1, [sp]
 8008040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008042:	b143      	cbz	r3, 8008056 <_dtoa_r+0x80e>
 8008044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008048:	2200      	movs	r2, #0
 800804a:	4b9d      	ldr	r3, [pc, #628]	; (80082c0 <_dtoa_r+0xa78>)
 800804c:	f7f8 fd8e 	bl	8000b6c <__aeabi_dcmplt>
 8008050:	2800      	cmp	r0, #0
 8008052:	f040 82ae 	bne.w	80085b2 <_dtoa_r+0xd6a>
 8008056:	4640      	mov	r0, r8
 8008058:	f7f8 fab0 	bl	80005bc <__aeabi_i2d>
 800805c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008060:	f7f8 fb12 	bl	8000688 <__aeabi_dmul>
 8008064:	4b97      	ldr	r3, [pc, #604]	; (80082c4 <_dtoa_r+0xa7c>)
 8008066:	2200      	movs	r2, #0
 8008068:	f7f8 f95c 	bl	8000324 <__adddf3>
 800806c:	9b08      	ldr	r3, [sp, #32]
 800806e:	4606      	mov	r6, r0
 8008070:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8162 	beq.w	800833e <_dtoa_r+0xaf6>
 800807a:	9b05      	ldr	r3, [sp, #20]
 800807c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008080:	9314      	str	r3, [sp, #80]	; 0x50
 8008082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8223 	beq.w	80084d0 <_dtoa_r+0xc88>
 800808a:	4b8b      	ldr	r3, [pc, #556]	; (80082b8 <_dtoa_r+0xa70>)
 800808c:	498e      	ldr	r1, [pc, #568]	; (80082c8 <_dtoa_r+0xa80>)
 800808e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008092:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008096:	2000      	movs	r0, #0
 8008098:	f7f8 fc20 	bl	80008dc <__aeabi_ddiv>
 800809c:	4632      	mov	r2, r6
 800809e:	463b      	mov	r3, r7
 80080a0:	f7f8 f93e 	bl	8000320 <__aeabi_dsub>
 80080a4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080a8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80080ac:	4639      	mov	r1, r7
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7f8 fd84 	bl	8000bbc <__aeabi_d2iz>
 80080b4:	4605      	mov	r5, r0
 80080b6:	f7f8 fa81 	bl	80005bc <__aeabi_i2d>
 80080ba:	3530      	adds	r5, #48	; 0x30
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 f92c 	bl	8000320 <__aeabi_dsub>
 80080c8:	fa5f f885 	uxtb.w	r8, r5
 80080cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80080ce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80080d2:	f885 8000 	strb.w	r8, [r5]
 80080d6:	4606      	mov	r6, r0
 80080d8:	460f      	mov	r7, r1
 80080da:	3501      	adds	r5, #1
 80080dc:	f7f8 fd46 	bl	8000b6c <__aeabi_dcmplt>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f040 82a7 	bne.w	8008634 <_dtoa_r+0xdec>
 80080e6:	4632      	mov	r2, r6
 80080e8:	463b      	mov	r3, r7
 80080ea:	2000      	movs	r0, #0
 80080ec:	4974      	ldr	r1, [pc, #464]	; (80082c0 <_dtoa_r+0xa78>)
 80080ee:	f7f8 f917 	bl	8000320 <__aeabi_dsub>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80080fa:	f7f8 fd55 	bl	8000ba8 <__aeabi_dcmpgt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f040 82ad 	bne.w	800865e <_dtoa_r+0xe16>
 8008104:	f1b9 0f01 	cmp.w	r9, #1
 8008108:	f340 8184 	ble.w	8008414 <_dtoa_r+0xbcc>
 800810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810e:	f8cd b000 	str.w	fp, [sp]
 8008112:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8008116:	4499      	add	r9, r3
 8008118:	46a0      	mov	r8, r4
 800811a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800811e:	e00d      	b.n	800813c <_dtoa_r+0x8f4>
 8008120:	2000      	movs	r0, #0
 8008122:	4967      	ldr	r1, [pc, #412]	; (80082c0 <_dtoa_r+0xa78>)
 8008124:	f7f8 f8fc 	bl	8000320 <__aeabi_dsub>
 8008128:	4652      	mov	r2, sl
 800812a:	465b      	mov	r3, fp
 800812c:	f7f8 fd1e 	bl	8000b6c <__aeabi_dcmplt>
 8008130:	2800      	cmp	r0, #0
 8008132:	f040 828f 	bne.w	8008654 <_dtoa_r+0xe0c>
 8008136:	454d      	cmp	r5, r9
 8008138:	f000 8167 	beq.w	800840a <_dtoa_r+0xbc2>
 800813c:	4650      	mov	r0, sl
 800813e:	4659      	mov	r1, fp
 8008140:	2200      	movs	r2, #0
 8008142:	4b62      	ldr	r3, [pc, #392]	; (80082cc <_dtoa_r+0xa84>)
 8008144:	f7f8 faa0 	bl	8000688 <__aeabi_dmul>
 8008148:	2200      	movs	r2, #0
 800814a:	4b60      	ldr	r3, [pc, #384]	; (80082cc <_dtoa_r+0xa84>)
 800814c:	4682      	mov	sl, r0
 800814e:	468b      	mov	fp, r1
 8008150:	4630      	mov	r0, r6
 8008152:	4639      	mov	r1, r7
 8008154:	f7f8 fa98 	bl	8000688 <__aeabi_dmul>
 8008158:	460f      	mov	r7, r1
 800815a:	4606      	mov	r6, r0
 800815c:	f7f8 fd2e 	bl	8000bbc <__aeabi_d2iz>
 8008160:	4604      	mov	r4, r0
 8008162:	f7f8 fa2b 	bl	80005bc <__aeabi_i2d>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4630      	mov	r0, r6
 800816c:	4639      	mov	r1, r7
 800816e:	f7f8 f8d7 	bl	8000320 <__aeabi_dsub>
 8008172:	3430      	adds	r4, #48	; 0x30
 8008174:	b2e4      	uxtb	r4, r4
 8008176:	4652      	mov	r2, sl
 8008178:	465b      	mov	r3, fp
 800817a:	f805 4b01 	strb.w	r4, [r5], #1
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	f7f8 fcf3 	bl	8000b6c <__aeabi_dcmplt>
 8008186:	4632      	mov	r2, r6
 8008188:	463b      	mov	r3, r7
 800818a:	2800      	cmp	r0, #0
 800818c:	d0c8      	beq.n	8008120 <_dtoa_r+0x8d8>
 800818e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008190:	f8dd b000 	ldr.w	fp, [sp]
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	4644      	mov	r4, r8
 8008198:	e52d      	b.n	8007bf6 <_dtoa_r+0x3ae>
 800819a:	2300      	movs	r3, #0
 800819c:	930b      	str	r3, [sp, #44]	; 0x2c
 800819e:	9b05      	ldr	r3, [sp, #20]
 80081a0:	4453      	add	r3, sl
 80081a2:	930e      	str	r3, [sp, #56]	; 0x38
 80081a4:	3301      	adds	r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	9308      	str	r3, [sp, #32]
 80081aa:	f340 8101 	ble.w	80083b0 <_dtoa_r+0xb68>
 80081ae:	9d08      	ldr	r5, [sp, #32]
 80081b0:	462e      	mov	r6, r5
 80081b2:	e6f0      	b.n	8007f96 <_dtoa_r+0x74e>
 80081b4:	2300      	movs	r3, #0
 80081b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80081b8:	e6e3      	b.n	8007f82 <_dtoa_r+0x73a>
 80081ba:	9b08      	ldr	r3, [sp, #32]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f73f ac67 	bgt.w	8007a90 <_dtoa_r+0x248>
 80081c2:	f040 80d4 	bne.w	800836e <_dtoa_r+0xb26>
 80081c6:	4640      	mov	r0, r8
 80081c8:	2200      	movs	r2, #0
 80081ca:	4b41      	ldr	r3, [pc, #260]	; (80082d0 <_dtoa_r+0xa88>)
 80081cc:	4649      	mov	r1, r9
 80081ce:	f7f8 fa5b 	bl	8000688 <__aeabi_dmul>
 80081d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d6:	f7f8 fcdd 	bl	8000b94 <__aeabi_dcmpge>
 80081da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081de:	4646      	mov	r6, r8
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f000 808b 	beq.w	80082fc <_dtoa_r+0xab4>
 80081e6:	ea6f 030a 	mvn.w	r3, sl
 80081ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80081ec:	9305      	str	r3, [sp, #20]
 80081ee:	4641      	mov	r1, r8
 80081f0:	4620      	mov	r0, r4
 80081f2:	f001 faa5 	bl	8009740 <_Bfree>
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	f47f ae2b 	bne.w	8007e52 <_dtoa_r+0x60a>
 80081fc:	e4fb      	b.n	8007bf6 <_dtoa_r+0x3ae>
 80081fe:	4659      	mov	r1, fp
 8008200:	4620      	mov	r0, r4
 8008202:	f001 fbdb 	bl	80099bc <__pow5mult>
 8008206:	4683      	mov	fp, r0
 8008208:	e554      	b.n	8007cb4 <_dtoa_r+0x46c>
 800820a:	9b00      	ldr	r3, [sp, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f47f ad63 	bne.w	8007cd8 <_dtoa_r+0x490>
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008218:	2b00      	cmp	r3, #0
 800821a:	f47f ad90 	bne.w	8007d3e <_dtoa_r+0x4f6>
 800821e:	9b01      	ldr	r3, [sp, #4]
 8008220:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8008224:	0d3f      	lsrs	r7, r7, #20
 8008226:	053f      	lsls	r7, r7, #20
 8008228:	2f00      	cmp	r7, #0
 800822a:	f000 821c 	beq.w	8008666 <_dtoa_r+0xe1e>
 800822e:	9b07      	ldr	r3, [sp, #28]
 8008230:	3301      	adds	r3, #1
 8008232:	9307      	str	r3, [sp, #28]
 8008234:	9b06      	ldr	r3, [sp, #24]
 8008236:	3301      	adds	r3, #1
 8008238:	9306      	str	r3, [sp, #24]
 800823a:	f04f 0901 	mov.w	r9, #1
 800823e:	e580      	b.n	8007d42 <_dtoa_r+0x4fa>
 8008240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008242:	2a00      	cmp	r2, #0
 8008244:	f000 81a7 	beq.w	8008596 <_dtoa_r+0xd4e>
 8008248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800824c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800824e:	9d07      	ldr	r5, [sp, #28]
 8008250:	e4f9      	b.n	8007c46 <_dtoa_r+0x3fe>
 8008252:	f001 fa7f 	bl	8009754 <__multadd>
 8008256:	4657      	mov	r7, sl
 8008258:	4606      	mov	r6, r0
 800825a:	4681      	mov	r9, r0
 800825c:	e62f      	b.n	8007ebe <_dtoa_r+0x676>
 800825e:	4601      	mov	r1, r0
 8008260:	4620      	mov	r0, r4
 8008262:	f8cd c000 	str.w	ip, [sp]
 8008266:	f001 fa6b 	bl	8009740 <_Bfree>
 800826a:	2201      	movs	r2, #1
 800826c:	f8dd c000 	ldr.w	ip, [sp]
 8008270:	e652      	b.n	8007f18 <_dtoa_r+0x6d0>
 8008272:	4658      	mov	r0, fp
 8008274:	4641      	mov	r1, r8
 8008276:	f001 fc47 	bl	8009b08 <__mcmp>
 800827a:	2800      	cmp	r0, #0
 800827c:	f6bf ad8f 	bge.w	8007d9e <_dtoa_r+0x556>
 8008280:	9f05      	ldr	r7, [sp, #20]
 8008282:	4659      	mov	r1, fp
 8008284:	2300      	movs	r3, #0
 8008286:	4620      	mov	r0, r4
 8008288:	220a      	movs	r2, #10
 800828a:	3f01      	subs	r7, #1
 800828c:	9705      	str	r7, [sp, #20]
 800828e:	f001 fa61 	bl	8009754 <__multadd>
 8008292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008294:	4683      	mov	fp, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	f47f adee 	bne.w	8007e78 <_dtoa_r+0x630>
 800829c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f340 81f5 	ble.w	800868e <_dtoa_r+0xe46>
 80082a4:	9308      	str	r3, [sp, #32]
 80082a6:	e581      	b.n	8007dac <_dtoa_r+0x564>
 80082a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082aa:	f7ff bb04 	b.w	80078b6 <_dtoa_r+0x6e>
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f47f ad44 	bne.w	8007d3e <_dtoa_r+0x4f6>
 80082b6:	e7ac      	b.n	8008212 <_dtoa_r+0x9ca>
 80082b8:	0801ad68 	.word	0x0801ad68
 80082bc:	0801ae40 	.word	0x0801ae40
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	401c0000 	.word	0x401c0000
 80082c8:	3fe00000 	.word	0x3fe00000
 80082cc:	40240000 	.word	0x40240000
 80082d0:	40140000 	.word	0x40140000
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	f77f ad65 	ble.w	8007da6 <_dtoa_r+0x55e>
 80082dc:	9b08      	ldr	r3, [sp, #32]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d181      	bne.n	80081e6 <_dtoa_r+0x99e>
 80082e2:	4641      	mov	r1, r8
 80082e4:	2205      	movs	r2, #5
 80082e6:	4620      	mov	r0, r4
 80082e8:	f001 fa34 	bl	8009754 <__multadd>
 80082ec:	4680      	mov	r8, r0
 80082ee:	4641      	mov	r1, r8
 80082f0:	4658      	mov	r0, fp
 80082f2:	f001 fc09 	bl	8009b08 <__mcmp>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f77f af75 	ble.w	80081e6 <_dtoa_r+0x99e>
 80082fc:	9a05      	ldr	r2, [sp, #20]
 80082fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008300:	2331      	movs	r3, #49	; 0x31
 8008302:	3201      	adds	r2, #1
 8008304:	9205      	str	r2, [sp, #20]
 8008306:	700b      	strb	r3, [r1, #0]
 8008308:	1c4d      	adds	r5, r1, #1
 800830a:	e770      	b.n	80081ee <_dtoa_r+0x9a6>
 800830c:	9a05      	ldr	r2, [sp, #20]
 800830e:	3201      	adds	r2, #1
 8008310:	9205      	str	r2, [sp, #20]
 8008312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008314:	2331      	movs	r3, #49	; 0x31
 8008316:	7013      	strb	r3, [r2, #0]
 8008318:	e58b      	b.n	8007e32 <_dtoa_r+0x5ea>
 800831a:	f8dd b000 	ldr.w	fp, [sp]
 800831e:	9c03      	ldr	r4, [sp, #12]
 8008320:	e469      	b.n	8007bf6 <_dtoa_r+0x3ae>
 8008322:	4640      	mov	r0, r8
 8008324:	f7f8 f94a 	bl	80005bc <__aeabi_i2d>
 8008328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800832c:	f7f8 f9ac 	bl	8000688 <__aeabi_dmul>
 8008330:	2200      	movs	r2, #0
 8008332:	4bc2      	ldr	r3, [pc, #776]	; (800863c <_dtoa_r+0xdf4>)
 8008334:	f7f7 fff6 	bl	8000324 <__adddf3>
 8008338:	4606      	mov	r6, r0
 800833a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800833e:	2200      	movs	r2, #0
 8008340:	4bbf      	ldr	r3, [pc, #764]	; (8008640 <_dtoa_r+0xdf8>)
 8008342:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008346:	f7f7 ffeb 	bl	8000320 <__aeabi_dsub>
 800834a:	4632      	mov	r2, r6
 800834c:	463b      	mov	r3, r7
 800834e:	4680      	mov	r8, r0
 8008350:	4689      	mov	r9, r1
 8008352:	f7f8 fc29 	bl	8000ba8 <__aeabi_dcmpgt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f040 80b6 	bne.w	80084c8 <_dtoa_r+0xc80>
 800835c:	4632      	mov	r2, r6
 800835e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008362:	4640      	mov	r0, r8
 8008364:	4649      	mov	r1, r9
 8008366:	f7f8 fc01 	bl	8000b6c <__aeabi_dcmplt>
 800836a:	2800      	cmp	r0, #0
 800836c:	d052      	beq.n	8008414 <_dtoa_r+0xbcc>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	4646      	mov	r6, r8
 8008374:	e737      	b.n	80081e6 <_dtoa_r+0x99e>
 8008376:	4659      	mov	r1, fp
 8008378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800837a:	4620      	mov	r0, r4
 800837c:	f001 fb1e 	bl	80099bc <__pow5mult>
 8008380:	4683      	mov	fp, r0
 8008382:	e497      	b.n	8007cb4 <_dtoa_r+0x46c>
 8008384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008388:	970a      	str	r7, [sp, #40]	; 0x28
 800838a:	1afb      	subs	r3, r7, r3
 800838c:	441a      	add	r2, r3
 800838e:	920c      	str	r2, [sp, #48]	; 0x30
 8008390:	2700      	movs	r7, #0
 8008392:	e452      	b.n	8007c3a <_dtoa_r+0x3f2>
 8008394:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008398:	f04f 0802 	mov.w	r8, #2
 800839c:	ed8d 7b00 	vstr	d7, [sp]
 80083a0:	e633      	b.n	800800a <_dtoa_r+0x7c2>
 80083a2:	2501      	movs	r5, #1
 80083a4:	950e      	str	r5, [sp, #56]	; 0x38
 80083a6:	9508      	str	r5, [sp, #32]
 80083a8:	46aa      	mov	sl, r5
 80083aa:	2100      	movs	r1, #0
 80083ac:	6461      	str	r1, [r4, #68]	; 0x44
 80083ae:	e601      	b.n	8007fb4 <_dtoa_r+0x76c>
 80083b0:	461d      	mov	r5, r3
 80083b2:	e7fa      	b.n	80083aa <_dtoa_r+0xb62>
 80083b4:	2a00      	cmp	r2, #0
 80083b6:	dd15      	ble.n	80083e4 <_dtoa_r+0xb9c>
 80083b8:	4659      	mov	r1, fp
 80083ba:	2201      	movs	r2, #1
 80083bc:	4620      	mov	r0, r4
 80083be:	f8cd c000 	str.w	ip, [sp]
 80083c2:	f001 fb4b 	bl	8009a5c <__lshift>
 80083c6:	4641      	mov	r1, r8
 80083c8:	4683      	mov	fp, r0
 80083ca:	f001 fb9d 	bl	8009b08 <__mcmp>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f8dd c000 	ldr.w	ip, [sp]
 80083d4:	f340 8154 	ble.w	8008680 <_dtoa_r+0xe38>
 80083d8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80083dc:	f000 8111 	beq.w	8008602 <_dtoa_r+0xdba>
 80083e0:	f10c 0c01 	add.w	ip, ip, #1
 80083e4:	46b2      	mov	sl, r6
 80083e6:	f887 c000 	strb.w	ip, [r7]
 80083ea:	1c7d      	adds	r5, r7, #1
 80083ec:	464e      	mov	r6, r9
 80083ee:	e520      	b.n	8007e32 <_dtoa_r+0x5ea>
 80083f0:	d104      	bne.n	80083fc <_dtoa_r+0xbb4>
 80083f2:	f01c 0f01 	tst.w	ip, #1
 80083f6:	d001      	beq.n	80083fc <_dtoa_r+0xbb4>
 80083f8:	e50b      	b.n	8007e12 <_dtoa_r+0x5ca>
 80083fa:	4615      	mov	r5, r2
 80083fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008400:	2b30      	cmp	r3, #48	; 0x30
 8008402:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008406:	d0f8      	beq.n	80083fa <_dtoa_r+0xbb2>
 8008408:	e513      	b.n	8007e32 <_dtoa_r+0x5ea>
 800840a:	f8dd b000 	ldr.w	fp, [sp]
 800840e:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8008412:	4644      	mov	r4, r8
 8008414:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008418:	e9cd 2300 	strd	r2, r3, [sp]
 800841c:	f7ff bb27 	b.w	8007a6e <_dtoa_r+0x226>
 8008420:	9b05      	ldr	r3, [sp, #20]
 8008422:	425d      	negs	r5, r3
 8008424:	2d00      	cmp	r5, #0
 8008426:	f000 80bd 	beq.w	80085a4 <_dtoa_r+0xd5c>
 800842a:	4b86      	ldr	r3, [pc, #536]	; (8008644 <_dtoa_r+0xdfc>)
 800842c:	f005 020f 	and.w	r2, r5, #15
 8008430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800843c:	f7f8 f924 	bl	8000688 <__aeabi_dmul>
 8008440:	112d      	asrs	r5, r5, #4
 8008442:	e9cd 0100 	strd	r0, r1, [sp]
 8008446:	f000 8127 	beq.w	8008698 <_dtoa_r+0xe50>
 800844a:	4e7f      	ldr	r6, [pc, #508]	; (8008648 <_dtoa_r+0xe00>)
 800844c:	f04f 0802 	mov.w	r8, #2
 8008450:	07eb      	lsls	r3, r5, #31
 8008452:	d505      	bpl.n	8008460 <_dtoa_r+0xc18>
 8008454:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008458:	f7f8 f916 	bl	8000688 <__aeabi_dmul>
 800845c:	f108 0801 	add.w	r8, r8, #1
 8008460:	106d      	asrs	r5, r5, #1
 8008462:	f106 0608 	add.w	r6, r6, #8
 8008466:	d1f3      	bne.n	8008450 <_dtoa_r+0xc08>
 8008468:	e9cd 0100 	strd	r0, r1, [sp]
 800846c:	e5e8      	b.n	8008040 <_dtoa_r+0x7f8>
 800846e:	9a05      	ldr	r2, [sp, #20]
 8008470:	3201      	adds	r2, #1
 8008472:	9205      	str	r2, [sp, #20]
 8008474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008476:	2330      	movs	r3, #48	; 0x30
 8008478:	7013      	strb	r3, [r2, #0]
 800847a:	2331      	movs	r3, #49	; 0x31
 800847c:	7013      	strb	r3, [r2, #0]
 800847e:	f7ff bbba 	b.w	8007bf6 <_dtoa_r+0x3ae>
 8008482:	6871      	ldr	r1, [r6, #4]
 8008484:	4620      	mov	r0, r4
 8008486:	f001 f935 	bl	80096f4 <_Balloc>
 800848a:	6933      	ldr	r3, [r6, #16]
 800848c:	1c9a      	adds	r2, r3, #2
 800848e:	4605      	mov	r5, r0
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	f106 010c 	add.w	r1, r6, #12
 8008496:	300c      	adds	r0, #12
 8008498:	f7f7 fea4 	bl	80001e4 <memcpy>
 800849c:	4620      	mov	r0, r4
 800849e:	4629      	mov	r1, r5
 80084a0:	2201      	movs	r2, #1
 80084a2:	f001 fadb 	bl	8009a5c <__lshift>
 80084a6:	4681      	mov	r9, r0
 80084a8:	e4ff      	b.n	8007eaa <_dtoa_r+0x662>
 80084aa:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80084ae:	f000 80a8 	beq.w	8008602 <_dtoa_r+0xdba>
 80084b2:	f10c 0c01 	add.w	ip, ip, #1
 80084b6:	46b2      	mov	sl, r6
 80084b8:	f887 c000 	strb.w	ip, [r7]
 80084bc:	1c7d      	adds	r5, r7, #1
 80084be:	464e      	mov	r6, r9
 80084c0:	e4b7      	b.n	8007e32 <_dtoa_r+0x5ea>
 80084c2:	46b2      	mov	sl, r6
 80084c4:	464e      	mov	r6, r9
 80084c6:	e494      	b.n	8007df2 <_dtoa_r+0x5aa>
 80084c8:	f04f 0800 	mov.w	r8, #0
 80084cc:	4646      	mov	r6, r8
 80084ce:	e715      	b.n	80082fc <_dtoa_r+0xab4>
 80084d0:	495c      	ldr	r1, [pc, #368]	; (8008644 <_dtoa_r+0xdfc>)
 80084d2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80084d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084da:	4632      	mov	r2, r6
 80084dc:	9315      	str	r3, [sp, #84]	; 0x54
 80084de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084e2:	463b      	mov	r3, r7
 80084e4:	f7f8 f8d0 	bl	8000688 <__aeabi_dmul>
 80084e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084ec:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80084f0:	4639      	mov	r1, r7
 80084f2:	4630      	mov	r0, r6
 80084f4:	f7f8 fb62 	bl	8000bbc <__aeabi_d2iz>
 80084f8:	4605      	mov	r5, r0
 80084fa:	f7f8 f85f 	bl	80005bc <__aeabi_i2d>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4630      	mov	r0, r6
 8008504:	4639      	mov	r1, r7
 8008506:	f7f7 ff0b 	bl	8000320 <__aeabi_dsub>
 800850a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800850c:	3530      	adds	r5, #48	; 0x30
 800850e:	f1b9 0f01 	cmp.w	r9, #1
 8008512:	7015      	strb	r5, [r2, #0]
 8008514:	4606      	mov	r6, r0
 8008516:	460f      	mov	r7, r1
 8008518:	f102 0501 	add.w	r5, r2, #1
 800851c:	d023      	beq.n	8008566 <_dtoa_r+0xd1e>
 800851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008520:	f8cd b000 	str.w	fp, [sp]
 8008524:	444b      	add	r3, r9
 8008526:	4698      	mov	r8, r3
 8008528:	46a9      	mov	r9, r5
 800852a:	46ab      	mov	fp, r5
 800852c:	2200      	movs	r2, #0
 800852e:	4b47      	ldr	r3, [pc, #284]	; (800864c <_dtoa_r+0xe04>)
 8008530:	f7f8 f8aa 	bl	8000688 <__aeabi_dmul>
 8008534:	460f      	mov	r7, r1
 8008536:	4606      	mov	r6, r0
 8008538:	f7f8 fb40 	bl	8000bbc <__aeabi_d2iz>
 800853c:	4605      	mov	r5, r0
 800853e:	f7f8 f83d 	bl	80005bc <__aeabi_i2d>
 8008542:	3530      	adds	r5, #48	; 0x30
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4630      	mov	r0, r6
 800854a:	4639      	mov	r1, r7
 800854c:	f7f7 fee8 	bl	8000320 <__aeabi_dsub>
 8008550:	f809 5b01 	strb.w	r5, [r9], #1
 8008554:	45c1      	cmp	r9, r8
 8008556:	d1e9      	bne.n	800852c <_dtoa_r+0xce4>
 8008558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800855a:	465d      	mov	r5, fp
 800855c:	f8dd b000 	ldr.w	fp, [sp]
 8008560:	4606      	mov	r6, r0
 8008562:	460f      	mov	r7, r1
 8008564:	441d      	add	r5, r3
 8008566:	2200      	movs	r2, #0
 8008568:	4b39      	ldr	r3, [pc, #228]	; (8008650 <_dtoa_r+0xe08>)
 800856a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800856e:	f7f7 fed9 	bl	8000324 <__adddf3>
 8008572:	4632      	mov	r2, r6
 8008574:	463b      	mov	r3, r7
 8008576:	f7f8 faf9 	bl	8000b6c <__aeabi_dcmplt>
 800857a:	2800      	cmp	r0, #0
 800857c:	d047      	beq.n	800860e <_dtoa_r+0xdc6>
 800857e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8008586:	f7ff bb24 	b.w	8007bd2 <_dtoa_r+0x38a>
 800858a:	9b07      	ldr	r3, [sp, #28]
 800858c:	9a08      	ldr	r2, [sp, #32]
 800858e:	1a9d      	subs	r5, r3, r2
 8008590:	2300      	movs	r3, #0
 8008592:	f7ff bb58 	b.w	8007c46 <_dtoa_r+0x3fe>
 8008596:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008598:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800859a:	9d07      	ldr	r5, [sp, #28]
 800859c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085a0:	f7ff bb51 	b.w	8007c46 <_dtoa_r+0x3fe>
 80085a4:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80085a8:	f04f 0802 	mov.w	r8, #2
 80085ac:	ed8d 7b00 	vstr	d7, [sp]
 80085b0:	e546      	b.n	8008040 <_dtoa_r+0x7f8>
 80085b2:	9b08      	ldr	r3, [sp, #32]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f43f aeb4 	beq.w	8008322 <_dtoa_r+0xada>
 80085ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80085bc:	2d00      	cmp	r5, #0
 80085be:	f77f af29 	ble.w	8008414 <_dtoa_r+0xbcc>
 80085c2:	2200      	movs	r2, #0
 80085c4:	4b21      	ldr	r3, [pc, #132]	; (800864c <_dtoa_r+0xe04>)
 80085c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085ca:	f7f8 f85d 	bl	8000688 <__aeabi_dmul>
 80085ce:	4606      	mov	r6, r0
 80085d0:	460f      	mov	r7, r1
 80085d2:	f108 0001 	add.w	r0, r8, #1
 80085d6:	e9cd 6700 	strd	r6, r7, [sp]
 80085da:	f7f7 ffef 	bl	80005bc <__aeabi_i2d>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4630      	mov	r0, r6
 80085e4:	4639      	mov	r1, r7
 80085e6:	f7f8 f84f 	bl	8000688 <__aeabi_dmul>
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <_dtoa_r+0xdf4>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	f7f7 fe99 	bl	8000324 <__adddf3>
 80085f2:	9b05      	ldr	r3, [sp, #20]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4606      	mov	r6, r0
 80085f8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80085fc:	9314      	str	r3, [sp, #80]	; 0x50
 80085fe:	46a9      	mov	r9, r5
 8008600:	e53f      	b.n	8008082 <_dtoa_r+0x83a>
 8008602:	2239      	movs	r2, #57	; 0x39
 8008604:	46b2      	mov	sl, r6
 8008606:	703a      	strb	r2, [r7, #0]
 8008608:	464e      	mov	r6, r9
 800860a:	1c7d      	adds	r5, r7, #1
 800860c:	e403      	b.n	8007e16 <_dtoa_r+0x5ce>
 800860e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008612:	2000      	movs	r0, #0
 8008614:	490e      	ldr	r1, [pc, #56]	; (8008650 <_dtoa_r+0xe08>)
 8008616:	f7f7 fe83 	bl	8000320 <__aeabi_dsub>
 800861a:	4632      	mov	r2, r6
 800861c:	463b      	mov	r3, r7
 800861e:	f7f8 fac3 	bl	8000ba8 <__aeabi_dcmpgt>
 8008622:	b908      	cbnz	r0, 8008628 <_dtoa_r+0xde0>
 8008624:	e6f6      	b.n	8008414 <_dtoa_r+0xbcc>
 8008626:	4615      	mov	r5, r2
 8008628:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800862c:	2b30      	cmp	r3, #48	; 0x30
 800862e:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008632:	d0f8      	beq.n	8008626 <_dtoa_r+0xdde>
 8008634:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008636:	9305      	str	r3, [sp, #20]
 8008638:	f7ff badd 	b.w	8007bf6 <_dtoa_r+0x3ae>
 800863c:	401c0000 	.word	0x401c0000
 8008640:	40140000 	.word	0x40140000
 8008644:	0801ad68 	.word	0x0801ad68
 8008648:	0801ae40 	.word	0x0801ae40
 800864c:	40240000 	.word	0x40240000
 8008650:	3fe00000 	.word	0x3fe00000
 8008654:	4643      	mov	r3, r8
 8008656:	f8dd b000 	ldr.w	fp, [sp]
 800865a:	46a0      	mov	r8, r4
 800865c:	461c      	mov	r4, r3
 800865e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	f7ff bab6 	b.w	8007bd2 <_dtoa_r+0x38a>
 8008666:	46b9      	mov	r9, r7
 8008668:	f7ff bb6b 	b.w	8007d42 <_dtoa_r+0x4fa>
 800866c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008670:	d0c7      	beq.n	8008602 <_dtoa_r+0xdba>
 8008672:	f1ba 0f00 	cmp.w	sl, #0
 8008676:	f77f aeb5 	ble.w	80083e4 <_dtoa_r+0xb9c>
 800867a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 800867e:	e6b1      	b.n	80083e4 <_dtoa_r+0xb9c>
 8008680:	f47f aeb0 	bne.w	80083e4 <_dtoa_r+0xb9c>
 8008684:	f01c 0f01 	tst.w	ip, #1
 8008688:	f43f aeac 	beq.w	80083e4 <_dtoa_r+0xb9c>
 800868c:	e6a4      	b.n	80083d8 <_dtoa_r+0xb90>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	2b02      	cmp	r3, #2
 8008692:	dc04      	bgt.n	800869e <_dtoa_r+0xe56>
 8008694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008696:	e605      	b.n	80082a4 <_dtoa_r+0xa5c>
 8008698:	f04f 0802 	mov.w	r8, #2
 800869c:	e4d0      	b.n	8008040 <_dtoa_r+0x7f8>
 800869e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086a0:	9308      	str	r3, [sp, #32]
 80086a2:	e61b      	b.n	80082dc <_dtoa_r+0xa94>
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	dcf9      	bgt.n	800869e <_dtoa_r+0xe56>
 80086aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ac:	f7ff bbef 	b.w	8007e8e <_dtoa_r+0x646>
 80086b0:	2500      	movs	r5, #0
 80086b2:	6465      	str	r5, [r4, #68]	; 0x44
 80086b4:	4629      	mov	r1, r5
 80086b6:	4620      	mov	r0, r4
 80086b8:	f001 f81c 	bl	80096f4 <_Balloc>
 80086bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086c0:	9308      	str	r3, [sp, #32]
 80086c2:	930e      	str	r3, [sp, #56]	; 0x38
 80086c4:	2301      	movs	r3, #1
 80086c6:	9009      	str	r0, [sp, #36]	; 0x24
 80086c8:	46aa      	mov	sl, r5
 80086ca:	6420      	str	r0, [r4, #64]	; 0x40
 80086cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ce:	f7ff b9ce 	b.w	8007a6e <_dtoa_r+0x226>
 80086d2:	f43f ab4e 	beq.w	8007d72 <_dtoa_r+0x52a>
 80086d6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80086da:	f7ff bb43 	b.w	8007d64 <_dtoa_r+0x51c>
 80086de:	2301      	movs	r3, #1
 80086e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086e2:	e55c      	b.n	800819e <_dtoa_r+0x956>
 80086e4:	2701      	movs	r7, #1
 80086e6:	f7ff b98d 	b.w	8007a04 <_dtoa_r+0x1bc>
 80086ea:	bf00      	nop

080086ec <__sflush_r>:
 80086ec:	898b      	ldrh	r3, [r1, #12]
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	460d      	mov	r5, r1
 80086f6:	0711      	lsls	r1, r2, #28
 80086f8:	4680      	mov	r8, r0
 80086fa:	d43c      	bmi.n	8008776 <__sflush_r+0x8a>
 80086fc:	686a      	ldr	r2, [r5, #4]
 80086fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008702:	2a00      	cmp	r2, #0
 8008704:	81ab      	strh	r3, [r5, #12]
 8008706:	dd65      	ble.n	80087d4 <__sflush_r+0xe8>
 8008708:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800870a:	2e00      	cmp	r6, #0
 800870c:	d04b      	beq.n	80087a6 <__sflush_r+0xba>
 800870e:	b29b      	uxth	r3, r3
 8008710:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008714:	2100      	movs	r1, #0
 8008716:	b292      	uxth	r2, r2
 8008718:	f8d8 4000 	ldr.w	r4, [r8]
 800871c:	f8c8 1000 	str.w	r1, [r8]
 8008720:	2a00      	cmp	r2, #0
 8008722:	d05b      	beq.n	80087dc <__sflush_r+0xf0>
 8008724:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8008726:	075f      	lsls	r7, r3, #29
 8008728:	d505      	bpl.n	8008736 <__sflush_r+0x4a>
 800872a:	6869      	ldr	r1, [r5, #4]
 800872c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800872e:	1a52      	subs	r2, r2, r1
 8008730:	b10b      	cbz	r3, 8008736 <__sflush_r+0x4a>
 8008732:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008734:	1ad2      	subs	r2, r2, r3
 8008736:	4640      	mov	r0, r8
 8008738:	69e9      	ldr	r1, [r5, #28]
 800873a:	2300      	movs	r3, #0
 800873c:	47b0      	blx	r6
 800873e:	1c46      	adds	r6, r0, #1
 8008740:	d056      	beq.n	80087f0 <__sflush_r+0x104>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	692a      	ldr	r2, [r5, #16]
 8008746:	602a      	str	r2, [r5, #0]
 8008748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800874c:	b29b      	uxth	r3, r3
 800874e:	2200      	movs	r2, #0
 8008750:	606a      	str	r2, [r5, #4]
 8008752:	04da      	lsls	r2, r3, #19
 8008754:	81ab      	strh	r3, [r5, #12]
 8008756:	d43b      	bmi.n	80087d0 <__sflush_r+0xe4>
 8008758:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800875a:	f8c8 4000 	str.w	r4, [r8]
 800875e:	b311      	cbz	r1, 80087a6 <__sflush_r+0xba>
 8008760:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008764:	4299      	cmp	r1, r3
 8008766:	d002      	beq.n	800876e <__sflush_r+0x82>
 8008768:	4640      	mov	r0, r8
 800876a:	f000 f96b 	bl	8008a44 <_free_r>
 800876e:	2000      	movs	r0, #0
 8008770:	6328      	str	r0, [r5, #48]	; 0x30
 8008772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008776:	692e      	ldr	r6, [r5, #16]
 8008778:	b1ae      	cbz	r6, 80087a6 <__sflush_r+0xba>
 800877a:	682c      	ldr	r4, [r5, #0]
 800877c:	602e      	str	r6, [r5, #0]
 800877e:	0791      	lsls	r1, r2, #30
 8008780:	bf0c      	ite	eq
 8008782:	696b      	ldreq	r3, [r5, #20]
 8008784:	2300      	movne	r3, #0
 8008786:	1ba4      	subs	r4, r4, r6
 8008788:	60ab      	str	r3, [r5, #8]
 800878a:	e00a      	b.n	80087a2 <__sflush_r+0xb6>
 800878c:	4632      	mov	r2, r6
 800878e:	4623      	mov	r3, r4
 8008790:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008792:	69e9      	ldr	r1, [r5, #28]
 8008794:	4640      	mov	r0, r8
 8008796:	47b8      	blx	r7
 8008798:	2800      	cmp	r0, #0
 800879a:	eba4 0400 	sub.w	r4, r4, r0
 800879e:	4406      	add	r6, r0
 80087a0:	dd04      	ble.n	80087ac <__sflush_r+0xc0>
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	dcf2      	bgt.n	800878c <__sflush_r+0xa0>
 80087a6:	2000      	movs	r0, #0
 80087a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ac:	89ab      	ldrh	r3, [r5, #12]
 80087ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b2:	81ab      	strh	r3, [r5, #12]
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087bc:	89ab      	ldrh	r3, [r5, #12]
 80087be:	692a      	ldr	r2, [r5, #16]
 80087c0:	6069      	str	r1, [r5, #4]
 80087c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	81ab      	strh	r3, [r5, #12]
 80087ca:	04db      	lsls	r3, r3, #19
 80087cc:	602a      	str	r2, [r5, #0]
 80087ce:	d5c3      	bpl.n	8008758 <__sflush_r+0x6c>
 80087d0:	6528      	str	r0, [r5, #80]	; 0x50
 80087d2:	e7c1      	b.n	8008758 <__sflush_r+0x6c>
 80087d4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	dc96      	bgt.n	8008708 <__sflush_r+0x1c>
 80087da:	e7e4      	b.n	80087a6 <__sflush_r+0xba>
 80087dc:	2301      	movs	r3, #1
 80087de:	4640      	mov	r0, r8
 80087e0:	69e9      	ldr	r1, [r5, #28]
 80087e2:	47b0      	blx	r6
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	4602      	mov	r2, r0
 80087e8:	d019      	beq.n	800881e <__sflush_r+0x132>
 80087ea:	89ab      	ldrh	r3, [r5, #12]
 80087ec:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80087ee:	e79a      	b.n	8008726 <__sflush_r+0x3a>
 80087f0:	f8d8 1000 	ldr.w	r1, [r8]
 80087f4:	2900      	cmp	r1, #0
 80087f6:	d0e1      	beq.n	80087bc <__sflush_r+0xd0>
 80087f8:	291d      	cmp	r1, #29
 80087fa:	d007      	beq.n	800880c <__sflush_r+0x120>
 80087fc:	2916      	cmp	r1, #22
 80087fe:	d005      	beq.n	800880c <__sflush_r+0x120>
 8008800:	89ab      	ldrh	r3, [r5, #12]
 8008802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008806:	81ab      	strh	r3, [r5, #12]
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880c:	89ab      	ldrh	r3, [r5, #12]
 800880e:	692a      	ldr	r2, [r5, #16]
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008816:	2200      	movs	r2, #0
 8008818:	81ab      	strh	r3, [r5, #12]
 800881a:	606a      	str	r2, [r5, #4]
 800881c:	e79c      	b.n	8008758 <__sflush_r+0x6c>
 800881e:	f8d8 3000 	ldr.w	r3, [r8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0e1      	beq.n	80087ea <__sflush_r+0xfe>
 8008826:	2b1d      	cmp	r3, #29
 8008828:	d007      	beq.n	800883a <__sflush_r+0x14e>
 800882a:	2b16      	cmp	r3, #22
 800882c:	d005      	beq.n	800883a <__sflush_r+0x14e>
 800882e:	89ab      	ldrh	r3, [r5, #12]
 8008830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008834:	81ab      	strh	r3, [r5, #12]
 8008836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800883a:	f8c8 4000 	str.w	r4, [r8]
 800883e:	e7b2      	b.n	80087a6 <__sflush_r+0xba>

08008840 <_fflush_r>:
 8008840:	b510      	push	{r4, lr}
 8008842:	4604      	mov	r4, r0
 8008844:	b082      	sub	sp, #8
 8008846:	b108      	cbz	r0, 800884c <_fflush_r+0xc>
 8008848:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800884a:	b153      	cbz	r3, 8008862 <_fflush_r+0x22>
 800884c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8008850:	b908      	cbnz	r0, 8008856 <_fflush_r+0x16>
 8008852:	b002      	add	sp, #8
 8008854:	bd10      	pop	{r4, pc}
 8008856:	4620      	mov	r0, r4
 8008858:	b002      	add	sp, #8
 800885a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800885e:	f7ff bf45 	b.w	80086ec <__sflush_r>
 8008862:	9101      	str	r1, [sp, #4]
 8008864:	f000 f880 	bl	8008968 <__sinit>
 8008868:	9901      	ldr	r1, [sp, #4]
 800886a:	e7ef      	b.n	800884c <_fflush_r+0xc>

0800886c <_cleanup_r>:
 800886c:	4901      	ldr	r1, [pc, #4]	; (8008874 <_cleanup_r+0x8>)
 800886e:	f000 bb4d 	b.w	8008f0c <_fwalk_reent>
 8008872:	bf00      	nop
 8008874:	0800a441 	.word	0x0800a441

08008878 <__sinit.part.1>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	4b35      	ldr	r3, [pc, #212]	; (8008954 <__sinit.part.1+0xdc>)
 800887e:	6845      	ldr	r5, [r0, #4]
 8008880:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008882:	2400      	movs	r4, #0
 8008884:	4607      	mov	r7, r0
 8008886:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800888a:	2304      	movs	r3, #4
 800888c:	2103      	movs	r1, #3
 800888e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8008892:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8008896:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800889a:	b083      	sub	sp, #12
 800889c:	602c      	str	r4, [r5, #0]
 800889e:	606c      	str	r4, [r5, #4]
 80088a0:	60ac      	str	r4, [r5, #8]
 80088a2:	666c      	str	r4, [r5, #100]	; 0x64
 80088a4:	81ec      	strh	r4, [r5, #14]
 80088a6:	612c      	str	r4, [r5, #16]
 80088a8:	616c      	str	r4, [r5, #20]
 80088aa:	61ac      	str	r4, [r5, #24]
 80088ac:	81ab      	strh	r3, [r5, #12]
 80088ae:	4621      	mov	r1, r4
 80088b0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80088b4:	2208      	movs	r2, #8
 80088b6:	f7fd f9c5 	bl	8005c44 <memset>
 80088ba:	68be      	ldr	r6, [r7, #8]
 80088bc:	f8df b098 	ldr.w	fp, [pc, #152]	; 8008958 <__sinit.part.1+0xe0>
 80088c0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800895c <__sinit.part.1+0xe4>
 80088c4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8008960 <__sinit.part.1+0xe8>
 80088c8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008964 <__sinit.part.1+0xec>
 80088cc:	f8c5 b020 	str.w	fp, [r5, #32]
 80088d0:	2301      	movs	r3, #1
 80088d2:	2209      	movs	r2, #9
 80088d4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80088d8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80088dc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80088e0:	61ed      	str	r5, [r5, #28]
 80088e2:	4621      	mov	r1, r4
 80088e4:	81f3      	strh	r3, [r6, #14]
 80088e6:	81b2      	strh	r2, [r6, #12]
 80088e8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80088ec:	6034      	str	r4, [r6, #0]
 80088ee:	6074      	str	r4, [r6, #4]
 80088f0:	60b4      	str	r4, [r6, #8]
 80088f2:	6674      	str	r4, [r6, #100]	; 0x64
 80088f4:	6134      	str	r4, [r6, #16]
 80088f6:	6174      	str	r4, [r6, #20]
 80088f8:	61b4      	str	r4, [r6, #24]
 80088fa:	2208      	movs	r2, #8
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	f7fd f9a1 	bl	8005c44 <memset>
 8008902:	68fd      	ldr	r5, [r7, #12]
 8008904:	61f6      	str	r6, [r6, #28]
 8008906:	2012      	movs	r0, #18
 8008908:	2202      	movs	r2, #2
 800890a:	f8c6 b020 	str.w	fp, [r6, #32]
 800890e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8008912:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8008916:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800891a:	4621      	mov	r1, r4
 800891c:	81a8      	strh	r0, [r5, #12]
 800891e:	81ea      	strh	r2, [r5, #14]
 8008920:	602c      	str	r4, [r5, #0]
 8008922:	606c      	str	r4, [r5, #4]
 8008924:	60ac      	str	r4, [r5, #8]
 8008926:	666c      	str	r4, [r5, #100]	; 0x64
 8008928:	612c      	str	r4, [r5, #16]
 800892a:	616c      	str	r4, [r5, #20]
 800892c:	61ac      	str	r4, [r5, #24]
 800892e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008932:	2208      	movs	r2, #8
 8008934:	f7fd f986 	bl	8005c44 <memset>
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	61ed      	str	r5, [r5, #28]
 800893c:	f8c5 b020 	str.w	fp, [r5, #32]
 8008940:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008944:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008948:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
 800894e:	b003      	add	sp, #12
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008954:	0800886d 	.word	0x0800886d
 8008958:	0800a181 	.word	0x0800a181
 800895c:	0800a1a5 	.word	0x0800a1a5
 8008960:	0800a1dd 	.word	0x0800a1dd
 8008964:	0800a1fd 	.word	0x0800a1fd

08008968 <__sinit>:
 8008968:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800896a:	b103      	cbz	r3, 800896e <__sinit+0x6>
 800896c:	4770      	bx	lr
 800896e:	f7ff bf83 	b.w	8008878 <__sinit.part.1>
 8008972:	bf00      	nop

08008974 <__sfp_lock_acquire>:
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <__sfp_lock_release>:
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <__libc_fini_array>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4b08      	ldr	r3, [pc, #32]	; (80089a0 <__libc_fini_array+0x24>)
 8008980:	4d08      	ldr	r5, [pc, #32]	; (80089a4 <__libc_fini_array+0x28>)
 8008982:	1aed      	subs	r5, r5, r3
 8008984:	10ac      	asrs	r4, r5, #2
 8008986:	bf18      	it	ne
 8008988:	18ed      	addne	r5, r5, r3
 800898a:	d005      	beq.n	8008998 <__libc_fini_array+0x1c>
 800898c:	3c01      	subs	r4, #1
 800898e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008992:	4798      	blx	r3
 8008994:	2c00      	cmp	r4, #0
 8008996:	d1f9      	bne.n	800898c <__libc_fini_array+0x10>
 8008998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800899c:	f001 be3a 	b.w	800a614 <_fini>
 80089a0:	0801ae78 	.word	0x0801ae78
 80089a4:	0801ae7c 	.word	0x0801ae7c

080089a8 <_malloc_trim_r>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	4f23      	ldr	r7, [pc, #140]	; (8008a38 <_malloc_trim_r+0x90>)
 80089ac:	460c      	mov	r4, r1
 80089ae:	4606      	mov	r6, r0
 80089b0:	f000 fe9c 	bl	80096ec <__malloc_lock>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	685d      	ldr	r5, [r3, #4]
 80089b8:	f025 0503 	bic.w	r5, r5, #3
 80089bc:	1b29      	subs	r1, r5, r4
 80089be:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80089c2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80089c6:	f021 010f 	bic.w	r1, r1, #15
 80089ca:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80089ce:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80089d2:	db07      	blt.n	80089e4 <_malloc_trim_r+0x3c>
 80089d4:	4630      	mov	r0, r6
 80089d6:	2100      	movs	r1, #0
 80089d8:	f7f8 ff8e 	bl	80018f8 <_sbrk_r>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	442b      	add	r3, r5
 80089e0:	4298      	cmp	r0, r3
 80089e2:	d004      	beq.n	80089ee <_malloc_trim_r+0x46>
 80089e4:	4630      	mov	r0, r6
 80089e6:	f000 fe83 	bl	80096f0 <__malloc_unlock>
 80089ea:	2000      	movs	r0, #0
 80089ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ee:	4630      	mov	r0, r6
 80089f0:	4261      	negs	r1, r4
 80089f2:	f7f8 ff81 	bl	80018f8 <_sbrk_r>
 80089f6:	3001      	adds	r0, #1
 80089f8:	d00d      	beq.n	8008a16 <_malloc_trim_r+0x6e>
 80089fa:	4b10      	ldr	r3, [pc, #64]	; (8008a3c <_malloc_trim_r+0x94>)
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	1b2d      	subs	r5, r5, r4
 8008a02:	f045 0501 	orr.w	r5, r5, #1
 8008a06:	4630      	mov	r0, r6
 8008a08:	1b09      	subs	r1, r1, r4
 8008a0a:	6055      	str	r5, [r2, #4]
 8008a0c:	6019      	str	r1, [r3, #0]
 8008a0e:	f000 fe6f 	bl	80096f0 <__malloc_unlock>
 8008a12:	2001      	movs	r0, #1
 8008a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a16:	4630      	mov	r0, r6
 8008a18:	2100      	movs	r1, #0
 8008a1a:	f7f8 ff6d 	bl	80018f8 <_sbrk_r>
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	1a83      	subs	r3, r0, r2
 8008a22:	2b0f      	cmp	r3, #15
 8008a24:	ddde      	ble.n	80089e4 <_malloc_trim_r+0x3c>
 8008a26:	4c06      	ldr	r4, [pc, #24]	; (8008a40 <_malloc_trim_r+0x98>)
 8008a28:	4904      	ldr	r1, [pc, #16]	; (8008a3c <_malloc_trim_r+0x94>)
 8008a2a:	6824      	ldr	r4, [r4, #0]
 8008a2c:	f043 0301 	orr.w	r3, r3, #1
 8008a30:	1b00      	subs	r0, r0, r4
 8008a32:	6053      	str	r3, [r2, #4]
 8008a34:	6008      	str	r0, [r1, #0]
 8008a36:	e7d5      	b.n	80089e4 <_malloc_trim_r+0x3c>
 8008a38:	20000688 	.word	0x20000688
 8008a3c:	20000ed0 	.word	0x20000ed0
 8008a40:	20000a94 	.word	0x20000a94

08008a44 <_free_r>:
 8008a44:	2900      	cmp	r1, #0
 8008a46:	d04e      	beq.n	8008ae6 <_free_r+0xa2>
 8008a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	4680      	mov	r8, r0
 8008a50:	f000 fe4c 	bl	80096ec <__malloc_lock>
 8008a54:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8008a58:	4962      	ldr	r1, [pc, #392]	; (8008be4 <_free_r+0x1a0>)
 8008a5a:	f027 0201 	bic.w	r2, r7, #1
 8008a5e:	f1a4 0508 	sub.w	r5, r4, #8
 8008a62:	18ab      	adds	r3, r5, r2
 8008a64:	688e      	ldr	r6, [r1, #8]
 8008a66:	6858      	ldr	r0, [r3, #4]
 8008a68:	429e      	cmp	r6, r3
 8008a6a:	f020 0003 	bic.w	r0, r0, #3
 8008a6e:	d05a      	beq.n	8008b26 <_free_r+0xe2>
 8008a70:	07fe      	lsls	r6, r7, #31
 8008a72:	6058      	str	r0, [r3, #4]
 8008a74:	d40b      	bmi.n	8008a8e <_free_r+0x4a>
 8008a76:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8008a7a:	1bed      	subs	r5, r5, r7
 8008a7c:	f101 0e08 	add.w	lr, r1, #8
 8008a80:	68ac      	ldr	r4, [r5, #8]
 8008a82:	4574      	cmp	r4, lr
 8008a84:	443a      	add	r2, r7
 8008a86:	d067      	beq.n	8008b58 <_free_r+0x114>
 8008a88:	68ef      	ldr	r7, [r5, #12]
 8008a8a:	60e7      	str	r7, [r4, #12]
 8008a8c:	60bc      	str	r4, [r7, #8]
 8008a8e:	181c      	adds	r4, r3, r0
 8008a90:	6864      	ldr	r4, [r4, #4]
 8008a92:	07e4      	lsls	r4, r4, #31
 8008a94:	d40c      	bmi.n	8008ab0 <_free_r+0x6c>
 8008a96:	4f54      	ldr	r7, [pc, #336]	; (8008be8 <_free_r+0x1a4>)
 8008a98:	689c      	ldr	r4, [r3, #8]
 8008a9a:	42bc      	cmp	r4, r7
 8008a9c:	4402      	add	r2, r0
 8008a9e:	d07c      	beq.n	8008b9a <_free_r+0x156>
 8008aa0:	68d8      	ldr	r0, [r3, #12]
 8008aa2:	60e0      	str	r0, [r4, #12]
 8008aa4:	f042 0301 	orr.w	r3, r2, #1
 8008aa8:	6084      	str	r4, [r0, #8]
 8008aaa:	606b      	str	r3, [r5, #4]
 8008aac:	50aa      	str	r2, [r5, r2]
 8008aae:	e003      	b.n	8008ab8 <_free_r+0x74>
 8008ab0:	f042 0301 	orr.w	r3, r2, #1
 8008ab4:	606b      	str	r3, [r5, #4]
 8008ab6:	50aa      	str	r2, [r5, r2]
 8008ab8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8008abc:	d214      	bcs.n	8008ae8 <_free_r+0xa4>
 8008abe:	08d2      	lsrs	r2, r2, #3
 8008ac0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8008ac4:	6848      	ldr	r0, [r1, #4]
 8008ac6:	689f      	ldr	r7, [r3, #8]
 8008ac8:	60af      	str	r7, [r5, #8]
 8008aca:	1092      	asrs	r2, r2, #2
 8008acc:	2401      	movs	r4, #1
 8008ace:	fa04 f202 	lsl.w	r2, r4, r2
 8008ad2:	4310      	orrs	r0, r2
 8008ad4:	60eb      	str	r3, [r5, #12]
 8008ad6:	6048      	str	r0, [r1, #4]
 8008ad8:	609d      	str	r5, [r3, #8]
 8008ada:	60fd      	str	r5, [r7, #12]
 8008adc:	4640      	mov	r0, r8
 8008ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	f000 be05 	b.w	80096f0 <__malloc_unlock>
 8008ae6:	4770      	bx	lr
 8008ae8:	0a53      	lsrs	r3, r2, #9
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d847      	bhi.n	8008b7e <_free_r+0x13a>
 8008aee:	0993      	lsrs	r3, r2, #6
 8008af0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8008af4:	0060      	lsls	r0, r4, #1
 8008af6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8008afa:	493a      	ldr	r1, [pc, #232]	; (8008be4 <_free_r+0x1a0>)
 8008afc:	6883      	ldr	r3, [r0, #8]
 8008afe:	4283      	cmp	r3, r0
 8008b00:	d043      	beq.n	8008b8a <_free_r+0x146>
 8008b02:	6859      	ldr	r1, [r3, #4]
 8008b04:	f021 0103 	bic.w	r1, r1, #3
 8008b08:	4291      	cmp	r1, r2
 8008b0a:	d902      	bls.n	8008b12 <_free_r+0xce>
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	4298      	cmp	r0, r3
 8008b10:	d1f7      	bne.n	8008b02 <_free_r+0xbe>
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	60ea      	str	r2, [r5, #12]
 8008b16:	60ab      	str	r3, [r5, #8]
 8008b18:	4640      	mov	r0, r8
 8008b1a:	6095      	str	r5, [r2, #8]
 8008b1c:	60dd      	str	r5, [r3, #12]
 8008b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b22:	f000 bde5 	b.w	80096f0 <__malloc_unlock>
 8008b26:	07ff      	lsls	r7, r7, #31
 8008b28:	4402      	add	r2, r0
 8008b2a:	d407      	bmi.n	8008b3c <_free_r+0xf8>
 8008b2c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8008b30:	1aed      	subs	r5, r5, r3
 8008b32:	441a      	add	r2, r3
 8008b34:	68a8      	ldr	r0, [r5, #8]
 8008b36:	68eb      	ldr	r3, [r5, #12]
 8008b38:	60c3      	str	r3, [r0, #12]
 8008b3a:	6098      	str	r0, [r3, #8]
 8008b3c:	4b2b      	ldr	r3, [pc, #172]	; (8008bec <_free_r+0x1a8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f042 0001 	orr.w	r0, r2, #1
 8008b44:	429a      	cmp	r2, r3
 8008b46:	6068      	str	r0, [r5, #4]
 8008b48:	608d      	str	r5, [r1, #8]
 8008b4a:	d3c7      	bcc.n	8008adc <_free_r+0x98>
 8008b4c:	4b28      	ldr	r3, [pc, #160]	; (8008bf0 <_free_r+0x1ac>)
 8008b4e:	4640      	mov	r0, r8
 8008b50:	6819      	ldr	r1, [r3, #0]
 8008b52:	f7ff ff29 	bl	80089a8 <_malloc_trim_r>
 8008b56:	e7c1      	b.n	8008adc <_free_r+0x98>
 8008b58:	1819      	adds	r1, r3, r0
 8008b5a:	6849      	ldr	r1, [r1, #4]
 8008b5c:	07c9      	lsls	r1, r1, #31
 8008b5e:	d409      	bmi.n	8008b74 <_free_r+0x130>
 8008b60:	68d9      	ldr	r1, [r3, #12]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	4402      	add	r2, r0
 8008b66:	f042 0001 	orr.w	r0, r2, #1
 8008b6a:	60d9      	str	r1, [r3, #12]
 8008b6c:	608b      	str	r3, [r1, #8]
 8008b6e:	6068      	str	r0, [r5, #4]
 8008b70:	50aa      	str	r2, [r5, r2]
 8008b72:	e7b3      	b.n	8008adc <_free_r+0x98>
 8008b74:	f042 0301 	orr.w	r3, r2, #1
 8008b78:	606b      	str	r3, [r5, #4]
 8008b7a:	50aa      	str	r2, [r5, r2]
 8008b7c:	e7ae      	b.n	8008adc <_free_r+0x98>
 8008b7e:	2b14      	cmp	r3, #20
 8008b80:	d814      	bhi.n	8008bac <_free_r+0x168>
 8008b82:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8008b86:	0060      	lsls	r0, r4, #1
 8008b88:	e7b5      	b.n	8008af6 <_free_r+0xb2>
 8008b8a:	684a      	ldr	r2, [r1, #4]
 8008b8c:	10a4      	asrs	r4, r4, #2
 8008b8e:	2001      	movs	r0, #1
 8008b90:	40a0      	lsls	r0, r4
 8008b92:	4302      	orrs	r2, r0
 8008b94:	604a      	str	r2, [r1, #4]
 8008b96:	461a      	mov	r2, r3
 8008b98:	e7bc      	b.n	8008b14 <_free_r+0xd0>
 8008b9a:	f042 0301 	orr.w	r3, r2, #1
 8008b9e:	614d      	str	r5, [r1, #20]
 8008ba0:	610d      	str	r5, [r1, #16]
 8008ba2:	60ec      	str	r4, [r5, #12]
 8008ba4:	60ac      	str	r4, [r5, #8]
 8008ba6:	606b      	str	r3, [r5, #4]
 8008ba8:	50aa      	str	r2, [r5, r2]
 8008baa:	e797      	b.n	8008adc <_free_r+0x98>
 8008bac:	2b54      	cmp	r3, #84	; 0x54
 8008bae:	d804      	bhi.n	8008bba <_free_r+0x176>
 8008bb0:	0b13      	lsrs	r3, r2, #12
 8008bb2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8008bb6:	0060      	lsls	r0, r4, #1
 8008bb8:	e79d      	b.n	8008af6 <_free_r+0xb2>
 8008bba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008bbe:	d804      	bhi.n	8008bca <_free_r+0x186>
 8008bc0:	0bd3      	lsrs	r3, r2, #15
 8008bc2:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8008bc6:	0060      	lsls	r0, r4, #1
 8008bc8:	e795      	b.n	8008af6 <_free_r+0xb2>
 8008bca:	f240 5054 	movw	r0, #1364	; 0x554
 8008bce:	4283      	cmp	r3, r0
 8008bd0:	d804      	bhi.n	8008bdc <_free_r+0x198>
 8008bd2:	0c93      	lsrs	r3, r2, #18
 8008bd4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8008bd8:	0060      	lsls	r0, r4, #1
 8008bda:	e78c      	b.n	8008af6 <_free_r+0xb2>
 8008bdc:	20fc      	movs	r0, #252	; 0xfc
 8008bde:	247e      	movs	r4, #126	; 0x7e
 8008be0:	e789      	b.n	8008af6 <_free_r+0xb2>
 8008be2:	bf00      	nop
 8008be4:	20000688 	.word	0x20000688
 8008be8:	20000690 	.word	0x20000690
 8008bec:	20000a90 	.word	0x20000a90
 8008bf0:	20000ecc 	.word	0x20000ecc

08008bf4 <__sfvwrite_r>:
 8008bf4:	6893      	ldr	r3, [r2, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d07a      	beq.n	8008cf0 <__sfvwrite_r+0xfc>
 8008bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfe:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8008c02:	f01e 0f08 	tst.w	lr, #8
 8008c06:	b083      	sub	sp, #12
 8008c08:	460c      	mov	r4, r1
 8008c0a:	4681      	mov	r9, r0
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	d026      	beq.n	8008c5e <__sfvwrite_r+0x6a>
 8008c10:	690b      	ldr	r3, [r1, #16]
 8008c12:	b323      	cbz	r3, 8008c5e <__sfvwrite_r+0x6a>
 8008c14:	f00e 0802 	and.w	r8, lr, #2
 8008c18:	fa1f f088 	uxth.w	r0, r8
 8008c1c:	6835      	ldr	r5, [r6, #0]
 8008c1e:	b370      	cbz	r0, 8008c7e <__sfvwrite_r+0x8a>
 8008c20:	f04f 0a00 	mov.w	sl, #0
 8008c24:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8008f08 <__sfvwrite_r+0x314>
 8008c28:	46d0      	mov	r8, sl
 8008c2a:	45d8      	cmp	r8, fp
 8008c2c:	4643      	mov	r3, r8
 8008c2e:	4652      	mov	r2, sl
 8008c30:	bf28      	it	cs
 8008c32:	465b      	movcs	r3, fp
 8008c34:	4648      	mov	r0, r9
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	d053      	beq.n	8008ce4 <__sfvwrite_r+0xf0>
 8008c3c:	69e1      	ldr	r1, [r4, #28]
 8008c3e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008c40:	47b8      	blx	r7
 8008c42:	2800      	cmp	r0, #0
 8008c44:	dd73      	ble.n	8008d2e <__sfvwrite_r+0x13a>
 8008c46:	68b3      	ldr	r3, [r6, #8]
 8008c48:	1a1b      	subs	r3, r3, r0
 8008c4a:	4482      	add	sl, r0
 8008c4c:	ebc0 0808 	rsb	r8, r0, r8
 8008c50:	60b3      	str	r3, [r6, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e9      	bne.n	8008c2a <__sfvwrite_r+0x36>
 8008c56:	2000      	movs	r0, #0
 8008c58:	b003      	add	sp, #12
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	4648      	mov	r0, r9
 8008c60:	4621      	mov	r1, r4
 8008c62:	f7fe fce7 	bl	8007634 <__swsetup_r>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f040 8145 	bne.w	8008ef6 <__sfvwrite_r+0x302>
 8008c6c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8008c70:	6835      	ldr	r5, [r6, #0]
 8008c72:	f00e 0802 	and.w	r8, lr, #2
 8008c76:	fa1f f088 	uxth.w	r0, r8
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d1d0      	bne.n	8008c20 <__sfvwrite_r+0x2c>
 8008c7e:	f01e 0b01 	ands.w	fp, lr, #1
 8008c82:	d15d      	bne.n	8008d40 <__sfvwrite_r+0x14c>
 8008c84:	46d8      	mov	r8, fp
 8008c86:	f1b8 0f00 	cmp.w	r8, #0
 8008c8a:	d025      	beq.n	8008cd8 <__sfvwrite_r+0xe4>
 8008c8c:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8008c90:	68a7      	ldr	r7, [r4, #8]
 8008c92:	d02f      	beq.n	8008cf4 <__sfvwrite_r+0x100>
 8008c94:	45b8      	cmp	r8, r7
 8008c96:	46ba      	mov	sl, r7
 8008c98:	f0c0 80a9 	bcc.w	8008dee <__sfvwrite_r+0x1fa>
 8008c9c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8008ca0:	f040 80b6 	bne.w	8008e10 <__sfvwrite_r+0x21c>
 8008ca4:	6820      	ldr	r0, [r4, #0]
 8008ca6:	4652      	mov	r2, sl
 8008ca8:	4659      	mov	r1, fp
 8008caa:	f000 fcbb 	bl	8009624 <memmove>
 8008cae:	68a0      	ldr	r0, [r4, #8]
 8008cb0:	6822      	ldr	r2, [r4, #0]
 8008cb2:	1bc0      	subs	r0, r0, r7
 8008cb4:	eb02 030a 	add.w	r3, r2, sl
 8008cb8:	60a0      	str	r0, [r4, #8]
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	68b3      	ldr	r3, [r6, #8]
 8008cc0:	1a1b      	subs	r3, r3, r0
 8008cc2:	4483      	add	fp, r0
 8008cc4:	ebc0 0808 	rsb	r8, r0, r8
 8008cc8:	60b3      	str	r3, [r6, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0c3      	beq.n	8008c56 <__sfvwrite_r+0x62>
 8008cce:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8008cd2:	f1b8 0f00 	cmp.w	r8, #0
 8008cd6:	d1d9      	bne.n	8008c8c <__sfvwrite_r+0x98>
 8008cd8:	f8d5 b000 	ldr.w	fp, [r5]
 8008cdc:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008ce0:	3508      	adds	r5, #8
 8008ce2:	e7d0      	b.n	8008c86 <__sfvwrite_r+0x92>
 8008ce4:	f8d5 a000 	ldr.w	sl, [r5]
 8008ce8:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008cec:	3508      	adds	r5, #8
 8008cee:	e79c      	b.n	8008c2a <__sfvwrite_r+0x36>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	4770      	bx	lr
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	4298      	cmp	r0, r3
 8008cfa:	d803      	bhi.n	8008d04 <__sfvwrite_r+0x110>
 8008cfc:	6962      	ldr	r2, [r4, #20]
 8008cfe:	4590      	cmp	r8, r2
 8008d00:	f080 80b9 	bcs.w	8008e76 <__sfvwrite_r+0x282>
 8008d04:	4547      	cmp	r7, r8
 8008d06:	bf28      	it	cs
 8008d08:	4647      	movcs	r7, r8
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	4659      	mov	r1, fp
 8008d0e:	f000 fc89 	bl	8009624 <memmove>
 8008d12:	68a3      	ldr	r3, [r4, #8]
 8008d14:	6822      	ldr	r2, [r4, #0]
 8008d16:	1bdb      	subs	r3, r3, r7
 8008d18:	443a      	add	r2, r7
 8008d1a:	60a3      	str	r3, [r4, #8]
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d14a      	bne.n	8008db8 <__sfvwrite_r+0x1c4>
 8008d22:	4648      	mov	r0, r9
 8008d24:	4621      	mov	r1, r4
 8008d26:	f7ff fd8b 	bl	8008840 <_fflush_r>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d044      	beq.n	8008db8 <__sfvwrite_r+0x1c4>
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d38:	81a3      	strh	r3, [r4, #12]
 8008d3a:	b003      	add	sp, #12
 8008d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d40:	4680      	mov	r8, r0
 8008d42:	9000      	str	r0, [sp, #0]
 8008d44:	4683      	mov	fp, r0
 8008d46:	4682      	mov	sl, r0
 8008d48:	f1ba 0f00 	cmp.w	sl, #0
 8008d4c:	d02c      	beq.n	8008da8 <__sfvwrite_r+0x1b4>
 8008d4e:	9b00      	ldr	r3, [sp, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d050      	beq.n	8008df6 <__sfvwrite_r+0x202>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	6921      	ldr	r1, [r4, #16]
 8008d58:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8008d5c:	6962      	ldr	r2, [r4, #20]
 8008d5e:	45d0      	cmp	r8, sl
 8008d60:	4643      	mov	r3, r8
 8008d62:	bf28      	it	cs
 8008d64:	4653      	movcs	r3, sl
 8008d66:	4288      	cmp	r0, r1
 8008d68:	461f      	mov	r7, r3
 8008d6a:	d904      	bls.n	8008d76 <__sfvwrite_r+0x182>
 8008d6c:	eb0e 0c02 	add.w	ip, lr, r2
 8008d70:	4563      	cmp	r3, ip
 8008d72:	f300 8092 	bgt.w	8008e9a <__sfvwrite_r+0x2a6>
 8008d76:	4293      	cmp	r3, r2
 8008d78:	db20      	blt.n	8008dbc <__sfvwrite_r+0x1c8>
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008d7e:	69e1      	ldr	r1, [r4, #28]
 8008d80:	4648      	mov	r0, r9
 8008d82:	465a      	mov	r2, fp
 8008d84:	47b8      	blx	r7
 8008d86:	1e07      	subs	r7, r0, #0
 8008d88:	ddd1      	ble.n	8008d2e <__sfvwrite_r+0x13a>
 8008d8a:	ebb8 0807 	subs.w	r8, r8, r7
 8008d8e:	d025      	beq.n	8008ddc <__sfvwrite_r+0x1e8>
 8008d90:	68b3      	ldr	r3, [r6, #8]
 8008d92:	1bdb      	subs	r3, r3, r7
 8008d94:	44bb      	add	fp, r7
 8008d96:	ebc7 0a0a 	rsb	sl, r7, sl
 8008d9a:	60b3      	str	r3, [r6, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f43f af5a 	beq.w	8008c56 <__sfvwrite_r+0x62>
 8008da2:	f1ba 0f00 	cmp.w	sl, #0
 8008da6:	d1d2      	bne.n	8008d4e <__sfvwrite_r+0x15a>
 8008da8:	2300      	movs	r3, #0
 8008daa:	f8d5 b000 	ldr.w	fp, [r5]
 8008dae:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	3508      	adds	r5, #8
 8008db6:	e7c7      	b.n	8008d48 <__sfvwrite_r+0x154>
 8008db8:	4638      	mov	r0, r7
 8008dba:	e780      	b.n	8008cbe <__sfvwrite_r+0xca>
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4659      	mov	r1, fp
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	f000 fc2f 	bl	8009624 <memmove>
 8008dc6:	68a2      	ldr	r2, [r4, #8]
 8008dc8:	6821      	ldr	r1, [r4, #0]
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	ebb8 0807 	subs.w	r8, r8, r7
 8008dd0:	eba2 0203 	sub.w	r2, r2, r3
 8008dd4:	440b      	add	r3, r1
 8008dd6:	60a2      	str	r2, [r4, #8]
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	d1d9      	bne.n	8008d90 <__sfvwrite_r+0x19c>
 8008ddc:	4648      	mov	r0, r9
 8008dde:	4621      	mov	r1, r4
 8008de0:	f7ff fd2e 	bl	8008840 <_fflush_r>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d1a2      	bne.n	8008d2e <__sfvwrite_r+0x13a>
 8008de8:	f8cd 8000 	str.w	r8, [sp]
 8008dec:	e7d0      	b.n	8008d90 <__sfvwrite_r+0x19c>
 8008dee:	6820      	ldr	r0, [r4, #0]
 8008df0:	4647      	mov	r7, r8
 8008df2:	46c2      	mov	sl, r8
 8008df4:	e757      	b.n	8008ca6 <__sfvwrite_r+0xb2>
 8008df6:	4658      	mov	r0, fp
 8008df8:	210a      	movs	r1, #10
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	f000 fbc8 	bl	8009590 <memchr>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d073      	beq.n	8008eec <__sfvwrite_r+0x2f8>
 8008e04:	3001      	adds	r0, #1
 8008e06:	2301      	movs	r3, #1
 8008e08:	ebcb 0800 	rsb	r8, fp, r0
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	e7a1      	b.n	8008d54 <__sfvwrite_r+0x160>
 8008e10:	6967      	ldr	r7, [r4, #20]
 8008e12:	6921      	ldr	r1, [r4, #16]
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008e1a:	1a5b      	subs	r3, r3, r1
 8008e1c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8008e20:	1c58      	adds	r0, r3, #1
 8008e22:	107f      	asrs	r7, r7, #1
 8008e24:	4440      	add	r0, r8
 8008e26:	4287      	cmp	r7, r0
 8008e28:	463a      	mov	r2, r7
 8008e2a:	bf3c      	itt	cc
 8008e2c:	4607      	movcc	r7, r0
 8008e2e:	463a      	movcc	r2, r7
 8008e30:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	d046      	beq.n	8008ec6 <__sfvwrite_r+0x2d2>
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4648      	mov	r0, r9
 8008e3c:	f000 f916 	bl	800906c <_malloc_r>
 8008e40:	9b00      	ldr	r3, [sp, #0]
 8008e42:	4682      	mov	sl, r0
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d059      	beq.n	8008efc <__sfvwrite_r+0x308>
 8008e48:	461a      	mov	r2, r3
 8008e4a:	6921      	ldr	r1, [r4, #16]
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	f7f7 f9c9 	bl	80001e4 <memcpy>
 8008e52:	89a2      	ldrh	r2, [r4, #12]
 8008e54:	9b00      	ldr	r3, [sp, #0]
 8008e56:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e5e:	81a2      	strh	r2, [r4, #12]
 8008e60:	eb0a 0003 	add.w	r0, sl, r3
 8008e64:	1afb      	subs	r3, r7, r3
 8008e66:	f8c4 a010 	str.w	sl, [r4, #16]
 8008e6a:	6167      	str	r7, [r4, #20]
 8008e6c:	6020      	str	r0, [r4, #0]
 8008e6e:	60a3      	str	r3, [r4, #8]
 8008e70:	4647      	mov	r7, r8
 8008e72:	46c2      	mov	sl, r8
 8008e74:	e717      	b.n	8008ca6 <__sfvwrite_r+0xb2>
 8008e76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008e7a:	4543      	cmp	r3, r8
 8008e7c:	bf28      	it	cs
 8008e7e:	4643      	movcs	r3, r8
 8008e80:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e86:	4648      	mov	r0, r9
 8008e88:	fb03 f302 	mul.w	r3, r3, r2
 8008e8c:	69e1      	ldr	r1, [r4, #28]
 8008e8e:	465a      	mov	r2, fp
 8008e90:	47b8      	blx	r7
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f73f af13 	bgt.w	8008cbe <__sfvwrite_r+0xca>
 8008e98:	e749      	b.n	8008d2e <__sfvwrite_r+0x13a>
 8008e9a:	4662      	mov	r2, ip
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	f8cd c004 	str.w	ip, [sp, #4]
 8008ea2:	f000 fbbf 	bl	8009624 <memmove>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008eac:	4463      	add	r3, ip
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	4648      	mov	r0, r9
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	f7ff fcc4 	bl	8008840 <_fflush_r>
 8008eb8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f47f af36 	bne.w	8008d2e <__sfvwrite_r+0x13a>
 8008ec2:	4667      	mov	r7, ip
 8008ec4:	e761      	b.n	8008d8a <__sfvwrite_r+0x196>
 8008ec6:	4648      	mov	r0, r9
 8008ec8:	f000 ff36 	bl	8009d38 <_realloc_r>
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	4682      	mov	sl, r0
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d1c5      	bne.n	8008e60 <__sfvwrite_r+0x26c>
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	6921      	ldr	r1, [r4, #16]
 8008ed8:	f7ff fdb4 	bl	8008a44 <_free_r>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	220c      	movs	r2, #12
 8008ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f8c9 2000 	str.w	r2, [r9]
 8008eea:	e721      	b.n	8008d30 <__sfvwrite_r+0x13c>
 8008eec:	2301      	movs	r3, #1
 8008eee:	f10a 0801 	add.w	r8, sl, #1
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	e72e      	b.n	8008d54 <__sfvwrite_r+0x160>
 8008ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008efa:	e6ad      	b.n	8008c58 <__sfvwrite_r+0x64>
 8008efc:	230c      	movs	r3, #12
 8008efe:	f8c9 3000 	str.w	r3, [r9]
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	e714      	b.n	8008d30 <__sfvwrite_r+0x13c>
 8008f06:	bf00      	nop
 8008f08:	7ffffc00 	.word	0x7ffffc00

08008f0c <_fwalk_reent>:
 8008f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f10:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8008f14:	d01f      	beq.n	8008f56 <_fwalk_reent+0x4a>
 8008f16:	4688      	mov	r8, r1
 8008f18:	4606      	mov	r6, r0
 8008f1a:	f04f 0900 	mov.w	r9, #0
 8008f1e:	687d      	ldr	r5, [r7, #4]
 8008f20:	68bc      	ldr	r4, [r7, #8]
 8008f22:	3d01      	subs	r5, #1
 8008f24:	d411      	bmi.n	8008f4a <_fwalk_reent+0x3e>
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008f2e:	d908      	bls.n	8008f42 <_fwalk_reent+0x36>
 8008f30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008f34:	3301      	adds	r3, #1
 8008f36:	4621      	mov	r1, r4
 8008f38:	4630      	mov	r0, r6
 8008f3a:	d002      	beq.n	8008f42 <_fwalk_reent+0x36>
 8008f3c:	47c0      	blx	r8
 8008f3e:	ea49 0900 	orr.w	r9, r9, r0
 8008f42:	1c6b      	adds	r3, r5, #1
 8008f44:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8008f48:	d1ed      	bne.n	8008f26 <_fwalk_reent+0x1a>
 8008f4a:	683f      	ldr	r7, [r7, #0]
 8008f4c:	2f00      	cmp	r7, #0
 8008f4e:	d1e6      	bne.n	8008f1e <_fwalk_reent+0x12>
 8008f50:	4648      	mov	r0, r9
 8008f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f56:	46b9      	mov	r9, r7
 8008f58:	4648      	mov	r0, r9
 8008f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5e:	bf00      	nop

08008f60 <__locale_charset>:
 8008f60:	4800      	ldr	r0, [pc, #0]	; (8008f64 <__locale_charset+0x4>)
 8008f62:	4770      	bx	lr
 8008f64:	20000664 	.word	0x20000664

08008f68 <__locale_mb_cur_max>:
 8008f68:	4b01      	ldr	r3, [pc, #4]	; (8008f70 <__locale_mb_cur_max+0x8>)
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	20000684 	.word	0x20000684

08008f74 <_localeconv_r>:
 8008f74:	4800      	ldr	r0, [pc, #0]	; (8008f78 <_localeconv_r+0x4>)
 8008f76:	4770      	bx	lr
 8008f78:	2000062c 	.word	0x2000062c

08008f7c <__smakebuf_r>:
 8008f7c:	898b      	ldrh	r3, [r1, #12]
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	f012 0f02 	tst.w	r2, #2
 8008f84:	d13c      	bne.n	8009000 <__smakebuf_r+0x84>
 8008f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f88:	460c      	mov	r4, r1
 8008f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8e:	2900      	cmp	r1, #0
 8008f90:	b091      	sub	sp, #68	; 0x44
 8008f92:	4605      	mov	r5, r0
 8008f94:	db19      	blt.n	8008fca <__smakebuf_r+0x4e>
 8008f96:	aa01      	add	r2, sp, #4
 8008f98:	f7f8 fccb 	bl	8001932 <_fstat_r>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	db12      	blt.n	8008fc6 <__smakebuf_r+0x4a>
 8008fa0:	9b02      	ldr	r3, [sp, #8]
 8008fa2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008faa:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8008fae:	fab7 f787 	clz	r7, r7
 8008fb2:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8008fb6:	d02a      	beq.n	800900e <__smakebuf_r+0x92>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8008fc4:	e00b      	b.n	8008fde <__smakebuf_r+0x62>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008fce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	bf0c      	ite	eq
 8008fd6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8008fda:	2640      	movne	r6, #64	; 0x40
 8008fdc:	2700      	movs	r7, #0
 8008fde:	4628      	mov	r0, r5
 8008fe0:	4631      	mov	r1, r6
 8008fe2:	f000 f843 	bl	800906c <_malloc_r>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	b340      	cbz	r0, 800903c <__smakebuf_r+0xc0>
 8008fea:	4a1a      	ldr	r2, [pc, #104]	; (8009054 <__smakebuf_r+0xd8>)
 8008fec:	63ea      	str	r2, [r5, #60]	; 0x3c
 8008fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	6020      	str	r0, [r4, #0]
 8008ff6:	6120      	str	r0, [r4, #16]
 8008ff8:	6166      	str	r6, [r4, #20]
 8008ffa:	b99f      	cbnz	r7, 8009024 <__smakebuf_r+0xa8>
 8008ffc:	b011      	add	sp, #68	; 0x44
 8008ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009000:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8009004:	2201      	movs	r2, #1
 8009006:	600b      	str	r3, [r1, #0]
 8009008:	610b      	str	r3, [r1, #16]
 800900a:	614a      	str	r2, [r1, #20]
 800900c:	4770      	bx	lr
 800900e:	4b12      	ldr	r3, [pc, #72]	; (8009058 <__smakebuf_r+0xdc>)
 8009010:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009012:	429a      	cmp	r2, r3
 8009014:	d1d0      	bne.n	8008fb8 <__smakebuf_r+0x3c>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800901c:	4333      	orrs	r3, r6
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	64e6      	str	r6, [r4, #76]	; 0x4c
 8009022:	e7dc      	b.n	8008fde <__smakebuf_r+0x62>
 8009024:	4628      	mov	r0, r5
 8009026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800902a:	f7f8 fc87 	bl	800193c <_isatty_r>
 800902e:	2800      	cmp	r0, #0
 8009030:	d0e4      	beq.n	8008ffc <__smakebuf_r+0x80>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	f043 0301 	orr.w	r3, r3, #1
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	e7df      	b.n	8008ffc <__smakebuf_r+0x80>
 800903c:	059a      	lsls	r2, r3, #22
 800903e:	d4dd      	bmi.n	8008ffc <__smakebuf_r+0x80>
 8009040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009044:	f043 0302 	orr.w	r3, r3, #2
 8009048:	2101      	movs	r1, #1
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	6022      	str	r2, [r4, #0]
 800904e:	6122      	str	r2, [r4, #16]
 8009050:	6161      	str	r1, [r4, #20]
 8009052:	e7d3      	b.n	8008ffc <__smakebuf_r+0x80>
 8009054:	0800886d 	.word	0x0800886d
 8009058:	0800a1dd 	.word	0x0800a1dd

0800905c <malloc>:
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <malloc+0xc>)
 800905e:	4601      	mov	r1, r0
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f000 b803 	b.w	800906c <_malloc_r>
 8009066:	bf00      	nop
 8009068:	20000628 	.word	0x20000628

0800906c <_malloc_r>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	f101 050b 	add.w	r5, r1, #11
 8009074:	2d16      	cmp	r5, #22
 8009076:	b083      	sub	sp, #12
 8009078:	4606      	mov	r6, r0
 800907a:	d927      	bls.n	80090cc <_malloc_r+0x60>
 800907c:	f035 0507 	bics.w	r5, r5, #7
 8009080:	f100 80b6 	bmi.w	80091f0 <_malloc_r+0x184>
 8009084:	42a9      	cmp	r1, r5
 8009086:	f200 80b3 	bhi.w	80091f0 <_malloc_r+0x184>
 800908a:	f000 fb2f 	bl	80096ec <__malloc_lock>
 800908e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8009092:	d222      	bcs.n	80090da <_malloc_r+0x6e>
 8009094:	4fc2      	ldr	r7, [pc, #776]	; (80093a0 <_malloc_r+0x334>)
 8009096:	08e8      	lsrs	r0, r5, #3
 8009098:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 800909c:	68dc      	ldr	r4, [r3, #12]
 800909e:	429c      	cmp	r4, r3
 80090a0:	f000 81c8 	beq.w	8009434 <_malloc_r+0x3c8>
 80090a4:	6863      	ldr	r3, [r4, #4]
 80090a6:	68e1      	ldr	r1, [r4, #12]
 80090a8:	68a5      	ldr	r5, [r4, #8]
 80090aa:	f023 0303 	bic.w	r3, r3, #3
 80090ae:	4423      	add	r3, r4
 80090b0:	4630      	mov	r0, r6
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	60e9      	str	r1, [r5, #12]
 80090b6:	f042 0201 	orr.w	r2, r2, #1
 80090ba:	608d      	str	r5, [r1, #8]
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	f000 fb17 	bl	80096f0 <__malloc_unlock>
 80090c2:	3408      	adds	r4, #8
 80090c4:	4620      	mov	r0, r4
 80090c6:	b003      	add	sp, #12
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	2910      	cmp	r1, #16
 80090ce:	f200 808f 	bhi.w	80091f0 <_malloc_r+0x184>
 80090d2:	f000 fb0b 	bl	80096ec <__malloc_lock>
 80090d6:	2510      	movs	r5, #16
 80090d8:	e7dc      	b.n	8009094 <_malloc_r+0x28>
 80090da:	0a68      	lsrs	r0, r5, #9
 80090dc:	f000 808f 	beq.w	80091fe <_malloc_r+0x192>
 80090e0:	2804      	cmp	r0, #4
 80090e2:	f200 8154 	bhi.w	800938e <_malloc_r+0x322>
 80090e6:	09a8      	lsrs	r0, r5, #6
 80090e8:	3038      	adds	r0, #56	; 0x38
 80090ea:	0041      	lsls	r1, r0, #1
 80090ec:	4fac      	ldr	r7, [pc, #688]	; (80093a0 <_malloc_r+0x334>)
 80090ee:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80090f2:	68cc      	ldr	r4, [r1, #12]
 80090f4:	42a1      	cmp	r1, r4
 80090f6:	d106      	bne.n	8009106 <_malloc_r+0x9a>
 80090f8:	e00c      	b.n	8009114 <_malloc_r+0xa8>
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	f280 8082 	bge.w	8009204 <_malloc_r+0x198>
 8009100:	68e4      	ldr	r4, [r4, #12]
 8009102:	42a1      	cmp	r1, r4
 8009104:	d006      	beq.n	8009114 <_malloc_r+0xa8>
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	f023 0303 	bic.w	r3, r3, #3
 800910c:	1b5a      	subs	r2, r3, r5
 800910e:	2a0f      	cmp	r2, #15
 8009110:	ddf3      	ble.n	80090fa <_malloc_r+0x8e>
 8009112:	3801      	subs	r0, #1
 8009114:	3001      	adds	r0, #1
 8009116:	49a2      	ldr	r1, [pc, #648]	; (80093a0 <_malloc_r+0x334>)
 8009118:	693c      	ldr	r4, [r7, #16]
 800911a:	f101 0e08 	add.w	lr, r1, #8
 800911e:	4574      	cmp	r4, lr
 8009120:	f000 817d 	beq.w	800941e <_malloc_r+0x3b2>
 8009124:	6863      	ldr	r3, [r4, #4]
 8009126:	f023 0303 	bic.w	r3, r3, #3
 800912a:	1b5a      	subs	r2, r3, r5
 800912c:	2a0f      	cmp	r2, #15
 800912e:	f300 8163 	bgt.w	80093f8 <_malloc_r+0x38c>
 8009132:	2a00      	cmp	r2, #0
 8009134:	f8c1 e014 	str.w	lr, [r1, #20]
 8009138:	f8c1 e010 	str.w	lr, [r1, #16]
 800913c:	da73      	bge.n	8009226 <_malloc_r+0x1ba>
 800913e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009142:	f080 8139 	bcs.w	80093b8 <_malloc_r+0x34c>
 8009146:	08db      	lsrs	r3, r3, #3
 8009148:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 800914c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8009150:	684a      	ldr	r2, [r1, #4]
 8009152:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8009156:	f8c4 9008 	str.w	r9, [r4, #8]
 800915a:	2301      	movs	r3, #1
 800915c:	fa03 f30c 	lsl.w	r3, r3, ip
 8009160:	4313      	orrs	r3, r2
 8009162:	f8c4 800c 	str.w	r8, [r4, #12]
 8009166:	604b      	str	r3, [r1, #4]
 8009168:	f8c8 4008 	str.w	r4, [r8, #8]
 800916c:	f8c9 400c 	str.w	r4, [r9, #12]
 8009170:	1082      	asrs	r2, r0, #2
 8009172:	2401      	movs	r4, #1
 8009174:	4094      	lsls	r4, r2
 8009176:	429c      	cmp	r4, r3
 8009178:	d862      	bhi.n	8009240 <_malloc_r+0x1d4>
 800917a:	4223      	tst	r3, r4
 800917c:	d106      	bne.n	800918c <_malloc_r+0x120>
 800917e:	f020 0003 	bic.w	r0, r0, #3
 8009182:	0064      	lsls	r4, r4, #1
 8009184:	4223      	tst	r3, r4
 8009186:	f100 0004 	add.w	r0, r0, #4
 800918a:	d0fa      	beq.n	8009182 <_malloc_r+0x116>
 800918c:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8009190:	46c4      	mov	ip, r8
 8009192:	4681      	mov	r9, r0
 8009194:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8009198:	459c      	cmp	ip, r3
 800919a:	d107      	bne.n	80091ac <_malloc_r+0x140>
 800919c:	e141      	b.n	8009422 <_malloc_r+0x3b6>
 800919e:	2900      	cmp	r1, #0
 80091a0:	f280 8151 	bge.w	8009446 <_malloc_r+0x3da>
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	459c      	cmp	ip, r3
 80091a8:	f000 813b 	beq.w	8009422 <_malloc_r+0x3b6>
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	f022 0203 	bic.w	r2, r2, #3
 80091b2:	1b51      	subs	r1, r2, r5
 80091b4:	290f      	cmp	r1, #15
 80091b6:	ddf2      	ble.n	800919e <_malloc_r+0x132>
 80091b8:	461c      	mov	r4, r3
 80091ba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80091be:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80091c2:	195a      	adds	r2, r3, r5
 80091c4:	f045 0901 	orr.w	r9, r5, #1
 80091c8:	f041 0501 	orr.w	r5, r1, #1
 80091cc:	f8c3 9004 	str.w	r9, [r3, #4]
 80091d0:	4630      	mov	r0, r6
 80091d2:	f8c8 c00c 	str.w	ip, [r8, #12]
 80091d6:	f8cc 8008 	str.w	r8, [ip, #8]
 80091da:	617a      	str	r2, [r7, #20]
 80091dc:	613a      	str	r2, [r7, #16]
 80091de:	f8c2 e00c 	str.w	lr, [r2, #12]
 80091e2:	f8c2 e008 	str.w	lr, [r2, #8]
 80091e6:	6055      	str	r5, [r2, #4]
 80091e8:	5051      	str	r1, [r2, r1]
 80091ea:	f000 fa81 	bl	80096f0 <__malloc_unlock>
 80091ee:	e769      	b.n	80090c4 <_malloc_r+0x58>
 80091f0:	2400      	movs	r4, #0
 80091f2:	230c      	movs	r3, #12
 80091f4:	4620      	mov	r0, r4
 80091f6:	6033      	str	r3, [r6, #0]
 80091f8:	b003      	add	sp, #12
 80091fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fe:	217e      	movs	r1, #126	; 0x7e
 8009200:	203f      	movs	r0, #63	; 0x3f
 8009202:	e773      	b.n	80090ec <_malloc_r+0x80>
 8009204:	4423      	add	r3, r4
 8009206:	68e1      	ldr	r1, [r4, #12]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	68a5      	ldr	r5, [r4, #8]
 800920c:	f042 0201 	orr.w	r2, r2, #1
 8009210:	60e9      	str	r1, [r5, #12]
 8009212:	4630      	mov	r0, r6
 8009214:	608d      	str	r5, [r1, #8]
 8009216:	605a      	str	r2, [r3, #4]
 8009218:	f000 fa6a 	bl	80096f0 <__malloc_unlock>
 800921c:	3408      	adds	r4, #8
 800921e:	4620      	mov	r0, r4
 8009220:	b003      	add	sp, #12
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	4423      	add	r3, r4
 8009228:	4630      	mov	r0, r6
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	f042 0201 	orr.w	r2, r2, #1
 8009230:	605a      	str	r2, [r3, #4]
 8009232:	f000 fa5d 	bl	80096f0 <__malloc_unlock>
 8009236:	3408      	adds	r4, #8
 8009238:	4620      	mov	r0, r4
 800923a:	b003      	add	sp, #12
 800923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009240:	68bc      	ldr	r4, [r7, #8]
 8009242:	6863      	ldr	r3, [r4, #4]
 8009244:	f023 0803 	bic.w	r8, r3, #3
 8009248:	4545      	cmp	r5, r8
 800924a:	d804      	bhi.n	8009256 <_malloc_r+0x1ea>
 800924c:	ebc5 0308 	rsb	r3, r5, r8
 8009250:	2b0f      	cmp	r3, #15
 8009252:	f300 808c 	bgt.w	800936e <_malloc_r+0x302>
 8009256:	4b53      	ldr	r3, [pc, #332]	; (80093a4 <_malloc_r+0x338>)
 8009258:	f8df a158 	ldr.w	sl, [pc, #344]	; 80093b4 <_malloc_r+0x348>
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	f8da 3000 	ldr.w	r3, [sl]
 8009262:	3301      	adds	r3, #1
 8009264:	442a      	add	r2, r5
 8009266:	eb04 0b08 	add.w	fp, r4, r8
 800926a:	f000 8150 	beq.w	800950e <_malloc_r+0x4a2>
 800926e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009272:	320f      	adds	r2, #15
 8009274:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8009278:	f022 020f 	bic.w	r2, r2, #15
 800927c:	4611      	mov	r1, r2
 800927e:	4630      	mov	r0, r6
 8009280:	9201      	str	r2, [sp, #4]
 8009282:	f7f8 fb39 	bl	80018f8 <_sbrk_r>
 8009286:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800928a:	4681      	mov	r9, r0
 800928c:	9a01      	ldr	r2, [sp, #4]
 800928e:	f000 8147 	beq.w	8009520 <_malloc_r+0x4b4>
 8009292:	4583      	cmp	fp, r0
 8009294:	f200 80ee 	bhi.w	8009474 <_malloc_r+0x408>
 8009298:	4b43      	ldr	r3, [pc, #268]	; (80093a8 <_malloc_r+0x33c>)
 800929a:	6819      	ldr	r1, [r3, #0]
 800929c:	45cb      	cmp	fp, r9
 800929e:	4411      	add	r1, r2
 80092a0:	6019      	str	r1, [r3, #0]
 80092a2:	f000 8142 	beq.w	800952a <_malloc_r+0x4be>
 80092a6:	f8da 0000 	ldr.w	r0, [sl]
 80092aa:	f8df e108 	ldr.w	lr, [pc, #264]	; 80093b4 <_malloc_r+0x348>
 80092ae:	3001      	adds	r0, #1
 80092b0:	bf1b      	ittet	ne
 80092b2:	ebcb 0b09 	rsbne	fp, fp, r9
 80092b6:	4459      	addne	r1, fp
 80092b8:	f8ce 9000 	streq.w	r9, [lr]
 80092bc:	6019      	strne	r1, [r3, #0]
 80092be:	f019 0107 	ands.w	r1, r9, #7
 80092c2:	f000 8107 	beq.w	80094d4 <_malloc_r+0x468>
 80092c6:	f1c1 0008 	rsb	r0, r1, #8
 80092ca:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80092ce:	4481      	add	r9, r0
 80092d0:	3108      	adds	r1, #8
 80092d2:	444a      	add	r2, r9
 80092d4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80092d8:	ebc2 0a01 	rsb	sl, r2, r1
 80092dc:	4651      	mov	r1, sl
 80092de:	4630      	mov	r0, r6
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	f7f8 fb09 	bl	80018f8 <_sbrk_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	9b01      	ldr	r3, [sp, #4]
 80092ea:	f000 812c 	beq.w	8009546 <_malloc_r+0x4da>
 80092ee:	ebc9 0200 	rsb	r2, r9, r0
 80092f2:	4452      	add	r2, sl
 80092f4:	f042 0201 	orr.w	r2, r2, #1
 80092f8:	6819      	ldr	r1, [r3, #0]
 80092fa:	f8c7 9008 	str.w	r9, [r7, #8]
 80092fe:	4451      	add	r1, sl
 8009300:	42bc      	cmp	r4, r7
 8009302:	f8c9 2004 	str.w	r2, [r9, #4]
 8009306:	6019      	str	r1, [r3, #0]
 8009308:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80093a8 <_malloc_r+0x33c>
 800930c:	d016      	beq.n	800933c <_malloc_r+0x2d0>
 800930e:	f1b8 0f0f 	cmp.w	r8, #15
 8009312:	f240 80ee 	bls.w	80094f2 <_malloc_r+0x486>
 8009316:	6862      	ldr	r2, [r4, #4]
 8009318:	f1a8 030c 	sub.w	r3, r8, #12
 800931c:	f023 0307 	bic.w	r3, r3, #7
 8009320:	18e0      	adds	r0, r4, r3
 8009322:	f002 0201 	and.w	r2, r2, #1
 8009326:	f04f 0e05 	mov.w	lr, #5
 800932a:	431a      	orrs	r2, r3
 800932c:	2b0f      	cmp	r3, #15
 800932e:	6062      	str	r2, [r4, #4]
 8009330:	f8c0 e004 	str.w	lr, [r0, #4]
 8009334:	f8c0 e008 	str.w	lr, [r0, #8]
 8009338:	f200 8109 	bhi.w	800954e <_malloc_r+0x4e2>
 800933c:	4b1b      	ldr	r3, [pc, #108]	; (80093ac <_malloc_r+0x340>)
 800933e:	68bc      	ldr	r4, [r7, #8]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	4291      	cmp	r1, r2
 8009344:	bf88      	it	hi
 8009346:	6019      	strhi	r1, [r3, #0]
 8009348:	4b19      	ldr	r3, [pc, #100]	; (80093b0 <_malloc_r+0x344>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	4291      	cmp	r1, r2
 800934e:	6862      	ldr	r2, [r4, #4]
 8009350:	bf88      	it	hi
 8009352:	6019      	strhi	r1, [r3, #0]
 8009354:	f022 0203 	bic.w	r2, r2, #3
 8009358:	4295      	cmp	r5, r2
 800935a:	eba2 0305 	sub.w	r3, r2, r5
 800935e:	d801      	bhi.n	8009364 <_malloc_r+0x2f8>
 8009360:	2b0f      	cmp	r3, #15
 8009362:	dc04      	bgt.n	800936e <_malloc_r+0x302>
 8009364:	4630      	mov	r0, r6
 8009366:	f000 f9c3 	bl	80096f0 <__malloc_unlock>
 800936a:	2400      	movs	r4, #0
 800936c:	e6aa      	b.n	80090c4 <_malloc_r+0x58>
 800936e:	1962      	adds	r2, r4, r5
 8009370:	f043 0301 	orr.w	r3, r3, #1
 8009374:	f045 0501 	orr.w	r5, r5, #1
 8009378:	6065      	str	r5, [r4, #4]
 800937a:	4630      	mov	r0, r6
 800937c:	60ba      	str	r2, [r7, #8]
 800937e:	6053      	str	r3, [r2, #4]
 8009380:	f000 f9b6 	bl	80096f0 <__malloc_unlock>
 8009384:	3408      	adds	r4, #8
 8009386:	4620      	mov	r0, r4
 8009388:	b003      	add	sp, #12
 800938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938e:	2814      	cmp	r0, #20
 8009390:	d968      	bls.n	8009464 <_malloc_r+0x3f8>
 8009392:	2854      	cmp	r0, #84	; 0x54
 8009394:	f200 8097 	bhi.w	80094c6 <_malloc_r+0x45a>
 8009398:	0b28      	lsrs	r0, r5, #12
 800939a:	306e      	adds	r0, #110	; 0x6e
 800939c:	0041      	lsls	r1, r0, #1
 800939e:	e6a5      	b.n	80090ec <_malloc_r+0x80>
 80093a0:	20000688 	.word	0x20000688
 80093a4:	20000ecc 	.word	0x20000ecc
 80093a8:	20000ed0 	.word	0x20000ed0
 80093ac:	20000ec8 	.word	0x20000ec8
 80093b0:	20000ec4 	.word	0x20000ec4
 80093b4:	20000a94 	.word	0x20000a94
 80093b8:	0a5a      	lsrs	r2, r3, #9
 80093ba:	2a04      	cmp	r2, #4
 80093bc:	d955      	bls.n	800946a <_malloc_r+0x3fe>
 80093be:	2a14      	cmp	r2, #20
 80093c0:	f200 80a7 	bhi.w	8009512 <_malloc_r+0x4a6>
 80093c4:	325b      	adds	r2, #91	; 0x5b
 80093c6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80093ca:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 80093ce:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800958c <_malloc_r+0x520>
 80093d2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80093d6:	4561      	cmp	r1, ip
 80093d8:	d07f      	beq.n	80094da <_malloc_r+0x46e>
 80093da:	684a      	ldr	r2, [r1, #4]
 80093dc:	f022 0203 	bic.w	r2, r2, #3
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d202      	bcs.n	80093ea <_malloc_r+0x37e>
 80093e4:	6889      	ldr	r1, [r1, #8]
 80093e6:	458c      	cmp	ip, r1
 80093e8:	d1f7      	bne.n	80093da <_malloc_r+0x36e>
 80093ea:	68ca      	ldr	r2, [r1, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60e2      	str	r2, [r4, #12]
 80093f0:	60a1      	str	r1, [r4, #8]
 80093f2:	6094      	str	r4, [r2, #8]
 80093f4:	60cc      	str	r4, [r1, #12]
 80093f6:	e6bb      	b.n	8009170 <_malloc_r+0x104>
 80093f8:	1963      	adds	r3, r4, r5
 80093fa:	f042 0701 	orr.w	r7, r2, #1
 80093fe:	f045 0501 	orr.w	r5, r5, #1
 8009402:	6065      	str	r5, [r4, #4]
 8009404:	4630      	mov	r0, r6
 8009406:	614b      	str	r3, [r1, #20]
 8009408:	610b      	str	r3, [r1, #16]
 800940a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800940e:	f8c3 e008 	str.w	lr, [r3, #8]
 8009412:	605f      	str	r7, [r3, #4]
 8009414:	509a      	str	r2, [r3, r2]
 8009416:	3408      	adds	r4, #8
 8009418:	f000 f96a 	bl	80096f0 <__malloc_unlock>
 800941c:	e652      	b.n	80090c4 <_malloc_r+0x58>
 800941e:	684b      	ldr	r3, [r1, #4]
 8009420:	e6a6      	b.n	8009170 <_malloc_r+0x104>
 8009422:	f109 0901 	add.w	r9, r9, #1
 8009426:	f019 0f03 	tst.w	r9, #3
 800942a:	f10c 0c08 	add.w	ip, ip, #8
 800942e:	f47f aeb1 	bne.w	8009194 <_malloc_r+0x128>
 8009432:	e02c      	b.n	800948e <_malloc_r+0x422>
 8009434:	f104 0308 	add.w	r3, r4, #8
 8009438:	6964      	ldr	r4, [r4, #20]
 800943a:	42a3      	cmp	r3, r4
 800943c:	bf08      	it	eq
 800943e:	3002      	addeq	r0, #2
 8009440:	f43f ae69 	beq.w	8009116 <_malloc_r+0xaa>
 8009444:	e62e      	b.n	80090a4 <_malloc_r+0x38>
 8009446:	441a      	add	r2, r3
 8009448:	461c      	mov	r4, r3
 800944a:	6851      	ldr	r1, [r2, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8009452:	f041 0101 	orr.w	r1, r1, #1
 8009456:	6051      	str	r1, [r2, #4]
 8009458:	4630      	mov	r0, r6
 800945a:	60eb      	str	r3, [r5, #12]
 800945c:	609d      	str	r5, [r3, #8]
 800945e:	f000 f947 	bl	80096f0 <__malloc_unlock>
 8009462:	e62f      	b.n	80090c4 <_malloc_r+0x58>
 8009464:	305b      	adds	r0, #91	; 0x5b
 8009466:	0041      	lsls	r1, r0, #1
 8009468:	e640      	b.n	80090ec <_malloc_r+0x80>
 800946a:	099a      	lsrs	r2, r3, #6
 800946c:	3238      	adds	r2, #56	; 0x38
 800946e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009472:	e7aa      	b.n	80093ca <_malloc_r+0x35e>
 8009474:	42bc      	cmp	r4, r7
 8009476:	4b45      	ldr	r3, [pc, #276]	; (800958c <_malloc_r+0x520>)
 8009478:	f43f af0e 	beq.w	8009298 <_malloc_r+0x22c>
 800947c:	689c      	ldr	r4, [r3, #8]
 800947e:	6862      	ldr	r2, [r4, #4]
 8009480:	f022 0203 	bic.w	r2, r2, #3
 8009484:	e768      	b.n	8009358 <_malloc_r+0x2ec>
 8009486:	f8d8 8000 	ldr.w	r8, [r8]
 800948a:	4598      	cmp	r8, r3
 800948c:	d17c      	bne.n	8009588 <_malloc_r+0x51c>
 800948e:	f010 0f03 	tst.w	r0, #3
 8009492:	f1a8 0308 	sub.w	r3, r8, #8
 8009496:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800949a:	d1f4      	bne.n	8009486 <_malloc_r+0x41a>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	ea23 0304 	bic.w	r3, r3, r4
 80094a2:	607b      	str	r3, [r7, #4]
 80094a4:	0064      	lsls	r4, r4, #1
 80094a6:	429c      	cmp	r4, r3
 80094a8:	f63f aeca 	bhi.w	8009240 <_malloc_r+0x1d4>
 80094ac:	2c00      	cmp	r4, #0
 80094ae:	f43f aec7 	beq.w	8009240 <_malloc_r+0x1d4>
 80094b2:	4223      	tst	r3, r4
 80094b4:	4648      	mov	r0, r9
 80094b6:	f47f ae69 	bne.w	800918c <_malloc_r+0x120>
 80094ba:	0064      	lsls	r4, r4, #1
 80094bc:	4223      	tst	r3, r4
 80094be:	f100 0004 	add.w	r0, r0, #4
 80094c2:	d0fa      	beq.n	80094ba <_malloc_r+0x44e>
 80094c4:	e662      	b.n	800918c <_malloc_r+0x120>
 80094c6:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80094ca:	d818      	bhi.n	80094fe <_malloc_r+0x492>
 80094cc:	0be8      	lsrs	r0, r5, #15
 80094ce:	3077      	adds	r0, #119	; 0x77
 80094d0:	0041      	lsls	r1, r0, #1
 80094d2:	e60b      	b.n	80090ec <_malloc_r+0x80>
 80094d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094d8:	e6fb      	b.n	80092d2 <_malloc_r+0x266>
 80094da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094de:	1092      	asrs	r2, r2, #2
 80094e0:	f04f 0c01 	mov.w	ip, #1
 80094e4:	fa0c f202 	lsl.w	r2, ip, r2
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80094ee:	460a      	mov	r2, r1
 80094f0:	e77d      	b.n	80093ee <_malloc_r+0x382>
 80094f2:	2301      	movs	r3, #1
 80094f4:	f8c9 3004 	str.w	r3, [r9, #4]
 80094f8:	464c      	mov	r4, r9
 80094fa:	2200      	movs	r2, #0
 80094fc:	e72c      	b.n	8009358 <_malloc_r+0x2ec>
 80094fe:	f240 5354 	movw	r3, #1364	; 0x554
 8009502:	4298      	cmp	r0, r3
 8009504:	d81c      	bhi.n	8009540 <_malloc_r+0x4d4>
 8009506:	0ca8      	lsrs	r0, r5, #18
 8009508:	307c      	adds	r0, #124	; 0x7c
 800950a:	0041      	lsls	r1, r0, #1
 800950c:	e5ee      	b.n	80090ec <_malloc_r+0x80>
 800950e:	3210      	adds	r2, #16
 8009510:	e6b4      	b.n	800927c <_malloc_r+0x210>
 8009512:	2a54      	cmp	r2, #84	; 0x54
 8009514:	d823      	bhi.n	800955e <_malloc_r+0x4f2>
 8009516:	0b1a      	lsrs	r2, r3, #12
 8009518:	326e      	adds	r2, #110	; 0x6e
 800951a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800951e:	e754      	b.n	80093ca <_malloc_r+0x35e>
 8009520:	68bc      	ldr	r4, [r7, #8]
 8009522:	6862      	ldr	r2, [r4, #4]
 8009524:	f022 0203 	bic.w	r2, r2, #3
 8009528:	e716      	b.n	8009358 <_malloc_r+0x2ec>
 800952a:	f3cb 000b 	ubfx	r0, fp, #0, #12
 800952e:	2800      	cmp	r0, #0
 8009530:	f47f aeb9 	bne.w	80092a6 <_malloc_r+0x23a>
 8009534:	4442      	add	r2, r8
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f042 0201 	orr.w	r2, r2, #1
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	e6fd      	b.n	800933c <_malloc_r+0x2d0>
 8009540:	21fc      	movs	r1, #252	; 0xfc
 8009542:	207e      	movs	r0, #126	; 0x7e
 8009544:	e5d2      	b.n	80090ec <_malloc_r+0x80>
 8009546:	2201      	movs	r2, #1
 8009548:	f04f 0a00 	mov.w	sl, #0
 800954c:	e6d4      	b.n	80092f8 <_malloc_r+0x28c>
 800954e:	f104 0108 	add.w	r1, r4, #8
 8009552:	4630      	mov	r0, r6
 8009554:	f7ff fa76 	bl	8008a44 <_free_r>
 8009558:	f8da 1000 	ldr.w	r1, [sl]
 800955c:	e6ee      	b.n	800933c <_malloc_r+0x2d0>
 800955e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009562:	d804      	bhi.n	800956e <_malloc_r+0x502>
 8009564:	0bda      	lsrs	r2, r3, #15
 8009566:	3277      	adds	r2, #119	; 0x77
 8009568:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800956c:	e72d      	b.n	80093ca <_malloc_r+0x35e>
 800956e:	f240 5154 	movw	r1, #1364	; 0x554
 8009572:	428a      	cmp	r2, r1
 8009574:	d804      	bhi.n	8009580 <_malloc_r+0x514>
 8009576:	0c9a      	lsrs	r2, r3, #18
 8009578:	327c      	adds	r2, #124	; 0x7c
 800957a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800957e:	e724      	b.n	80093ca <_malloc_r+0x35e>
 8009580:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8009584:	227e      	movs	r2, #126	; 0x7e
 8009586:	e720      	b.n	80093ca <_malloc_r+0x35e>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	e78b      	b.n	80094a4 <_malloc_r+0x438>
 800958c:	20000688 	.word	0x20000688

08009590 <memchr>:
 8009590:	0783      	lsls	r3, r0, #30
 8009592:	b470      	push	{r4, r5, r6}
 8009594:	b2c9      	uxtb	r1, r1
 8009596:	d040      	beq.n	800961a <memchr+0x8a>
 8009598:	1e54      	subs	r4, r2, #1
 800959a:	2a00      	cmp	r2, #0
 800959c:	d03f      	beq.n	800961e <memchr+0x8e>
 800959e:	7803      	ldrb	r3, [r0, #0]
 80095a0:	428b      	cmp	r3, r1
 80095a2:	bf18      	it	ne
 80095a4:	1c43      	addne	r3, r0, #1
 80095a6:	d106      	bne.n	80095b6 <memchr+0x26>
 80095a8:	e01d      	b.n	80095e6 <memchr+0x56>
 80095aa:	b1f4      	cbz	r4, 80095ea <memchr+0x5a>
 80095ac:	7802      	ldrb	r2, [r0, #0]
 80095ae:	428a      	cmp	r2, r1
 80095b0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80095b4:	d017      	beq.n	80095e6 <memchr+0x56>
 80095b6:	f013 0f03 	tst.w	r3, #3
 80095ba:	4618      	mov	r0, r3
 80095bc:	f103 0301 	add.w	r3, r3, #1
 80095c0:	d1f3      	bne.n	80095aa <memchr+0x1a>
 80095c2:	2c03      	cmp	r4, #3
 80095c4:	d814      	bhi.n	80095f0 <memchr+0x60>
 80095c6:	b184      	cbz	r4, 80095ea <memchr+0x5a>
 80095c8:	7803      	ldrb	r3, [r0, #0]
 80095ca:	428b      	cmp	r3, r1
 80095cc:	d00b      	beq.n	80095e6 <memchr+0x56>
 80095ce:	1905      	adds	r5, r0, r4
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	e002      	b.n	80095da <memchr+0x4a>
 80095d4:	7802      	ldrb	r2, [r0, #0]
 80095d6:	428a      	cmp	r2, r1
 80095d8:	d005      	beq.n	80095e6 <memchr+0x56>
 80095da:	42ab      	cmp	r3, r5
 80095dc:	4618      	mov	r0, r3
 80095de:	f103 0301 	add.w	r3, r3, #1
 80095e2:	d1f7      	bne.n	80095d4 <memchr+0x44>
 80095e4:	2000      	movs	r0, #0
 80095e6:	bc70      	pop	{r4, r5, r6}
 80095e8:	4770      	bx	lr
 80095ea:	4620      	mov	r0, r4
 80095ec:	bc70      	pop	{r4, r5, r6}
 80095ee:	4770      	bx	lr
 80095f0:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80095f4:	4602      	mov	r2, r0
 80095f6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80095fa:	4610      	mov	r0, r2
 80095fc:	3204      	adds	r2, #4
 80095fe:	6803      	ldr	r3, [r0, #0]
 8009600:	4073      	eors	r3, r6
 8009602:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8009606:	ea25 0303 	bic.w	r3, r5, r3
 800960a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800960e:	d1da      	bne.n	80095c6 <memchr+0x36>
 8009610:	3c04      	subs	r4, #4
 8009612:	2c03      	cmp	r4, #3
 8009614:	4610      	mov	r0, r2
 8009616:	d8f0      	bhi.n	80095fa <memchr+0x6a>
 8009618:	e7d5      	b.n	80095c6 <memchr+0x36>
 800961a:	4614      	mov	r4, r2
 800961c:	e7d1      	b.n	80095c2 <memchr+0x32>
 800961e:	4610      	mov	r0, r2
 8009620:	e7e1      	b.n	80095e6 <memchr+0x56>
 8009622:	bf00      	nop

08009624 <memmove>:
 8009624:	4288      	cmp	r0, r1
 8009626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009628:	d90d      	bls.n	8009646 <memmove+0x22>
 800962a:	188b      	adds	r3, r1, r2
 800962c:	4298      	cmp	r0, r3
 800962e:	d20a      	bcs.n	8009646 <memmove+0x22>
 8009630:	1881      	adds	r1, r0, r2
 8009632:	2a00      	cmp	r2, #0
 8009634:	d054      	beq.n	80096e0 <memmove+0xbc>
 8009636:	1a9a      	subs	r2, r3, r2
 8009638:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800963c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009640:	4293      	cmp	r3, r2
 8009642:	d1f9      	bne.n	8009638 <memmove+0x14>
 8009644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009646:	2a0f      	cmp	r2, #15
 8009648:	d948      	bls.n	80096dc <memmove+0xb8>
 800964a:	ea40 0301 	orr.w	r3, r0, r1
 800964e:	079b      	lsls	r3, r3, #30
 8009650:	d147      	bne.n	80096e2 <memmove+0xbe>
 8009652:	f100 0410 	add.w	r4, r0, #16
 8009656:	f101 0310 	add.w	r3, r1, #16
 800965a:	4615      	mov	r5, r2
 800965c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8009660:	f844 6c10 	str.w	r6, [r4, #-16]
 8009664:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8009668:	f844 6c0c 	str.w	r6, [r4, #-12]
 800966c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8009670:	f844 6c08 	str.w	r6, [r4, #-8]
 8009674:	3d10      	subs	r5, #16
 8009676:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800967a:	f844 6c04 	str.w	r6, [r4, #-4]
 800967e:	2d0f      	cmp	r5, #15
 8009680:	f103 0310 	add.w	r3, r3, #16
 8009684:	f104 0410 	add.w	r4, r4, #16
 8009688:	d8e8      	bhi.n	800965c <memmove+0x38>
 800968a:	f1a2 0310 	sub.w	r3, r2, #16
 800968e:	f023 030f 	bic.w	r3, r3, #15
 8009692:	f002 0e0f 	and.w	lr, r2, #15
 8009696:	3310      	adds	r3, #16
 8009698:	f1be 0f03 	cmp.w	lr, #3
 800969c:	4419      	add	r1, r3
 800969e:	4403      	add	r3, r0
 80096a0:	d921      	bls.n	80096e6 <memmove+0xc2>
 80096a2:	1f1e      	subs	r6, r3, #4
 80096a4:	460d      	mov	r5, r1
 80096a6:	4674      	mov	r4, lr
 80096a8:	3c04      	subs	r4, #4
 80096aa:	f855 7b04 	ldr.w	r7, [r5], #4
 80096ae:	f846 7f04 	str.w	r7, [r6, #4]!
 80096b2:	2c03      	cmp	r4, #3
 80096b4:	d8f8      	bhi.n	80096a8 <memmove+0x84>
 80096b6:	f1ae 0404 	sub.w	r4, lr, #4
 80096ba:	f024 0403 	bic.w	r4, r4, #3
 80096be:	3404      	adds	r4, #4
 80096c0:	4423      	add	r3, r4
 80096c2:	4421      	add	r1, r4
 80096c4:	f002 0203 	and.w	r2, r2, #3
 80096c8:	b152      	cbz	r2, 80096e0 <memmove+0xbc>
 80096ca:	3b01      	subs	r3, #1
 80096cc:	440a      	add	r2, r1
 80096ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096d6:	4291      	cmp	r1, r2
 80096d8:	d1f9      	bne.n	80096ce <memmove+0xaa>
 80096da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096dc:	4603      	mov	r3, r0
 80096de:	e7f3      	b.n	80096c8 <memmove+0xa4>
 80096e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e2:	4603      	mov	r3, r0
 80096e4:	e7f1      	b.n	80096ca <memmove+0xa6>
 80096e6:	4672      	mov	r2, lr
 80096e8:	e7ee      	b.n	80096c8 <memmove+0xa4>
 80096ea:	bf00      	nop

080096ec <__malloc_lock>:
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop

080096f0 <__malloc_unlock>:
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop

080096f4 <_Balloc>:
 80096f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80096f6:	b570      	push	{r4, r5, r6, lr}
 80096f8:	4605      	mov	r5, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	b14b      	cbz	r3, 8009712 <_Balloc+0x1e>
 80096fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009702:	b180      	cbz	r0, 8009726 <_Balloc+0x32>
 8009704:	6802      	ldr	r2, [r0, #0]
 8009706:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800970a:	2300      	movs	r3, #0
 800970c:	6103      	str	r3, [r0, #16]
 800970e:	60c3      	str	r3, [r0, #12]
 8009710:	bd70      	pop	{r4, r5, r6, pc}
 8009712:	2104      	movs	r1, #4
 8009714:	2221      	movs	r2, #33	; 0x21
 8009716:	f000 fe63 	bl	800a3e0 <_calloc_r>
 800971a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800971c:	4603      	mov	r3, r0
 800971e:	2800      	cmp	r0, #0
 8009720:	d1ed      	bne.n	80096fe <_Balloc+0xa>
 8009722:	2000      	movs	r0, #0
 8009724:	bd70      	pop	{r4, r5, r6, pc}
 8009726:	2101      	movs	r1, #1
 8009728:	fa01 f604 	lsl.w	r6, r1, r4
 800972c:	1d72      	adds	r2, r6, #5
 800972e:	4628      	mov	r0, r5
 8009730:	0092      	lsls	r2, r2, #2
 8009732:	f000 fe55 	bl	800a3e0 <_calloc_r>
 8009736:	2800      	cmp	r0, #0
 8009738:	d0f3      	beq.n	8009722 <_Balloc+0x2e>
 800973a:	6044      	str	r4, [r0, #4]
 800973c:	6086      	str	r6, [r0, #8]
 800973e:	e7e4      	b.n	800970a <_Balloc+0x16>

08009740 <_Bfree>:
 8009740:	b131      	cbz	r1, 8009750 <_Bfree+0x10>
 8009742:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009744:	684a      	ldr	r2, [r1, #4]
 8009746:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800974a:	6008      	str	r0, [r1, #0]
 800974c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop

08009754 <__multadd>:
 8009754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009756:	690c      	ldr	r4, [r1, #16]
 8009758:	b083      	sub	sp, #12
 800975a:	460d      	mov	r5, r1
 800975c:	4606      	mov	r6, r0
 800975e:	f101 0e14 	add.w	lr, r1, #20
 8009762:	2700      	movs	r7, #0
 8009764:	f8de 1000 	ldr.w	r1, [lr]
 8009768:	b288      	uxth	r0, r1
 800976a:	0c09      	lsrs	r1, r1, #16
 800976c:	fb02 3300 	mla	r3, r2, r0, r3
 8009770:	fb02 f101 	mul.w	r1, r2, r1
 8009774:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8009778:	3701      	adds	r7, #1
 800977a:	b29b      	uxth	r3, r3
 800977c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8009780:	42bc      	cmp	r4, r7
 8009782:	f84e 3b04 	str.w	r3, [lr], #4
 8009786:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800978a:	dceb      	bgt.n	8009764 <__multadd+0x10>
 800978c:	b13b      	cbz	r3, 800979e <__multadd+0x4a>
 800978e:	68aa      	ldr	r2, [r5, #8]
 8009790:	4294      	cmp	r4, r2
 8009792:	da07      	bge.n	80097a4 <__multadd+0x50>
 8009794:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8009798:	3401      	adds	r4, #1
 800979a:	6153      	str	r3, [r2, #20]
 800979c:	612c      	str	r4, [r5, #16]
 800979e:	4628      	mov	r0, r5
 80097a0:	b003      	add	sp, #12
 80097a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097a4:	6869      	ldr	r1, [r5, #4]
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	3101      	adds	r1, #1
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7ff ffa2 	bl	80096f4 <_Balloc>
 80097b0:	692a      	ldr	r2, [r5, #16]
 80097b2:	3202      	adds	r2, #2
 80097b4:	f105 010c 	add.w	r1, r5, #12
 80097b8:	4607      	mov	r7, r0
 80097ba:	0092      	lsls	r2, r2, #2
 80097bc:	300c      	adds	r0, #12
 80097be:	f7f6 fd11 	bl	80001e4 <memcpy>
 80097c2:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80097c4:	6869      	ldr	r1, [r5, #4]
 80097c6:	9b01      	ldr	r3, [sp, #4]
 80097c8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80097cc:	6028      	str	r0, [r5, #0]
 80097ce:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80097d2:	463d      	mov	r5, r7
 80097d4:	e7de      	b.n	8009794 <__multadd+0x40>
 80097d6:	bf00      	nop

080097d8 <__hi0bits>:
 80097d8:	0c03      	lsrs	r3, r0, #16
 80097da:	041b      	lsls	r3, r3, #16
 80097dc:	b9b3      	cbnz	r3, 800980c <__hi0bits+0x34>
 80097de:	0400      	lsls	r0, r0, #16
 80097e0:	2310      	movs	r3, #16
 80097e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097e6:	bf04      	itt	eq
 80097e8:	0200      	lsleq	r0, r0, #8
 80097ea:	3308      	addeq	r3, #8
 80097ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097f0:	bf04      	itt	eq
 80097f2:	0100      	lsleq	r0, r0, #4
 80097f4:	3304      	addeq	r3, #4
 80097f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097fa:	bf04      	itt	eq
 80097fc:	0080      	lsleq	r0, r0, #2
 80097fe:	3302      	addeq	r3, #2
 8009800:	2800      	cmp	r0, #0
 8009802:	db07      	blt.n	8009814 <__hi0bits+0x3c>
 8009804:	0042      	lsls	r2, r0, #1
 8009806:	d403      	bmi.n	8009810 <__hi0bits+0x38>
 8009808:	2020      	movs	r0, #32
 800980a:	4770      	bx	lr
 800980c:	2300      	movs	r3, #0
 800980e:	e7e8      	b.n	80097e2 <__hi0bits+0xa>
 8009810:	1c58      	adds	r0, r3, #1
 8009812:	4770      	bx	lr
 8009814:	4618      	mov	r0, r3
 8009816:	4770      	bx	lr

08009818 <__lo0bits>:
 8009818:	6803      	ldr	r3, [r0, #0]
 800981a:	f013 0207 	ands.w	r2, r3, #7
 800981e:	d007      	beq.n	8009830 <__lo0bits+0x18>
 8009820:	07d9      	lsls	r1, r3, #31
 8009822:	d420      	bmi.n	8009866 <__lo0bits+0x4e>
 8009824:	079a      	lsls	r2, r3, #30
 8009826:	d420      	bmi.n	800986a <__lo0bits+0x52>
 8009828:	089b      	lsrs	r3, r3, #2
 800982a:	6003      	str	r3, [r0, #0]
 800982c:	2002      	movs	r0, #2
 800982e:	4770      	bx	lr
 8009830:	b299      	uxth	r1, r3
 8009832:	b909      	cbnz	r1, 8009838 <__lo0bits+0x20>
 8009834:	0c1b      	lsrs	r3, r3, #16
 8009836:	2210      	movs	r2, #16
 8009838:	f013 0fff 	tst.w	r3, #255	; 0xff
 800983c:	bf04      	itt	eq
 800983e:	0a1b      	lsreq	r3, r3, #8
 8009840:	3208      	addeq	r2, #8
 8009842:	0719      	lsls	r1, r3, #28
 8009844:	bf04      	itt	eq
 8009846:	091b      	lsreq	r3, r3, #4
 8009848:	3204      	addeq	r2, #4
 800984a:	0799      	lsls	r1, r3, #30
 800984c:	bf04      	itt	eq
 800984e:	089b      	lsreq	r3, r3, #2
 8009850:	3202      	addeq	r2, #2
 8009852:	07d9      	lsls	r1, r3, #31
 8009854:	d404      	bmi.n	8009860 <__lo0bits+0x48>
 8009856:	085b      	lsrs	r3, r3, #1
 8009858:	d101      	bne.n	800985e <__lo0bits+0x46>
 800985a:	2020      	movs	r0, #32
 800985c:	4770      	bx	lr
 800985e:	3201      	adds	r2, #1
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	4610      	mov	r0, r2
 8009864:	4770      	bx	lr
 8009866:	2000      	movs	r0, #0
 8009868:	4770      	bx	lr
 800986a:	085b      	lsrs	r3, r3, #1
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	2001      	movs	r0, #1
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop

08009874 <__i2b>:
 8009874:	b510      	push	{r4, lr}
 8009876:	460c      	mov	r4, r1
 8009878:	2101      	movs	r1, #1
 800987a:	f7ff ff3b 	bl	80096f4 <_Balloc>
 800987e:	2201      	movs	r2, #1
 8009880:	6144      	str	r4, [r0, #20]
 8009882:	6102      	str	r2, [r0, #16]
 8009884:	bd10      	pop	{r4, pc}
 8009886:	bf00      	nop

08009888 <__multiply>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	690f      	ldr	r7, [r1, #16]
 800988e:	6916      	ldr	r6, [r2, #16]
 8009890:	42b7      	cmp	r7, r6
 8009892:	b083      	sub	sp, #12
 8009894:	460d      	mov	r5, r1
 8009896:	4614      	mov	r4, r2
 8009898:	f2c0 808d 	blt.w	80099b6 <__multiply+0x12e>
 800989c:	4633      	mov	r3, r6
 800989e:	463e      	mov	r6, r7
 80098a0:	461f      	mov	r7, r3
 80098a2:	68ab      	ldr	r3, [r5, #8]
 80098a4:	6869      	ldr	r1, [r5, #4]
 80098a6:	eb06 0807 	add.w	r8, r6, r7
 80098aa:	4598      	cmp	r8, r3
 80098ac:	bfc8      	it	gt
 80098ae:	3101      	addgt	r1, #1
 80098b0:	f7ff ff20 	bl	80096f4 <_Balloc>
 80098b4:	f100 0c14 	add.w	ip, r0, #20
 80098b8:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80098bc:	45cc      	cmp	ip, r9
 80098be:	9000      	str	r0, [sp, #0]
 80098c0:	d205      	bcs.n	80098ce <__multiply+0x46>
 80098c2:	4663      	mov	r3, ip
 80098c4:	2100      	movs	r1, #0
 80098c6:	f843 1b04 	str.w	r1, [r3], #4
 80098ca:	4599      	cmp	r9, r3
 80098cc:	d8fb      	bhi.n	80098c6 <__multiply+0x3e>
 80098ce:	f104 0214 	add.w	r2, r4, #20
 80098d2:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80098d6:	f105 0314 	add.w	r3, r5, #20
 80098da:	4552      	cmp	r2, sl
 80098dc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80098e0:	d254      	bcs.n	800998c <__multiply+0x104>
 80098e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80098e6:	4699      	mov	r9, r3
 80098e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80098ec:	fa1f fb83 	uxth.w	fp, r3
 80098f0:	f1bb 0f00 	cmp.w	fp, #0
 80098f4:	d020      	beq.n	8009938 <__multiply+0xb0>
 80098f6:	2000      	movs	r0, #0
 80098f8:	464f      	mov	r7, r9
 80098fa:	4666      	mov	r6, ip
 80098fc:	4605      	mov	r5, r0
 80098fe:	e000      	b.n	8009902 <__multiply+0x7a>
 8009900:	461e      	mov	r6, r3
 8009902:	f857 4b04 	ldr.w	r4, [r7], #4
 8009906:	6830      	ldr	r0, [r6, #0]
 8009908:	b2a1      	uxth	r1, r4
 800990a:	b283      	uxth	r3, r0
 800990c:	fb0b 3101 	mla	r1, fp, r1, r3
 8009910:	0c24      	lsrs	r4, r4, #16
 8009912:	0c00      	lsrs	r0, r0, #16
 8009914:	194b      	adds	r3, r1, r5
 8009916:	fb0b 0004 	mla	r0, fp, r4, r0
 800991a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800991e:	b299      	uxth	r1, r3
 8009920:	4633      	mov	r3, r6
 8009922:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009926:	45be      	cmp	lr, r7
 8009928:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800992c:	f843 1b04 	str.w	r1, [r3], #4
 8009930:	d8e6      	bhi.n	8009900 <__multiply+0x78>
 8009932:	6075      	str	r5, [r6, #4]
 8009934:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009938:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800993c:	d020      	beq.n	8009980 <__multiply+0xf8>
 800993e:	f8dc 3000 	ldr.w	r3, [ip]
 8009942:	4667      	mov	r7, ip
 8009944:	4618      	mov	r0, r3
 8009946:	464d      	mov	r5, r9
 8009948:	2100      	movs	r1, #0
 800994a:	e000      	b.n	800994e <__multiply+0xc6>
 800994c:	4637      	mov	r7, r6
 800994e:	882c      	ldrh	r4, [r5, #0]
 8009950:	0c00      	lsrs	r0, r0, #16
 8009952:	fb0b 0004 	mla	r0, fp, r4, r0
 8009956:	4401      	add	r1, r0
 8009958:	b29c      	uxth	r4, r3
 800995a:	463e      	mov	r6, r7
 800995c:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8009960:	f846 3b04 	str.w	r3, [r6], #4
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f855 4b04 	ldr.w	r4, [r5], #4
 800996a:	b283      	uxth	r3, r0
 800996c:	0c24      	lsrs	r4, r4, #16
 800996e:	fb0b 3404 	mla	r4, fp, r4, r3
 8009972:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8009976:	45ae      	cmp	lr, r5
 8009978:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800997c:	d8e6      	bhi.n	800994c <__multiply+0xc4>
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	4592      	cmp	sl, r2
 8009982:	f10c 0c04 	add.w	ip, ip, #4
 8009986:	d8af      	bhi.n	80098e8 <__multiply+0x60>
 8009988:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800998c:	f1b8 0f00 	cmp.w	r8, #0
 8009990:	dd0b      	ble.n	80099aa <__multiply+0x122>
 8009992:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009996:	f1a9 0904 	sub.w	r9, r9, #4
 800999a:	b11b      	cbz	r3, 80099a4 <__multiply+0x11c>
 800999c:	e005      	b.n	80099aa <__multiply+0x122>
 800999e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80099a2:	b913      	cbnz	r3, 80099aa <__multiply+0x122>
 80099a4:	f1b8 0801 	subs.w	r8, r8, #1
 80099a8:	d1f9      	bne.n	800999e <__multiply+0x116>
 80099aa:	9800      	ldr	r0, [sp, #0]
 80099ac:	f8c0 8010 	str.w	r8, [r0, #16]
 80099b0:	b003      	add	sp, #12
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	4615      	mov	r5, r2
 80099b8:	460c      	mov	r4, r1
 80099ba:	e772      	b.n	80098a2 <__multiply+0x1a>

080099bc <__pow5mult>:
 80099bc:	f012 0303 	ands.w	r3, r2, #3
 80099c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c4:	4614      	mov	r4, r2
 80099c6:	4607      	mov	r7, r0
 80099c8:	460e      	mov	r6, r1
 80099ca:	d12d      	bne.n	8009a28 <__pow5mult+0x6c>
 80099cc:	10a4      	asrs	r4, r4, #2
 80099ce:	d01c      	beq.n	8009a0a <__pow5mult+0x4e>
 80099d0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80099d2:	b395      	cbz	r5, 8009a3a <__pow5mult+0x7e>
 80099d4:	07e3      	lsls	r3, r4, #31
 80099d6:	f04f 0800 	mov.w	r8, #0
 80099da:	d406      	bmi.n	80099ea <__pow5mult+0x2e>
 80099dc:	1064      	asrs	r4, r4, #1
 80099de:	d014      	beq.n	8009a0a <__pow5mult+0x4e>
 80099e0:	6828      	ldr	r0, [r5, #0]
 80099e2:	b1a8      	cbz	r0, 8009a10 <__pow5mult+0x54>
 80099e4:	4605      	mov	r5, r0
 80099e6:	07e3      	lsls	r3, r4, #31
 80099e8:	d5f8      	bpl.n	80099dc <__pow5mult+0x20>
 80099ea:	4638      	mov	r0, r7
 80099ec:	4631      	mov	r1, r6
 80099ee:	462a      	mov	r2, r5
 80099f0:	f7ff ff4a 	bl	8009888 <__multiply>
 80099f4:	b1b6      	cbz	r6, 8009a24 <__pow5mult+0x68>
 80099f6:	6872      	ldr	r2, [r6, #4]
 80099f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099fa:	1064      	asrs	r4, r4, #1
 80099fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a00:	6031      	str	r1, [r6, #0]
 8009a02:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8009a06:	4606      	mov	r6, r0
 8009a08:	d1ea      	bne.n	80099e0 <__pow5mult+0x24>
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a10:	4629      	mov	r1, r5
 8009a12:	462a      	mov	r2, r5
 8009a14:	4638      	mov	r0, r7
 8009a16:	f7ff ff37 	bl	8009888 <__multiply>
 8009a1a:	6028      	str	r0, [r5, #0]
 8009a1c:	f8c0 8000 	str.w	r8, [r0]
 8009a20:	4605      	mov	r5, r0
 8009a22:	e7e0      	b.n	80099e6 <__pow5mult+0x2a>
 8009a24:	4606      	mov	r6, r0
 8009a26:	e7d9      	b.n	80099dc <__pow5mult+0x20>
 8009a28:	1e5a      	subs	r2, r3, #1
 8009a2a:	4d0b      	ldr	r5, [pc, #44]	; (8009a58 <__pow5mult+0x9c>)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009a32:	f7ff fe8f 	bl	8009754 <__multadd>
 8009a36:	4606      	mov	r6, r0
 8009a38:	e7c8      	b.n	80099cc <__pow5mult+0x10>
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f7ff fe59 	bl	80096f4 <_Balloc>
 8009a42:	f240 2171 	movw	r1, #625	; 0x271
 8009a46:	2201      	movs	r2, #1
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6141      	str	r1, [r0, #20]
 8009a4c:	6102      	str	r2, [r0, #16]
 8009a4e:	4605      	mov	r5, r0
 8009a50:	64b8      	str	r0, [r7, #72]	; 0x48
 8009a52:	6003      	str	r3, [r0, #0]
 8009a54:	e7be      	b.n	80099d4 <__pow5mult+0x18>
 8009a56:	bf00      	nop
 8009a58:	0801ae30 	.word	0x0801ae30

08009a5c <__lshift>:
 8009a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a60:	690f      	ldr	r7, [r1, #16]
 8009a62:	688b      	ldr	r3, [r1, #8]
 8009a64:	ea4f 1962 	mov.w	r9, r2, asr #5
 8009a68:	444f      	add	r7, r9
 8009a6a:	1c7d      	adds	r5, r7, #1
 8009a6c:	429d      	cmp	r5, r3
 8009a6e:	460e      	mov	r6, r1
 8009a70:	4614      	mov	r4, r2
 8009a72:	6849      	ldr	r1, [r1, #4]
 8009a74:	4680      	mov	r8, r0
 8009a76:	dd04      	ble.n	8009a82 <__lshift+0x26>
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	429d      	cmp	r5, r3
 8009a7c:	f101 0101 	add.w	r1, r1, #1
 8009a80:	dcfa      	bgt.n	8009a78 <__lshift+0x1c>
 8009a82:	4640      	mov	r0, r8
 8009a84:	f7ff fe36 	bl	80096f4 <_Balloc>
 8009a88:	f1b9 0f00 	cmp.w	r9, #0
 8009a8c:	f100 0114 	add.w	r1, r0, #20
 8009a90:	dd09      	ble.n	8009aa6 <__lshift+0x4a>
 8009a92:	2300      	movs	r3, #0
 8009a94:	469e      	mov	lr, r3
 8009a96:	460a      	mov	r2, r1
 8009a98:	3301      	adds	r3, #1
 8009a9a:	454b      	cmp	r3, r9
 8009a9c:	f842 eb04 	str.w	lr, [r2], #4
 8009aa0:	d1fa      	bne.n	8009a98 <__lshift+0x3c>
 8009aa2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009aa6:	6932      	ldr	r2, [r6, #16]
 8009aa8:	f106 0314 	add.w	r3, r6, #20
 8009aac:	f014 0c1f 	ands.w	ip, r4, #31
 8009ab0:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8009ab4:	d01f      	beq.n	8009af6 <__lshift+0x9a>
 8009ab6:	f1cc 0920 	rsb	r9, ip, #32
 8009aba:	2200      	movs	r2, #0
 8009abc:	681c      	ldr	r4, [r3, #0]
 8009abe:	fa04 f40c 	lsl.w	r4, r4, ip
 8009ac2:	4314      	orrs	r4, r2
 8009ac4:	468a      	mov	sl, r1
 8009ac6:	f841 4b04 	str.w	r4, [r1], #4
 8009aca:	f853 4b04 	ldr.w	r4, [r3], #4
 8009ace:	459e      	cmp	lr, r3
 8009ad0:	fa24 f209 	lsr.w	r2, r4, r9
 8009ad4:	d8f2      	bhi.n	8009abc <__lshift+0x60>
 8009ad6:	f8ca 2004 	str.w	r2, [sl, #4]
 8009ada:	b102      	cbz	r2, 8009ade <__lshift+0x82>
 8009adc:	1cbd      	adds	r5, r7, #2
 8009ade:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8009ae2:	6872      	ldr	r2, [r6, #4]
 8009ae4:	3d01      	subs	r5, #1
 8009ae6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aea:	6105      	str	r5, [r0, #16]
 8009aec:	6031      	str	r1, [r6, #0]
 8009aee:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8009af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af6:	3904      	subs	r1, #4
 8009af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b00:	459e      	cmp	lr, r3
 8009b02:	d8f9      	bhi.n	8009af8 <__lshift+0x9c>
 8009b04:	e7eb      	b.n	8009ade <__lshift+0x82>
 8009b06:	bf00      	nop

08009b08 <__mcmp>:
 8009b08:	6902      	ldr	r2, [r0, #16]
 8009b0a:	690b      	ldr	r3, [r1, #16]
 8009b0c:	1ad2      	subs	r2, r2, r3
 8009b0e:	d113      	bne.n	8009b38 <__mcmp+0x30>
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	3014      	adds	r0, #20
 8009b14:	3114      	adds	r1, #20
 8009b16:	4419      	add	r1, r3
 8009b18:	b410      	push	{r4}
 8009b1a:	4403      	add	r3, r0
 8009b1c:	e001      	b.n	8009b22 <__mcmp+0x1a>
 8009b1e:	4298      	cmp	r0, r3
 8009b20:	d20c      	bcs.n	8009b3c <__mcmp+0x34>
 8009b22:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009b26:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b2a:	4294      	cmp	r4, r2
 8009b2c:	d0f7      	beq.n	8009b1e <__mcmp+0x16>
 8009b2e:	d309      	bcc.n	8009b44 <__mcmp+0x3c>
 8009b30:	2001      	movs	r0, #1
 8009b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4770      	bx	lr
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop

08009b50 <__mdiff>:
 8009b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b54:	460e      	mov	r6, r1
 8009b56:	4605      	mov	r5, r0
 8009b58:	4611      	mov	r1, r2
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	f7ff ffd3 	bl	8009b08 <__mcmp>
 8009b62:	1e07      	subs	r7, r0, #0
 8009b64:	d054      	beq.n	8009c10 <__mdiff+0xc0>
 8009b66:	db4d      	blt.n	8009c04 <__mdiff+0xb4>
 8009b68:	f04f 0800 	mov.w	r8, #0
 8009b6c:	6871      	ldr	r1, [r6, #4]
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f7ff fdc0 	bl	80096f4 <_Balloc>
 8009b74:	6937      	ldr	r7, [r6, #16]
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	f8c0 800c 	str.w	r8, [r0, #12]
 8009b7c:	3614      	adds	r6, #20
 8009b7e:	f104 0214 	add.w	r2, r4, #20
 8009b82:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8009b86:	f100 0514 	add.w	r5, r0, #20
 8009b8a:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b94:	f852 4b04 	ldr.w	r4, [r2], #4
 8009b98:	fa13 f388 	uxtah	r3, r3, r8
 8009b9c:	b2a1      	uxth	r1, r4
 8009b9e:	0c24      	lsrs	r4, r4, #16
 8009ba0:	1a59      	subs	r1, r3, r1
 8009ba2:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8009ba6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009baa:	b289      	uxth	r1, r1
 8009bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009bb0:	4594      	cmp	ip, r2
 8009bb2:	f845 1b04 	str.w	r1, [r5], #4
 8009bb6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009bba:	4634      	mov	r4, r6
 8009bbc:	d8e8      	bhi.n	8009b90 <__mdiff+0x40>
 8009bbe:	45b6      	cmp	lr, r6
 8009bc0:	46ac      	mov	ip, r5
 8009bc2:	d915      	bls.n	8009bf0 <__mdiff+0xa0>
 8009bc4:	f854 2b04 	ldr.w	r2, [r4], #4
 8009bc8:	fa13 f182 	uxtah	r1, r3, r2
 8009bcc:	0c13      	lsrs	r3, r2, #16
 8009bce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009bd2:	b289      	uxth	r1, r1
 8009bd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009bd8:	45a6      	cmp	lr, r4
 8009bda:	f845 1b04 	str.w	r1, [r5], #4
 8009bde:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009be2:	d8ef      	bhi.n	8009bc4 <__mdiff+0x74>
 8009be4:	43f6      	mvns	r6, r6
 8009be6:	4476      	add	r6, lr
 8009be8:	f026 0503 	bic.w	r5, r6, #3
 8009bec:	3504      	adds	r5, #4
 8009bee:	4465      	add	r5, ip
 8009bf0:	3d04      	subs	r5, #4
 8009bf2:	b921      	cbnz	r1, 8009bfe <__mdiff+0xae>
 8009bf4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009bf8:	3f01      	subs	r7, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0fa      	beq.n	8009bf4 <__mdiff+0xa4>
 8009bfe:	6107      	str	r7, [r0, #16]
 8009c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c04:	4633      	mov	r3, r6
 8009c06:	f04f 0801 	mov.w	r8, #1
 8009c0a:	4626      	mov	r6, r4
 8009c0c:	461c      	mov	r4, r3
 8009c0e:	e7ad      	b.n	8009b6c <__mdiff+0x1c>
 8009c10:	4628      	mov	r0, r5
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7ff fd6e 	bl	80096f4 <_Balloc>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	6147      	str	r7, [r0, #20]
 8009c1c:	6103      	str	r3, [r0, #16]
 8009c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c22:	bf00      	nop

08009c24 <__d2b>:
 8009c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c28:	ec57 6b10 	vmov	r6, r7, d0
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	4688      	mov	r8, r1
 8009c30:	2101      	movs	r1, #1
 8009c32:	463c      	mov	r4, r7
 8009c34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c38:	4617      	mov	r7, r2
 8009c3a:	f7ff fd5b 	bl	80096f4 <_Balloc>
 8009c3e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009c42:	4681      	mov	r9, r0
 8009c44:	b10d      	cbz	r5, 8009c4a <__d2b+0x26>
 8009c46:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009c4a:	9401      	str	r4, [sp, #4]
 8009c4c:	b31e      	cbz	r6, 8009c96 <__d2b+0x72>
 8009c4e:	a802      	add	r0, sp, #8
 8009c50:	f840 6d08 	str.w	r6, [r0, #-8]!
 8009c54:	f7ff fde0 	bl	8009818 <__lo0bits>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d134      	bne.n	8009cc6 <__d2b+0xa2>
 8009c5c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009c60:	f8c9 2014 	str.w	r2, [r9, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bf14      	ite	ne
 8009c68:	2402      	movne	r4, #2
 8009c6a:	2401      	moveq	r4, #1
 8009c6c:	f8c9 3018 	str.w	r3, [r9, #24]
 8009c70:	f8c9 4010 	str.w	r4, [r9, #16]
 8009c74:	b9dd      	cbnz	r5, 8009cae <__d2b+0x8a>
 8009c76:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8009c7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c7e:	f8c8 0000 	str.w	r0, [r8]
 8009c82:	6918      	ldr	r0, [r3, #16]
 8009c84:	f7ff fda8 	bl	80097d8 <__hi0bits>
 8009c88:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8009c8c:	6038      	str	r0, [r7, #0]
 8009c8e:	4648      	mov	r0, r9
 8009c90:	b003      	add	sp, #12
 8009c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c96:	a801      	add	r0, sp, #4
 8009c98:	f7ff fdbe 	bl	8009818 <__lo0bits>
 8009c9c:	2401      	movs	r4, #1
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	f8c9 3014 	str.w	r3, [r9, #20]
 8009ca4:	3020      	adds	r0, #32
 8009ca6:	f8c9 4010 	str.w	r4, [r9, #16]
 8009caa:	2d00      	cmp	r5, #0
 8009cac:	d0e3      	beq.n	8009c76 <__d2b+0x52>
 8009cae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cb2:	4405      	add	r5, r0
 8009cb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cb8:	f8c8 5000 	str.w	r5, [r8]
 8009cbc:	6038      	str	r0, [r7, #0]
 8009cbe:	4648      	mov	r0, r9
 8009cc0:	b003      	add	sp, #12
 8009cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cc6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009cca:	f1c0 0120 	rsb	r1, r0, #32
 8009cce:	fa03 f101 	lsl.w	r1, r3, r1
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	40c3      	lsrs	r3, r0
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	f8c9 2014 	str.w	r2, [r9, #20]
 8009cdc:	e7c2      	b.n	8009c64 <__d2b+0x40>
 8009cde:	bf00      	nop

08009ce0 <_putc_r>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	460d      	mov	r5, r1
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	b108      	cbz	r0, 8009cee <_putc_r+0xe>
 8009cea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009cec:	b1d3      	cbz	r3, 8009d24 <_putc_r+0x44>
 8009cee:	68a3      	ldr	r3, [r4, #8]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	60a3      	str	r3, [r4, #8]
 8009cf6:	db06      	blt.n	8009d06 <_putc_r+0x26>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	701d      	strb	r5, [r3, #0]
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	6022      	str	r2, [r4, #0]
 8009d02:	7818      	ldrb	r0, [r3, #0]
 8009d04:	bd70      	pop	{r4, r5, r6, pc}
 8009d06:	69a2      	ldr	r2, [r4, #24]
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	db0e      	blt.n	8009d2a <_putc_r+0x4a>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	701d      	strb	r5, [r3, #0]
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	7819      	ldrb	r1, [r3, #0]
 8009d14:	290a      	cmp	r1, #10
 8009d16:	d1f2      	bne.n	8009cfe <_putc_r+0x1e>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d20:	f000 bab8 	b.w	800a294 <__swbuf_r>
 8009d24:	f7fe fe20 	bl	8008968 <__sinit>
 8009d28:	e7e1      	b.n	8009cee <_putc_r+0xe>
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4622      	mov	r2, r4
 8009d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d34:	f000 baae 	b.w	800a294 <__swbuf_r>

08009d38 <_realloc_r>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	4617      	mov	r7, r2
 8009d3e:	b083      	sub	sp, #12
 8009d40:	460e      	mov	r6, r1
 8009d42:	2900      	cmp	r1, #0
 8009d44:	f000 80e7 	beq.w	8009f16 <_realloc_r+0x1de>
 8009d48:	4681      	mov	r9, r0
 8009d4a:	f107 050b 	add.w	r5, r7, #11
 8009d4e:	f7ff fccd 	bl	80096ec <__malloc_lock>
 8009d52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d56:	2d16      	cmp	r5, #22
 8009d58:	f023 0403 	bic.w	r4, r3, #3
 8009d5c:	f1a6 0808 	sub.w	r8, r6, #8
 8009d60:	d84c      	bhi.n	8009dfc <_realloc_r+0xc4>
 8009d62:	2210      	movs	r2, #16
 8009d64:	4615      	mov	r5, r2
 8009d66:	42af      	cmp	r7, r5
 8009d68:	d84d      	bhi.n	8009e06 <_realloc_r+0xce>
 8009d6a:	4294      	cmp	r4, r2
 8009d6c:	f280 8084 	bge.w	8009e78 <_realloc_r+0x140>
 8009d70:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 800a120 <_realloc_r+0x3e8>
 8009d74:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009d78:	eb08 0104 	add.w	r1, r8, r4
 8009d7c:	4288      	cmp	r0, r1
 8009d7e:	f000 80d6 	beq.w	8009f2e <_realloc_r+0x1f6>
 8009d82:	6848      	ldr	r0, [r1, #4]
 8009d84:	f020 0e01 	bic.w	lr, r0, #1
 8009d88:	448e      	add	lr, r1
 8009d8a:	f8de e004 	ldr.w	lr, [lr, #4]
 8009d8e:	f01e 0f01 	tst.w	lr, #1
 8009d92:	d13f      	bne.n	8009e14 <_realloc_r+0xdc>
 8009d94:	f020 0003 	bic.w	r0, r0, #3
 8009d98:	4420      	add	r0, r4
 8009d9a:	4290      	cmp	r0, r2
 8009d9c:	f280 80c1 	bge.w	8009f22 <_realloc_r+0x1ea>
 8009da0:	07db      	lsls	r3, r3, #31
 8009da2:	f100 808f 	bmi.w	8009ec4 <_realloc_r+0x18c>
 8009da6:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009daa:	ebc3 0a08 	rsb	sl, r3, r8
 8009dae:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009db2:	f023 0303 	bic.w	r3, r3, #3
 8009db6:	eb00 0e03 	add.w	lr, r0, r3
 8009dba:	4596      	cmp	lr, r2
 8009dbc:	db34      	blt.n	8009e28 <_realloc_r+0xf0>
 8009dbe:	68cb      	ldr	r3, [r1, #12]
 8009dc0:	688a      	ldr	r2, [r1, #8]
 8009dc2:	4657      	mov	r7, sl
 8009dc4:	60d3      	str	r3, [r2, #12]
 8009dc6:	609a      	str	r2, [r3, #8]
 8009dc8:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009dcc:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009dd0:	60cb      	str	r3, [r1, #12]
 8009dd2:	1f22      	subs	r2, r4, #4
 8009dd4:	2a24      	cmp	r2, #36	; 0x24
 8009dd6:	6099      	str	r1, [r3, #8]
 8009dd8:	f200 8136 	bhi.w	800a048 <_realloc_r+0x310>
 8009ddc:	2a13      	cmp	r2, #19
 8009dde:	f240 80fd 	bls.w	8009fdc <_realloc_r+0x2a4>
 8009de2:	6833      	ldr	r3, [r6, #0]
 8009de4:	f8ca 3008 	str.w	r3, [sl, #8]
 8009de8:	6873      	ldr	r3, [r6, #4]
 8009dea:	f8ca 300c 	str.w	r3, [sl, #12]
 8009dee:	2a1b      	cmp	r2, #27
 8009df0:	f200 8140 	bhi.w	800a074 <_realloc_r+0x33c>
 8009df4:	3608      	adds	r6, #8
 8009df6:	f10a 0310 	add.w	r3, sl, #16
 8009dfa:	e0f0      	b.n	8009fde <_realloc_r+0x2a6>
 8009dfc:	f025 0507 	bic.w	r5, r5, #7
 8009e00:	2d00      	cmp	r5, #0
 8009e02:	462a      	mov	r2, r5
 8009e04:	daaf      	bge.n	8009d66 <_realloc_r+0x2e>
 8009e06:	230c      	movs	r3, #12
 8009e08:	2000      	movs	r0, #0
 8009e0a:	f8c9 3000 	str.w	r3, [r9]
 8009e0e:	b003      	add	sp, #12
 8009e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e14:	07d9      	lsls	r1, r3, #31
 8009e16:	d455      	bmi.n	8009ec4 <_realloc_r+0x18c>
 8009e18:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009e1c:	ebc3 0a08 	rsb	sl, r3, r8
 8009e20:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e24:	f023 0303 	bic.w	r3, r3, #3
 8009e28:	4423      	add	r3, r4
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	db4a      	blt.n	8009ec4 <_realloc_r+0x18c>
 8009e2e:	4657      	mov	r7, sl
 8009e30:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009e34:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009e38:	1f22      	subs	r2, r4, #4
 8009e3a:	2a24      	cmp	r2, #36	; 0x24
 8009e3c:	60c1      	str	r1, [r0, #12]
 8009e3e:	6088      	str	r0, [r1, #8]
 8009e40:	f200 810e 	bhi.w	800a060 <_realloc_r+0x328>
 8009e44:	2a13      	cmp	r2, #19
 8009e46:	f240 8109 	bls.w	800a05c <_realloc_r+0x324>
 8009e4a:	6831      	ldr	r1, [r6, #0]
 8009e4c:	f8ca 1008 	str.w	r1, [sl, #8]
 8009e50:	6871      	ldr	r1, [r6, #4]
 8009e52:	f8ca 100c 	str.w	r1, [sl, #12]
 8009e56:	2a1b      	cmp	r2, #27
 8009e58:	f200 8121 	bhi.w	800a09e <_realloc_r+0x366>
 8009e5c:	3608      	adds	r6, #8
 8009e5e:	f10a 0210 	add.w	r2, sl, #16
 8009e62:	6831      	ldr	r1, [r6, #0]
 8009e64:	6011      	str	r1, [r2, #0]
 8009e66:	6871      	ldr	r1, [r6, #4]
 8009e68:	6051      	str	r1, [r2, #4]
 8009e6a:	68b1      	ldr	r1, [r6, #8]
 8009e6c:	6091      	str	r1, [r2, #8]
 8009e6e:	461c      	mov	r4, r3
 8009e70:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e74:	463e      	mov	r6, r7
 8009e76:	46d0      	mov	r8, sl
 8009e78:	1b62      	subs	r2, r4, r5
 8009e7a:	2a0f      	cmp	r2, #15
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	d80e      	bhi.n	8009ea0 <_realloc_r+0x168>
 8009e82:	4323      	orrs	r3, r4
 8009e84:	4444      	add	r4, r8
 8009e86:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e8a:	6863      	ldr	r3, [r4, #4]
 8009e8c:	f043 0301 	orr.w	r3, r3, #1
 8009e90:	6063      	str	r3, [r4, #4]
 8009e92:	4648      	mov	r0, r9
 8009e94:	f7ff fc2c 	bl	80096f0 <__malloc_unlock>
 8009e98:	4630      	mov	r0, r6
 8009e9a:	b003      	add	sp, #12
 8009e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea0:	eb08 0105 	add.w	r1, r8, r5
 8009ea4:	431d      	orrs	r5, r3
 8009ea6:	f042 0301 	orr.w	r3, r2, #1
 8009eaa:	440a      	add	r2, r1
 8009eac:	f8c8 5004 	str.w	r5, [r8, #4]
 8009eb0:	604b      	str	r3, [r1, #4]
 8009eb2:	6853      	ldr	r3, [r2, #4]
 8009eb4:	f043 0301 	orr.w	r3, r3, #1
 8009eb8:	3108      	adds	r1, #8
 8009eba:	6053      	str	r3, [r2, #4]
 8009ebc:	4648      	mov	r0, r9
 8009ebe:	f7fe fdc1 	bl	8008a44 <_free_r>
 8009ec2:	e7e6      	b.n	8009e92 <_realloc_r+0x15a>
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f7ff f8d0 	bl	800906c <_malloc_r>
 8009ecc:	4607      	mov	r7, r0
 8009ece:	b1d8      	cbz	r0, 8009f08 <_realloc_r+0x1d0>
 8009ed0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ed4:	f023 0201 	bic.w	r2, r3, #1
 8009ed8:	4442      	add	r2, r8
 8009eda:	f1a0 0108 	sub.w	r1, r0, #8
 8009ede:	4291      	cmp	r1, r2
 8009ee0:	f000 80ac 	beq.w	800a03c <_realloc_r+0x304>
 8009ee4:	1f22      	subs	r2, r4, #4
 8009ee6:	2a24      	cmp	r2, #36	; 0x24
 8009ee8:	f200 8099 	bhi.w	800a01e <_realloc_r+0x2e6>
 8009eec:	2a13      	cmp	r2, #19
 8009eee:	d86a      	bhi.n	8009fc6 <_realloc_r+0x28e>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	6811      	ldr	r1, [r2, #0]
 8009ef6:	6019      	str	r1, [r3, #0]
 8009ef8:	6851      	ldr	r1, [r2, #4]
 8009efa:	6059      	str	r1, [r3, #4]
 8009efc:	6892      	ldr	r2, [r2, #8]
 8009efe:	609a      	str	r2, [r3, #8]
 8009f00:	4631      	mov	r1, r6
 8009f02:	4648      	mov	r0, r9
 8009f04:	f7fe fd9e 	bl	8008a44 <_free_r>
 8009f08:	4648      	mov	r0, r9
 8009f0a:	f7ff fbf1 	bl	80096f0 <__malloc_unlock>
 8009f0e:	4638      	mov	r0, r7
 8009f10:	b003      	add	sp, #12
 8009f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f16:	4611      	mov	r1, r2
 8009f18:	b003      	add	sp, #12
 8009f1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1e:	f7ff b8a5 	b.w	800906c <_malloc_r>
 8009f22:	68ca      	ldr	r2, [r1, #12]
 8009f24:	6889      	ldr	r1, [r1, #8]
 8009f26:	4604      	mov	r4, r0
 8009f28:	60ca      	str	r2, [r1, #12]
 8009f2a:	6091      	str	r1, [r2, #8]
 8009f2c:	e7a4      	b.n	8009e78 <_realloc_r+0x140>
 8009f2e:	6841      	ldr	r1, [r0, #4]
 8009f30:	f021 0103 	bic.w	r1, r1, #3
 8009f34:	4421      	add	r1, r4
 8009f36:	f105 0010 	add.w	r0, r5, #16
 8009f3a:	4281      	cmp	r1, r0
 8009f3c:	da5b      	bge.n	8009ff6 <_realloc_r+0x2be>
 8009f3e:	07db      	lsls	r3, r3, #31
 8009f40:	d4c0      	bmi.n	8009ec4 <_realloc_r+0x18c>
 8009f42:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009f46:	ebc3 0a08 	rsb	sl, r3, r8
 8009f4a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f4e:	f023 0303 	bic.w	r3, r3, #3
 8009f52:	eb01 0c03 	add.w	ip, r1, r3
 8009f56:	4560      	cmp	r0, ip
 8009f58:	f73f af66 	bgt.w	8009e28 <_realloc_r+0xf0>
 8009f5c:	4657      	mov	r7, sl
 8009f5e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009f62:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009f66:	1f22      	subs	r2, r4, #4
 8009f68:	2a24      	cmp	r2, #36	; 0x24
 8009f6a:	60cb      	str	r3, [r1, #12]
 8009f6c:	6099      	str	r1, [r3, #8]
 8009f6e:	f200 80b8 	bhi.w	800a0e2 <_realloc_r+0x3aa>
 8009f72:	2a13      	cmp	r2, #19
 8009f74:	f240 80a9 	bls.w	800a0ca <_realloc_r+0x392>
 8009f78:	6833      	ldr	r3, [r6, #0]
 8009f7a:	f8ca 3008 	str.w	r3, [sl, #8]
 8009f7e:	6873      	ldr	r3, [r6, #4]
 8009f80:	f8ca 300c 	str.w	r3, [sl, #12]
 8009f84:	2a1b      	cmp	r2, #27
 8009f86:	f200 80b5 	bhi.w	800a0f4 <_realloc_r+0x3bc>
 8009f8a:	3608      	adds	r6, #8
 8009f8c:	f10a 0310 	add.w	r3, sl, #16
 8009f90:	6832      	ldr	r2, [r6, #0]
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	6872      	ldr	r2, [r6, #4]
 8009f96:	605a      	str	r2, [r3, #4]
 8009f98:	68b2      	ldr	r2, [r6, #8]
 8009f9a:	609a      	str	r2, [r3, #8]
 8009f9c:	eb0a 0205 	add.w	r2, sl, r5
 8009fa0:	ebc5 030c 	rsb	r3, r5, ip
 8009fa4:	f043 0301 	orr.w	r3, r3, #1
 8009fa8:	f8cb 2008 	str.w	r2, [fp, #8]
 8009fac:	6053      	str	r3, [r2, #4]
 8009fae:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	431d      	orrs	r5, r3
 8009fb8:	4648      	mov	r0, r9
 8009fba:	f8ca 5004 	str.w	r5, [sl, #4]
 8009fbe:	f7ff fb97 	bl	80096f0 <__malloc_unlock>
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	e769      	b.n	8009e9a <_realloc_r+0x162>
 8009fc6:	6833      	ldr	r3, [r6, #0]
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	6873      	ldr	r3, [r6, #4]
 8009fcc:	6043      	str	r3, [r0, #4]
 8009fce:	2a1b      	cmp	r2, #27
 8009fd0:	d829      	bhi.n	800a026 <_realloc_r+0x2ee>
 8009fd2:	f100 0308 	add.w	r3, r0, #8
 8009fd6:	f106 0208 	add.w	r2, r6, #8
 8009fda:	e78b      	b.n	8009ef4 <_realloc_r+0x1bc>
 8009fdc:	463b      	mov	r3, r7
 8009fde:	6832      	ldr	r2, [r6, #0]
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	6872      	ldr	r2, [r6, #4]
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	68b2      	ldr	r2, [r6, #8]
 8009fe8:	609a      	str	r2, [r3, #8]
 8009fea:	463e      	mov	r6, r7
 8009fec:	4674      	mov	r4, lr
 8009fee:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ff2:	46d0      	mov	r8, sl
 8009ff4:	e740      	b.n	8009e78 <_realloc_r+0x140>
 8009ff6:	eb08 0205 	add.w	r2, r8, r5
 8009ffa:	1b4b      	subs	r3, r1, r5
 8009ffc:	f043 0301 	orr.w	r3, r3, #1
 800a000:	f8cb 2008 	str.w	r2, [fp, #8]
 800a004:	6053      	str	r3, [r2, #4]
 800a006:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	431d      	orrs	r5, r3
 800a010:	4648      	mov	r0, r9
 800a012:	f846 5c04 	str.w	r5, [r6, #-4]
 800a016:	f7ff fb6b 	bl	80096f0 <__malloc_unlock>
 800a01a:	4630      	mov	r0, r6
 800a01c:	e73d      	b.n	8009e9a <_realloc_r+0x162>
 800a01e:	4631      	mov	r1, r6
 800a020:	f7ff fb00 	bl	8009624 <memmove>
 800a024:	e76c      	b.n	8009f00 <_realloc_r+0x1c8>
 800a026:	68b3      	ldr	r3, [r6, #8]
 800a028:	6083      	str	r3, [r0, #8]
 800a02a:	68f3      	ldr	r3, [r6, #12]
 800a02c:	60c3      	str	r3, [r0, #12]
 800a02e:	2a24      	cmp	r2, #36	; 0x24
 800a030:	d02c      	beq.n	800a08c <_realloc_r+0x354>
 800a032:	f100 0310 	add.w	r3, r0, #16
 800a036:	f106 0210 	add.w	r2, r6, #16
 800a03a:	e75b      	b.n	8009ef4 <_realloc_r+0x1bc>
 800a03c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a040:	f022 0203 	bic.w	r2, r2, #3
 800a044:	4414      	add	r4, r2
 800a046:	e717      	b.n	8009e78 <_realloc_r+0x140>
 800a048:	4631      	mov	r1, r6
 800a04a:	4638      	mov	r0, r7
 800a04c:	4674      	mov	r4, lr
 800a04e:	463e      	mov	r6, r7
 800a050:	f7ff fae8 	bl	8009624 <memmove>
 800a054:	46d0      	mov	r8, sl
 800a056:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a05a:	e70d      	b.n	8009e78 <_realloc_r+0x140>
 800a05c:	463a      	mov	r2, r7
 800a05e:	e700      	b.n	8009e62 <_realloc_r+0x12a>
 800a060:	4631      	mov	r1, r6
 800a062:	4638      	mov	r0, r7
 800a064:	461c      	mov	r4, r3
 800a066:	463e      	mov	r6, r7
 800a068:	f7ff fadc 	bl	8009624 <memmove>
 800a06c:	46d0      	mov	r8, sl
 800a06e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a072:	e701      	b.n	8009e78 <_realloc_r+0x140>
 800a074:	68b3      	ldr	r3, [r6, #8]
 800a076:	f8ca 3010 	str.w	r3, [sl, #16]
 800a07a:	68f3      	ldr	r3, [r6, #12]
 800a07c:	f8ca 3014 	str.w	r3, [sl, #20]
 800a080:	2a24      	cmp	r2, #36	; 0x24
 800a082:	d018      	beq.n	800a0b6 <_realloc_r+0x37e>
 800a084:	3610      	adds	r6, #16
 800a086:	f10a 0318 	add.w	r3, sl, #24
 800a08a:	e7a8      	b.n	8009fde <_realloc_r+0x2a6>
 800a08c:	6933      	ldr	r3, [r6, #16]
 800a08e:	6103      	str	r3, [r0, #16]
 800a090:	6973      	ldr	r3, [r6, #20]
 800a092:	6143      	str	r3, [r0, #20]
 800a094:	f106 0218 	add.w	r2, r6, #24
 800a098:	f100 0318 	add.w	r3, r0, #24
 800a09c:	e72a      	b.n	8009ef4 <_realloc_r+0x1bc>
 800a09e:	68b1      	ldr	r1, [r6, #8]
 800a0a0:	f8ca 1010 	str.w	r1, [sl, #16]
 800a0a4:	68f1      	ldr	r1, [r6, #12]
 800a0a6:	f8ca 1014 	str.w	r1, [sl, #20]
 800a0aa:	2a24      	cmp	r2, #36	; 0x24
 800a0ac:	d00f      	beq.n	800a0ce <_realloc_r+0x396>
 800a0ae:	3610      	adds	r6, #16
 800a0b0:	f10a 0218 	add.w	r2, sl, #24
 800a0b4:	e6d5      	b.n	8009e62 <_realloc_r+0x12a>
 800a0b6:	6933      	ldr	r3, [r6, #16]
 800a0b8:	f8ca 3018 	str.w	r3, [sl, #24]
 800a0bc:	6973      	ldr	r3, [r6, #20]
 800a0be:	f8ca 301c 	str.w	r3, [sl, #28]
 800a0c2:	3618      	adds	r6, #24
 800a0c4:	f10a 0320 	add.w	r3, sl, #32
 800a0c8:	e789      	b.n	8009fde <_realloc_r+0x2a6>
 800a0ca:	463b      	mov	r3, r7
 800a0cc:	e760      	b.n	8009f90 <_realloc_r+0x258>
 800a0ce:	6932      	ldr	r2, [r6, #16]
 800a0d0:	f8ca 2018 	str.w	r2, [sl, #24]
 800a0d4:	6972      	ldr	r2, [r6, #20]
 800a0d6:	f8ca 201c 	str.w	r2, [sl, #28]
 800a0da:	3618      	adds	r6, #24
 800a0dc:	f10a 0220 	add.w	r2, sl, #32
 800a0e0:	e6bf      	b.n	8009e62 <_realloc_r+0x12a>
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f8cd c004 	str.w	ip, [sp, #4]
 800a0ea:	f7ff fa9b 	bl	8009624 <memmove>
 800a0ee:	f8dd c004 	ldr.w	ip, [sp, #4]
 800a0f2:	e753      	b.n	8009f9c <_realloc_r+0x264>
 800a0f4:	68b3      	ldr	r3, [r6, #8]
 800a0f6:	f8ca 3010 	str.w	r3, [sl, #16]
 800a0fa:	68f3      	ldr	r3, [r6, #12]
 800a0fc:	f8ca 3014 	str.w	r3, [sl, #20]
 800a100:	2a24      	cmp	r2, #36	; 0x24
 800a102:	d003      	beq.n	800a10c <_realloc_r+0x3d4>
 800a104:	3610      	adds	r6, #16
 800a106:	f10a 0318 	add.w	r3, sl, #24
 800a10a:	e741      	b.n	8009f90 <_realloc_r+0x258>
 800a10c:	6933      	ldr	r3, [r6, #16]
 800a10e:	f8ca 3018 	str.w	r3, [sl, #24]
 800a112:	6973      	ldr	r3, [r6, #20]
 800a114:	f8ca 301c 	str.w	r3, [sl, #28]
 800a118:	3618      	adds	r6, #24
 800a11a:	f10a 0320 	add.w	r3, sl, #32
 800a11e:	e737      	b.n	8009f90 <_realloc_r+0x258>
 800a120:	20000688 	.word	0x20000688

0800a124 <__fpclassifyd>:
 800a124:	ec53 2b10 	vmov	r2, r3, d0
 800a128:	b410      	push	{r4}
 800a12a:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 800a12e:	d008      	beq.n	800a142 <__fpclassifyd+0x1e>
 800a130:	4911      	ldr	r1, [pc, #68]	; (800a178 <__fpclassifyd+0x54>)
 800a132:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800a136:	4288      	cmp	r0, r1
 800a138:	d808      	bhi.n	800a14c <__fpclassifyd+0x28>
 800a13a:	2004      	movs	r0, #4
 800a13c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	b91a      	cbnz	r2, 800a14c <__fpclassifyd+0x28>
 800a144:	2002      	movs	r0, #2
 800a146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800a150:	4909      	ldr	r1, [pc, #36]	; (800a178 <__fpclassifyd+0x54>)
 800a152:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a156:	428b      	cmp	r3, r1
 800a158:	d9ef      	bls.n	800a13a <__fpclassifyd+0x16>
 800a15a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a15e:	d201      	bcs.n	800a164 <__fpclassifyd+0x40>
 800a160:	2003      	movs	r0, #3
 800a162:	e7eb      	b.n	800a13c <__fpclassifyd+0x18>
 800a164:	4b05      	ldr	r3, [pc, #20]	; (800a17c <__fpclassifyd+0x58>)
 800a166:	429c      	cmp	r4, r3
 800a168:	d001      	beq.n	800a16e <__fpclassifyd+0x4a>
 800a16a:	2000      	movs	r0, #0
 800a16c:	e7e6      	b.n	800a13c <__fpclassifyd+0x18>
 800a16e:	fab2 f082 	clz	r0, r2
 800a172:	0940      	lsrs	r0, r0, #5
 800a174:	e7e2      	b.n	800a13c <__fpclassifyd+0x18>
 800a176:	bf00      	nop
 800a178:	7fdfffff 	.word	0x7fdfffff
 800a17c:	7ff00000 	.word	0x7ff00000

0800a180 <__sread>:
 800a180:	b510      	push	{r4, lr}
 800a182:	460c      	mov	r4, r1
 800a184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a188:	f7f7 fcaa 	bl	8001ae0 <_read_r>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	db03      	blt.n	800a198 <__sread+0x18>
 800a190:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a192:	4403      	add	r3, r0
 800a194:	6523      	str	r3, [r4, #80]	; 0x50
 800a196:	bd10      	pop	{r4, pc}
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a19e:	81a3      	strh	r3, [r4, #12]
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	bf00      	nop

0800a1a4 <__swrite>:
 800a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	4616      	mov	r6, r2
 800a1aa:	898a      	ldrh	r2, [r1, #12]
 800a1ac:	461d      	mov	r5, r3
 800a1ae:	05d3      	lsls	r3, r2, #23
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	d506      	bpl.n	800a1c4 <__swrite+0x20>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	2302      	movs	r3, #2
 800a1be:	f7f7 fbbf 	bl	8001940 <_lseek_r>
 800a1c2:	89a2      	ldrh	r2, [r4, #12]
 800a1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1cc:	81a2      	strh	r2, [r4, #12]
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d8:	f7f7 bd0c 	b.w	8001bf4 <_write_r>

0800a1dc <__sseek>:
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	460c      	mov	r4, r1
 800a1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e4:	f7f7 fbac 	bl	8001940 <_lseek_r>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	1c42      	adds	r2, r0, #1
 800a1ec:	bf0e      	itee	eq
 800a1ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1f6:	6520      	strne	r0, [r4, #80]	; 0x50
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	bd10      	pop	{r4, pc}

0800a1fc <__sclose>:
 800a1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a200:	f7f7 bb94 	b.w	800192c <_close_r>

0800a204 <__sprint_r.part.0>:
 800a204:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a20a:	049c      	lsls	r4, r3, #18
 800a20c:	460f      	mov	r7, r1
 800a20e:	4692      	mov	sl, r2
 800a210:	d52b      	bpl.n	800a26a <__sprint_r.part.0+0x66>
 800a212:	6893      	ldr	r3, [r2, #8]
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	b333      	cbz	r3, 800a266 <__sprint_r.part.0+0x62>
 800a218:	4680      	mov	r8, r0
 800a21a:	f102 0908 	add.w	r9, r2, #8
 800a21e:	e919 0060 	ldmdb	r9, {r5, r6}
 800a222:	08b6      	lsrs	r6, r6, #2
 800a224:	d017      	beq.n	800a256 <__sprint_r.part.0+0x52>
 800a226:	3d04      	subs	r5, #4
 800a228:	2400      	movs	r4, #0
 800a22a:	e001      	b.n	800a230 <__sprint_r.part.0+0x2c>
 800a22c:	42a6      	cmp	r6, r4
 800a22e:	d010      	beq.n	800a252 <__sprint_r.part.0+0x4e>
 800a230:	4640      	mov	r0, r8
 800a232:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a236:	463a      	mov	r2, r7
 800a238:	f000 f99c 	bl	800a574 <_fputwc_r>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	f104 0401 	add.w	r4, r4, #1
 800a242:	d1f3      	bne.n	800a22c <__sprint_r.part.0+0x28>
 800a244:	2300      	movs	r3, #0
 800a246:	f8ca 3008 	str.w	r3, [sl, #8]
 800a24a:	f8ca 3004 	str.w	r3, [sl, #4]
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a256:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800a25a:	f8ca 3008 	str.w	r3, [sl, #8]
 800a25e:	f109 0908 	add.w	r9, r9, #8
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1db      	bne.n	800a21e <__sprint_r.part.0+0x1a>
 800a266:	2000      	movs	r0, #0
 800a268:	e7ec      	b.n	800a244 <__sprint_r.part.0+0x40>
 800a26a:	f7fe fcc3 	bl	8008bf4 <__sfvwrite_r>
 800a26e:	2300      	movs	r3, #0
 800a270:	f8ca 3008 	str.w	r3, [sl, #8]
 800a274:	f8ca 3004 	str.w	r3, [sl, #4]
 800a278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a27c <__sprint_r>:
 800a27c:	6893      	ldr	r3, [r2, #8]
 800a27e:	b410      	push	{r4}
 800a280:	b11b      	cbz	r3, 800a28a <__sprint_r+0xe>
 800a282:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a286:	f7ff bfbd 	b.w	800a204 <__sprint_r.part.0>
 800a28a:	4618      	mov	r0, r3
 800a28c:	6053      	str	r3, [r2, #4]
 800a28e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <__swbuf_r>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	460d      	mov	r5, r1
 800a298:	4614      	mov	r4, r2
 800a29a:	4606      	mov	r6, r0
 800a29c:	b110      	cbz	r0, 800a2a4 <__swbuf_r+0x10>
 800a29e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d048      	beq.n	800a336 <__swbuf_r+0xa2>
 800a2a4:	89a2      	ldrh	r2, [r4, #12]
 800a2a6:	69a3      	ldr	r3, [r4, #24]
 800a2a8:	60a3      	str	r3, [r4, #8]
 800a2aa:	b291      	uxth	r1, r2
 800a2ac:	0708      	lsls	r0, r1, #28
 800a2ae:	d538      	bpl.n	800a322 <__swbuf_r+0x8e>
 800a2b0:	6923      	ldr	r3, [r4, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d035      	beq.n	800a322 <__swbuf_r+0x8e>
 800a2b6:	0489      	lsls	r1, r1, #18
 800a2b8:	b2ed      	uxtb	r5, r5
 800a2ba:	d515      	bpl.n	800a2e8 <__swbuf_r+0x54>
 800a2bc:	6822      	ldr	r2, [r4, #0]
 800a2be:	6961      	ldr	r1, [r4, #20]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	428b      	cmp	r3, r1
 800a2c4:	da1c      	bge.n	800a300 <__swbuf_r+0x6c>
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	68a1      	ldr	r1, [r4, #8]
 800a2ca:	1c50      	adds	r0, r2, #1
 800a2cc:	3901      	subs	r1, #1
 800a2ce:	60a1      	str	r1, [r4, #8]
 800a2d0:	6020      	str	r0, [r4, #0]
 800a2d2:	7015      	strb	r5, [r2, #0]
 800a2d4:	6962      	ldr	r2, [r4, #20]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d01a      	beq.n	800a310 <__swbuf_r+0x7c>
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	07db      	lsls	r3, r3, #31
 800a2de:	d501      	bpl.n	800a2e4 <__swbuf_r+0x50>
 800a2e0:	2d0a      	cmp	r5, #10
 800a2e2:	d015      	beq.n	800a310 <__swbuf_r+0x7c>
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a2ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2ee:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a2f2:	81a2      	strh	r2, [r4, #12]
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	6661      	str	r1, [r4, #100]	; 0x64
 800a2f8:	6961      	ldr	r1, [r4, #20]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	428b      	cmp	r3, r1
 800a2fe:	dbe2      	blt.n	800a2c6 <__swbuf_r+0x32>
 800a300:	4630      	mov	r0, r6
 800a302:	4621      	mov	r1, r4
 800a304:	f7fe fa9c 	bl	8008840 <_fflush_r>
 800a308:	b940      	cbnz	r0, 800a31c <__swbuf_r+0x88>
 800a30a:	6822      	ldr	r2, [r4, #0]
 800a30c:	2301      	movs	r3, #1
 800a30e:	e7db      	b.n	800a2c8 <__swbuf_r+0x34>
 800a310:	4630      	mov	r0, r6
 800a312:	4621      	mov	r1, r4
 800a314:	f7fe fa94 	bl	8008840 <_fflush_r>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d0e3      	beq.n	800a2e4 <__swbuf_r+0x50>
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a320:	bd70      	pop	{r4, r5, r6, pc}
 800a322:	4630      	mov	r0, r6
 800a324:	4621      	mov	r1, r4
 800a326:	f7fd f985 	bl	8007634 <__swsetup_r>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d1f6      	bne.n	800a31c <__swbuf_r+0x88>
 800a32e:	89a2      	ldrh	r2, [r4, #12]
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	b291      	uxth	r1, r2
 800a334:	e7bf      	b.n	800a2b6 <__swbuf_r+0x22>
 800a336:	f7fe fb17 	bl	8008968 <__sinit>
 800a33a:	e7b3      	b.n	800a2a4 <__swbuf_r+0x10>

0800a33c <__register_exitproc>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	4c25      	ldr	r4, [pc, #148]	; (800a3d8 <__register_exitproc+0x9c>)
 800a342:	6825      	ldr	r5, [r4, #0]
 800a344:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800a348:	4606      	mov	r6, r0
 800a34a:	4688      	mov	r8, r1
 800a34c:	4692      	mov	sl, r2
 800a34e:	4699      	mov	r9, r3
 800a350:	b3cc      	cbz	r4, 800a3c6 <__register_exitproc+0x8a>
 800a352:	6860      	ldr	r0, [r4, #4]
 800a354:	281f      	cmp	r0, #31
 800a356:	dc18      	bgt.n	800a38a <__register_exitproc+0x4e>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	b17e      	cbz	r6, 800a37c <__register_exitproc+0x40>
 800a35c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800a360:	2101      	movs	r1, #1
 800a362:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800a366:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800a36a:	fa01 f200 	lsl.w	r2, r1, r0
 800a36e:	4317      	orrs	r7, r2
 800a370:	2e02      	cmp	r6, #2
 800a372:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800a376:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800a37a:	d01e      	beq.n	800a3ba <__register_exitproc+0x7e>
 800a37c:	3002      	adds	r0, #2
 800a37e:	6063      	str	r3, [r4, #4]
 800a380:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800a384:	2000      	movs	r0, #0
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	4b14      	ldr	r3, [pc, #80]	; (800a3dc <__register_exitproc+0xa0>)
 800a38c:	b303      	cbz	r3, 800a3d0 <__register_exitproc+0x94>
 800a38e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a392:	f7fe fe63 	bl	800905c <malloc>
 800a396:	4604      	mov	r4, r0
 800a398:	b1d0      	cbz	r0, 800a3d0 <__register_exitproc+0x94>
 800a39a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800a39e:	2700      	movs	r7, #0
 800a3a0:	e880 0088 	stmia.w	r0, {r3, r7}
 800a3a4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800a3b0:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800a3b4:	2e00      	cmp	r6, #0
 800a3b6:	d0e1      	beq.n	800a37c <__register_exitproc+0x40>
 800a3b8:	e7d0      	b.n	800a35c <__register_exitproc+0x20>
 800a3ba:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800a3c4:	e7da      	b.n	800a37c <__register_exitproc+0x40>
 800a3c6:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800a3ca:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800a3ce:	e7c0      	b.n	800a352 <__register_exitproc+0x16>
 800a3d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d8:	0801ace0 	.word	0x0801ace0
 800a3dc:	0800905d 	.word	0x0800905d

0800a3e0 <_calloc_r>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	fb02 f101 	mul.w	r1, r2, r1
 800a3e6:	f7fe fe41 	bl	800906c <_malloc_r>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	b168      	cbz	r0, 800a40a <_calloc_r+0x2a>
 800a3ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a3f2:	f022 0203 	bic.w	r2, r2, #3
 800a3f6:	3a04      	subs	r2, #4
 800a3f8:	2a24      	cmp	r2, #36	; 0x24
 800a3fa:	d818      	bhi.n	800a42e <_calloc_r+0x4e>
 800a3fc:	2a13      	cmp	r2, #19
 800a3fe:	d806      	bhi.n	800a40e <_calloc_r+0x2e>
 800a400:	4603      	mov	r3, r0
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	605a      	str	r2, [r3, #4]
 800a408:	609a      	str	r2, [r3, #8]
 800a40a:	4620      	mov	r0, r4
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	2300      	movs	r3, #0
 800a410:	2a1b      	cmp	r2, #27
 800a412:	6003      	str	r3, [r0, #0]
 800a414:	6043      	str	r3, [r0, #4]
 800a416:	d90f      	bls.n	800a438 <_calloc_r+0x58>
 800a418:	2a24      	cmp	r2, #36	; 0x24
 800a41a:	6083      	str	r3, [r0, #8]
 800a41c:	60c3      	str	r3, [r0, #12]
 800a41e:	bf05      	ittet	eq
 800a420:	6103      	streq	r3, [r0, #16]
 800a422:	6143      	streq	r3, [r0, #20]
 800a424:	f100 0310 	addne.w	r3, r0, #16
 800a428:	f100 0318 	addeq.w	r3, r0, #24
 800a42c:	e7e9      	b.n	800a402 <_calloc_r+0x22>
 800a42e:	2100      	movs	r1, #0
 800a430:	f7fb fc08 	bl	8005c44 <memset>
 800a434:	4620      	mov	r0, r4
 800a436:	bd10      	pop	{r4, pc}
 800a438:	f100 0308 	add.w	r3, r0, #8
 800a43c:	e7e1      	b.n	800a402 <_calloc_r+0x22>
 800a43e:	bf00      	nop

0800a440 <_fclose_r>:
 800a440:	2900      	cmp	r1, #0
 800a442:	d03d      	beq.n	800a4c0 <_fclose_r+0x80>
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	4605      	mov	r5, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	b108      	cbz	r0, 800a450 <_fclose_r+0x10>
 800a44c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a44e:	b37b      	cbz	r3, 800a4b0 <_fclose_r+0x70>
 800a450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a454:	b90b      	cbnz	r3, 800a45a <_fclose_r+0x1a>
 800a456:	2000      	movs	r0, #0
 800a458:	bd70      	pop	{r4, r5, r6, pc}
 800a45a:	4628      	mov	r0, r5
 800a45c:	4621      	mov	r1, r4
 800a45e:	f7fe f945 	bl	80086ec <__sflush_r>
 800a462:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a464:	4606      	mov	r6, r0
 800a466:	b133      	cbz	r3, 800a476 <_fclose_r+0x36>
 800a468:	4628      	mov	r0, r5
 800a46a:	69e1      	ldr	r1, [r4, #28]
 800a46c:	4798      	blx	r3
 800a46e:	2800      	cmp	r0, #0
 800a470:	bfb8      	it	lt
 800a472:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	061b      	lsls	r3, r3, #24
 800a47a:	d41c      	bmi.n	800a4b6 <_fclose_r+0x76>
 800a47c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a47e:	b141      	cbz	r1, 800a492 <_fclose_r+0x52>
 800a480:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a484:	4299      	cmp	r1, r3
 800a486:	d002      	beq.n	800a48e <_fclose_r+0x4e>
 800a488:	4628      	mov	r0, r5
 800a48a:	f7fe fadb 	bl	8008a44 <_free_r>
 800a48e:	2300      	movs	r3, #0
 800a490:	6323      	str	r3, [r4, #48]	; 0x30
 800a492:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a494:	b121      	cbz	r1, 800a4a0 <_fclose_r+0x60>
 800a496:	4628      	mov	r0, r5
 800a498:	f7fe fad4 	bl	8008a44 <_free_r>
 800a49c:	2300      	movs	r3, #0
 800a49e:	6463      	str	r3, [r4, #68]	; 0x44
 800a4a0:	f7fe fa68 	bl	8008974 <__sfp_lock_acquire>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	f7fe fa66 	bl	8008978 <__sfp_lock_release>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}
 800a4b0:	f7fe fa5a 	bl	8008968 <__sinit>
 800a4b4:	e7cc      	b.n	800a450 <_fclose_r+0x10>
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	6921      	ldr	r1, [r4, #16]
 800a4ba:	f7fe fac3 	bl	8008a44 <_free_r>
 800a4be:	e7dd      	b.n	800a47c <_fclose_r+0x3c>
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	4770      	bx	lr

0800a4c4 <__fputwc>:
 800a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	4607      	mov	r7, r0
 800a4cc:	460e      	mov	r6, r1
 800a4ce:	4614      	mov	r4, r2
 800a4d0:	f7fe fd4a 	bl	8008f68 <__locale_mb_cur_max>
 800a4d4:	2801      	cmp	r0, #1
 800a4d6:	d041      	beq.n	800a55c <__fputwc+0x98>
 800a4d8:	4638      	mov	r0, r7
 800a4da:	a901      	add	r1, sp, #4
 800a4dc:	4632      	mov	r2, r6
 800a4de:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a4e2:	f000 f859 	bl	800a598 <_wcrtomb_r>
 800a4e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a4ea:	4680      	mov	r8, r0
 800a4ec:	d02f      	beq.n	800a54e <__fputwc+0x8a>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d03c      	beq.n	800a56c <__fputwc+0xa8>
 800a4f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a4f6:	2500      	movs	r5, #0
 800a4f8:	e009      	b.n	800a50e <__fputwc+0x4a>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	7019      	strb	r1, [r3, #0]
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	6023      	str	r3, [r4, #0]
 800a504:	3501      	adds	r5, #1
 800a506:	45a8      	cmp	r8, r5
 800a508:	d930      	bls.n	800a56c <__fputwc+0xa8>
 800a50a:	ab01      	add	r3, sp, #4
 800a50c:	5d59      	ldrb	r1, [r3, r5]
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	3b01      	subs	r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	60a3      	str	r3, [r4, #8]
 800a516:	daf0      	bge.n	800a4fa <__fputwc+0x36>
 800a518:	69a2      	ldr	r2, [r4, #24]
 800a51a:	4293      	cmp	r3, r2
 800a51c:	db07      	blt.n	800a52e <__fputwc+0x6a>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	7019      	strb	r1, [r3, #0]
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	7819      	ldrb	r1, [r3, #0]
 800a526:	290a      	cmp	r1, #10
 800a528:	f103 0301 	add.w	r3, r3, #1
 800a52c:	d1e9      	bne.n	800a502 <__fputwc+0x3e>
 800a52e:	4638      	mov	r0, r7
 800a530:	4622      	mov	r2, r4
 800a532:	f7ff feaf 	bl	800a294 <__swbuf_r>
 800a536:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800a53a:	fab0 f080 	clz	r0, r0
 800a53e:	0940      	lsrs	r0, r0, #5
 800a540:	2800      	cmp	r0, #0
 800a542:	d0df      	beq.n	800a504 <__fputwc+0x40>
 800a544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a548:	b002      	add	sp, #8
 800a54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	b002      	add	sp, #8
 800a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55c:	1e73      	subs	r3, r6, #1
 800a55e:	2bfe      	cmp	r3, #254	; 0xfe
 800a560:	d8ba      	bhi.n	800a4d8 <__fputwc+0x14>
 800a562:	b2f1      	uxtb	r1, r6
 800a564:	4680      	mov	r8, r0
 800a566:	f88d 1004 	strb.w	r1, [sp, #4]
 800a56a:	e7c4      	b.n	800a4f6 <__fputwc+0x32>
 800a56c:	4630      	mov	r0, r6
 800a56e:	b002      	add	sp, #8
 800a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a574 <_fputwc_r>:
 800a574:	8993      	ldrh	r3, [r2, #12]
 800a576:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a57a:	d10b      	bne.n	800a594 <_fputwc_r+0x20>
 800a57c:	b410      	push	{r4}
 800a57e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800a580:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a584:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800a588:	6654      	str	r4, [r2, #100]	; 0x64
 800a58a:	8193      	strh	r3, [r2, #12]
 800a58c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a590:	f7ff bf98 	b.w	800a4c4 <__fputwc>
 800a594:	f7ff bf96 	b.w	800a4c4 <__fputwc>

0800a598 <_wcrtomb_r>:
 800a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59c:	4605      	mov	r5, r0
 800a59e:	b086      	sub	sp, #24
 800a5a0:	461e      	mov	r6, r3
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	b1a1      	cbz	r1, 800a5d0 <_wcrtomb_r+0x38>
 800a5a6:	4b10      	ldr	r3, [pc, #64]	; (800a5e8 <_wcrtomb_r+0x50>)
 800a5a8:	4617      	mov	r7, r2
 800a5aa:	f8d3 8000 	ldr.w	r8, [r3]
 800a5ae:	f7fe fcd7 	bl	8008f60 <__locale_charset>
 800a5b2:	9600      	str	r6, [sp, #0]
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	463a      	mov	r2, r7
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	47c0      	blx	r8
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	d103      	bne.n	800a5ca <_wcrtomb_r+0x32>
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	238a      	movs	r3, #138	; 0x8a
 800a5c6:	6032      	str	r2, [r6, #0]
 800a5c8:	602b      	str	r3, [r5, #0]
 800a5ca:	b006      	add	sp, #24
 800a5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d0:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <_wcrtomb_r+0x50>)
 800a5d2:	681f      	ldr	r7, [r3, #0]
 800a5d4:	f7fe fcc4 	bl	8008f60 <__locale_charset>
 800a5d8:	9600      	str	r6, [sp, #0]
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4622      	mov	r2, r4
 800a5de:	4628      	mov	r0, r5
 800a5e0:	a903      	add	r1, sp, #12
 800a5e2:	47b8      	blx	r7
 800a5e4:	e7eb      	b.n	800a5be <_wcrtomb_r+0x26>
 800a5e6:	bf00      	nop
 800a5e8:	20000a98 	.word	0x20000a98

0800a5ec <__ascii_wctomb>:
 800a5ec:	b121      	cbz	r1, 800a5f8 <__ascii_wctomb+0xc>
 800a5ee:	2aff      	cmp	r2, #255	; 0xff
 800a5f0:	d804      	bhi.n	800a5fc <__ascii_wctomb+0x10>
 800a5f2:	700a      	strb	r2, [r1, #0]
 800a5f4:	2001      	movs	r0, #1
 800a5f6:	4770      	bx	lr
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4770      	bx	lr
 800a5fc:	238a      	movs	r3, #138	; 0x8a
 800a5fe:	6003      	str	r3, [r0, #0]
 800a600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop

0800a608 <_init>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	bf00      	nop
 800a60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60e:	bc08      	pop	{r3}
 800a610:	469e      	mov	lr, r3
 800a612:	4770      	bx	lr

0800a614 <_fini>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	bf00      	nop
 800a618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61a:	bc08      	pop	{r3}
 800a61c:	469e      	mov	lr, r3
 800a61e:	4770      	bx	lr
